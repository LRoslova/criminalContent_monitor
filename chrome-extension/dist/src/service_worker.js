(()=>{function e(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function n(e,t,n,s){Object.defineProperty(e,t,{get:n,set:s,enumerable:!0,configurable:!0})}var s={},r={},a=t.parcelRequired024;null==a&&((a=function(e){if(e in s)return s[e].exports;if(e in r){var t=r[e];delete r[e];var n={id:e,exports:{}};return s[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){r[e]=t},t.parcelRequired024=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));var i={};class o{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class l{refCount(e){return u("refCount")}incRef(e){return u("incRef")}timerAvailable(){return!0}time(e){return u("time")}read(e){return u("read")}readSync(e){return u("readSync")}readToGPU(e,t){return u("readToGPU")}numDataIds(){return u("numDataIds")}disposeData(e,t){return u("disposeData")}write(e,t,n){return u("write")}move(e,t,n,s,r){return u("move")}createTensorFromGPUData(e,t,n){return u("createTensorFromGPUData")}memory(){return u("memory")}floatPrecision(){return u("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return u("dispose")}}function u(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var c={};function h(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,m(e,t,n)}function p(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,m(e,n,s),m(t,n,s)}function d(e,t,n){return Math.max(e,Math.min(t,n))}function f(e){return e%2==0?e:e+1}function m(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function g(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function y(e,t){const n=Math.random();return t*n+(1-n)*e}function b(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function x(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function w(e,t,n=""){x(N(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function v(e){x(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function k(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function I(e){return 0===e.length}function S(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function N(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function T(e){return e%1==0}function C(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function $(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function E(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return h(t),t}function A(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function R(e,t=(e=>0),n,s){return new Promise(((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const l=t(i);null!=n&&i>=n?a():null!=s?s(o,l):setTimeout(o,l)};o()}))}function F(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function D(e,t){const n=t.length;return x((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),x(e.every((e=>T(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function _(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:D(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function O(e,t){return M(e,t)}function M(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function L(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function z(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function P(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function B(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function W(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function V(e){return"string"==typeof e||e instanceof String}function U(e){return"boolean"==typeof e}function G(e){return"number"==typeof e}function H(e){return Array.isArray(e)?H(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":G(e)?"float32":V(e)?"string":U(e)?"bool":"float32"}function j(e){return!!(e&&e.constructor&&e.call&&e.apply)}function q(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function K(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function X(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=X(e+t*o,i,n,s)}return r}function Y(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return X(0,e,t,n)}function Z(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function J(e,t){const n=Q(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function Q(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function ee(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return Y(e,new Float32Array(n));if("int32"===t)return Y(e,new Int32Array(n));if("bool"===t)return Y(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function te(e){e.forEach((t=>{x(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function ne(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function se(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function re(e){return e&&e.then&&"function"==typeof e.then}n(c,"shuffle",(()=>h)),n(c,"swap",(()=>m)),n(c,"shuffleCombo",(()=>p)),n(c,"clamp",(()=>d)),n(c,"nearestLargerEven",(()=>f)),n(c,"sum",(()=>g)),n(c,"randUniform",(()=>y)),n(c,"distSquared",(()=>b)),n(c,"assert",(()=>x)),n(c,"assertShapesMatch",(()=>w)),n(c,"arraysEqual",(()=>N)),n(c,"assertNonNull",(()=>v)),n(c,"sizeFromShape",(()=>k)),n(c,"isScalarShape",(()=>I)),n(c,"arraysEqualWithNull",(()=>S)),n(c,"isInt",(()=>T)),n(c,"tanh",(()=>C)),n(c,"sizeToSquarishShape",(()=>$)),n(c,"createShuffledIndices",(()=>E)),n(c,"rightPad",(()=>A)),n(c,"repeatedTry",(()=>R)),n(c,"inferFromImplicitShape",(()=>F)),n(c,"parseAxisParam",(()=>D)),n(c,"squeezeShape",(()=>_)),n(c,"getTypedArrayFromDType",(()=>O)),n(c,"getArrayFromDType",(()=>M)),n(c,"checkConversionForErrors",(()=>L)),n(c,"isValidDtype",(()=>z)),n(c,"hasEncodingLoss",(()=>P)),n(c,"bytesPerElement",(()=>B)),n(c,"bytesFromStringArray",(()=>W)),n(c,"isString",(()=>V)),n(c,"isBoolean",(()=>U)),n(c,"isNumber",(()=>G)),n(c,"inferDtype",(()=>H)),n(c,"isFunction",(()=>j)),n(c,"nearestDivisor",(()=>q)),n(c,"computeStrides",(()=>K)),n(c,"toNestedArray",(()=>Y)),n(c,"convertBackendValuesAndArrayBuffer",(()=>Z)),n(c,"makeOnesTypedArray",(()=>J)),n(c,"makeZerosTypedArray",(()=>Q)),n(c,"makeZerosNestedTypedArray",(()=>ee)),n(c,"assertNonNegativeIntegerDimensions",(()=>te)),n(c,"locToIndex",(()=>ne)),n(c,"indexToLoc",(()=>se)),n(c,"isPromise",(()=>re));const ae="tfjsflags";class ie{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=oe,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(re(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(ae in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}}function oe(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function le(){return ue}let ue=null;var ce,he,pe={},de=pe={};function fe(){throw new Error("setTimeout has not been defined")}function me(){throw new Error("clearTimeout has not been defined")}function ge(e){if(ce===setTimeout)return setTimeout(e,0);if((ce===fe||!ce)&&setTimeout)return ce=setTimeout,setTimeout(e,0);try{return ce(e,0)}catch(t){try{return ce.call(null,e,0)}catch(t){return ce.call(this,e,0)}}}!function(){try{ce="function"==typeof setTimeout?setTimeout:fe}catch(e){ce=fe}try{he="function"==typeof clearTimeout?clearTimeout:me}catch(e){he=me}}();var ye,be=[],xe=!1,we=-1;function ve(){xe&&ye&&(xe=!1,ye.length?be=ye.concat(be):we=-1,be.length&&ke())}function ke(){if(!xe){var e=ge(ve);xe=!0;for(var t=be.length;t;){for(ye=be,be=[];++we<t;)ye&&ye[we].run();we=-1,t=be.length}ye=null,xe=!1,function(e){if(he===clearTimeout)return clearTimeout(e);if((he===me||!he)&&clearTimeout)return he=clearTimeout,clearTimeout(e);try{he(e)}catch(t){try{return he.call(null,e)}catch(t){return he.call(this,e)}}}(e)}}function Ie(e,t){this.fun=e,this.array=t}function Se(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Ne;function Te(){if(null==Ne){let e;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==pe)e=pe;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Ne=e}return Ne}function Ce(e,t){const n=function(){const e=Te();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}de.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];be.push(new Ie(e,t)),1!==be.length||xe||ge(ke)},Ie.prototype.run=function(){this.fun.apply(null,this.array)},de.title="browser",de.browser=!0,de.env={},de.argv=[],de.version="",de.versions={},de.on=Se,de.addListener=Se,de.once=Se,de.off=Se,de.removeListener=Se,de.removeAllListeners=Se,de.emit=Se,de.prependListener=Se,de.prependOnceListener=Se,de.listeners=function(e){return[]},de.binding=function(e){throw new Error("process.binding is not supported")},de.cwd=function(){return"/"},de.chdir=function(e){throw new Error("process.chdir is not supported")},de.umask=function(){return 0};var $e={};n($e,"Abs",(()=>Ee)),n($e,"Acos",(()=>Ae)),n($e,"Acosh",(()=>Re)),n($e,"Add",(()=>Fe)),n($e,"AddN",(()=>De)),n($e,"All",(()=>_e)),n($e,"Any",(()=>Oe)),n($e,"ArgMax",(()=>Me)),n($e,"ArgMin",(()=>Le)),n($e,"Asin",(()=>ze)),n($e,"Asinh",(()=>Pe)),n($e,"Atan",(()=>Be)),n($e,"Atanh",(()=>We)),n($e,"Atan2",(()=>Ve)),n($e,"AvgPool",(()=>Ue)),n($e,"AvgPoolGrad",(()=>Ge)),n($e,"AvgPool3D",(()=>He)),n($e,"AvgPool3DGrad",(()=>je)),n($e,"BatchMatMul",(()=>qe)),n($e,"BatchToSpaceND",(()=>Ke)),n($e,"Bincount",(()=>Xe)),n($e,"BitwiseAnd",(()=>Ye)),n($e,"BroadcastTo",(()=>Ze)),n($e,"BroadcastArgs",(()=>Je)),n($e,"Cast",(()=>Qe)),n($e,"Ceil",(()=>et)),n($e,"ClipByValue",(()=>tt)),n($e,"Complex",(()=>nt)),n($e,"ComplexAbs",(()=>st)),n($e,"Concat",(()=>rt)),n($e,"Conv2D",(()=>at)),n($e,"Conv2DBackpropFilter",(()=>it)),n($e,"Conv2DBackpropInput",(()=>ot)),n($e,"Conv3D",(()=>lt)),n($e,"Conv3DBackpropFilterV2",(()=>ut)),n($e,"Conv3DBackpropInputV2",(()=>ct)),n($e,"Cos",(()=>ht)),n($e,"Cosh",(()=>pt)),n($e,"Cumprod",(()=>dt)),n($e,"Cumsum",(()=>ft)),n($e,"CropAndResize",(()=>mt)),n($e,"DenseBincount",(()=>gt)),n($e,"DepthToSpace",(()=>yt)),n($e,"DepthwiseConv2dNative",(()=>bt)),n($e,"DepthwiseConv2dNativeBackpropFilter",(()=>xt)),n($e,"DepthwiseConv2dNativeBackpropInput",(()=>wt)),n($e,"Diag",(()=>vt)),n($e,"Dilation2D",(()=>kt)),n($e,"Dilation2DBackpropInput",(()=>It)),n($e,"Dilation2DBackpropFilter",(()=>St)),n($e,"RealDiv",(()=>Nt)),n($e,"Einsum",(()=>Tt)),n($e,"Elu",(()=>Ct)),n($e,"EluGrad",(()=>$t)),n($e,"Erf",(()=>Et)),n($e,"Equal",(()=>At)),n($e,"Exp",(()=>Rt)),n($e,"ExpandDims",(()=>Ft)),n($e,"Expm1",(()=>Dt)),n($e,"FFT",(()=>_t)),n($e,"Fill",(()=>Ot)),n($e,"FlipLeftRight",(()=>Mt)),n($e,"Floor",(()=>Lt)),n($e,"FloorDiv",(()=>zt)),n($e,"FusedBatchNorm",(()=>Pt)),n($e,"GatherV2",(()=>Bt)),n($e,"GatherNd",(()=>Wt)),n($e,"Greater",(()=>Vt)),n($e,"GreaterEqual",(()=>Ut)),n($e,"Identity",(()=>Gt)),n($e,"IFFT",(()=>Ht)),n($e,"Imag",(()=>jt)),n($e,"IsFinite",(()=>qt)),n($e,"IsInf",(()=>Kt)),n($e,"IsNan",(()=>Xt)),n($e,"LeakyRelu",(()=>Yt)),n($e,"Less",(()=>Zt)),n($e,"LessEqual",(()=>Jt)),n($e,"LinSpace",(()=>Qt)),n($e,"Log",(()=>en)),n($e,"Log1p",(()=>tn)),n($e,"LogicalAnd",(()=>nn)),n($e,"LogicalNot",(()=>sn)),n($e,"LogicalOr",(()=>rn)),n($e,"LogicalXor",(()=>an)),n($e,"LogSoftmax",(()=>on)),n($e,"LowerBound",(()=>ln)),n($e,"LRN",(()=>un)),n($e,"LRNGrad",(()=>cn)),n($e,"MatrixBandPart",(()=>hn)),n($e,"Max",(()=>pn)),n($e,"Maximum",(()=>dn)),n($e,"MaxPool",(()=>fn)),n($e,"MaxPoolGrad",(()=>mn)),n($e,"MaxPool3D",(()=>gn)),n($e,"MaxPool3DGrad",(()=>yn)),n($e,"MaxPoolWithArgmax",(()=>bn)),n($e,"Mean",(()=>xn)),n($e,"Min",(()=>wn)),n($e,"Minimum",(()=>vn)),n($e,"MirrorPad",(()=>kn)),n($e,"Mod",(()=>In)),n($e,"Multinomial",(()=>Sn)),n($e,"Multiply",(()=>Nn)),n($e,"Neg",(()=>Tn)),n($e,"NotEqual",(()=>Cn)),n($e,"NonMaxSuppressionV3",(()=>$n)),n($e,"NonMaxSuppressionV4",(()=>En)),n($e,"NonMaxSuppressionV5",(()=>An)),n($e,"OnesLike",(()=>Rn)),n($e,"OneHot",(()=>Fn)),n($e,"Pack",(()=>Dn)),n($e,"PadV2",(()=>_n)),n($e,"Pool",(()=>On)),n($e,"Pow",(()=>Mn)),n($e,"Prelu",(()=>Ln)),n($e,"Prod",(()=>zn)),n($e,"RaggedGather",(()=>Pn)),n($e,"RaggedRange",(()=>Bn)),n($e,"RaggedTensorToTensor",(()=>Wn)),n($e,"Range",(()=>Vn)),n($e,"Real",(()=>Un)),n($e,"Reciprocal",(()=>Gn)),n($e,"Relu",(()=>Hn)),n($e,"Reshape",(()=>jn)),n($e,"ResizeNearestNeighbor",(()=>qn)),n($e,"ResizeNearestNeighborGrad",(()=>Kn)),n($e,"ResizeBilinear",(()=>Xn)),n($e,"ResizeBilinearGrad",(()=>Yn)),n($e,"Relu6",(()=>Zn)),n($e,"Reverse",(()=>Jn)),n($e,"Round",(()=>Qn)),n($e,"Rsqrt",(()=>es)),n($e,"ScatterNd",(()=>ts)),n($e,"TensorScatterUpdate",(()=>ns)),n($e,"SearchSorted",(()=>ss)),n($e,"Select",(()=>rs)),n($e,"Selu",(()=>as)),n($e,"Slice",(()=>is)),n($e,"Sin",(()=>os)),n($e,"Sinh",(()=>ls)),n($e,"Sign",(()=>us)),n($e,"Sigmoid",(()=>cs)),n($e,"Softplus",(()=>hs)),n($e,"Sqrt",(()=>ps)),n($e,"Sum",(()=>ds)),n($e,"SpaceToBatchND",(()=>fs)),n($e,"SplitV",(()=>ms)),n($e,"Softmax",(()=>gs)),n($e,"SparseFillEmptyRows",(()=>ys)),n($e,"SparseReshape",(()=>bs)),n($e,"SparseSegmentMean",(()=>xs)),n($e,"SparseSegmentSum",(()=>ws)),n($e,"SparseToDense",(()=>vs)),n($e,"SquaredDifference",(()=>ks)),n($e,"Square",(()=>Is)),n($e,"StaticRegexReplace",(()=>Ss)),n($e,"StridedSlice",(()=>Ns)),n($e,"StringNGrams",(()=>Ts)),n($e,"StringSplit",(()=>Cs)),n($e,"StringToHashBucketFast",(()=>$s)),n($e,"Sub",(()=>Es)),n($e,"Tan",(()=>As)),n($e,"Tanh",(()=>Rs)),n($e,"Tile",(()=>Fs)),n($e,"TopK",(()=>Ds)),n($e,"Transform",(()=>_s)),n($e,"Transpose",(()=>Os)),n($e,"Unique",(()=>Ms)),n($e,"Unpack",(()=>Ls)),n($e,"UnsortedSegmentSum",(()=>zs)),n($e,"UpperBound",(()=>Ps)),n($e,"ZerosLike",(()=>Bs)),n($e,"Step",(()=>Ws)),n($e,"FromPixels",(()=>Vs)),n($e,"RotateWithOffset",(()=>Us)),n($e,"_FusedMatMul",(()=>Gs)),n($e,"FusedConv2D",(()=>Hs)),n($e,"FusedDepthwiseConv2D",(()=>js));const Ee="Abs",Ae="Acos",Re="Acosh",Fe="Add",De="AddN",_e="All",Oe="Any",Me="ArgMax",Le="ArgMin",ze="Asin",Pe="Asinh",Be="Atan",We="Atanh",Ve="Atan2",Ue="AvgPool",Ge="AvgPoolGrad",He="AvgPool3D",je="AvgPool3DGrad",qe="BatchMatMul",Ke="BatchToSpaceND",Xe="Bincount",Ye="BitwiseAnd",Ze="BroadcastTo",Je="BroadcastArgs",Qe="Cast",et="Ceil",tt="ClipByValue",nt="Complex",st="ComplexAbs",rt="Concat",at="Conv2D",it="Conv2DBackpropFilter",ot="Conv2DBackpropInput",lt="Conv3D",ut="Conv3DBackpropFilterV2",ct="Conv3DBackpropInputV2",ht="Cos",pt="Cosh",dt="Cumprod",ft="Cumsum",mt="CropAndResize",gt="DenseBincount",yt="DepthToSpace",bt="DepthwiseConv2dNative",xt="DepthwiseConv2dNativeBackpropFilter",wt="DepthwiseConv2dNativeBackpropInput",vt="Diag",kt="Dilation2D",It="Dilation2DBackpropInput",St="Dilation2DBackpropFilter",Nt="RealDiv",Tt="Einsum",Ct="Elu",$t="EluGrad",Et="Erf",At="Equal",Rt="Exp",Ft="ExpandDims",Dt="Expm1",_t="FFT",Ot="Fill",Mt="FlipLeftRight",Lt="Floor",zt="FloorDiv",Pt="FusedBatchNorm",Bt="GatherV2",Wt="GatherNd",Vt="Greater",Ut="GreaterEqual",Gt="Identity",Ht="IFFT",jt="Imag",qt="IsFinite",Kt="IsInf",Xt="IsNan",Yt="LeakyRelu",Zt="Less",Jt="LessEqual",Qt="LinSpace",en="Log",tn="Log1p",nn="LogicalAnd",sn="LogicalNot",rn="LogicalOr",an="LogicalXor",on="LogSoftmax",ln="LowerBound",un="LRN",cn="LRNGrad",hn="MatrixBandPart",pn="Max",dn="Maximum",fn="MaxPool",mn="MaxPoolGrad",gn="MaxPool3D",yn="MaxPool3DGrad",bn="MaxPoolWithArgmax",xn="Mean",wn="Min",vn="Minimum",kn="MirrorPad",In="Mod",Sn="Multinomial",Nn="Multiply",Tn="Neg",Cn="NotEqual",$n="NonMaxSuppressionV3",En="NonMaxSuppressionV4",An="NonMaxSuppressionV5",Rn="OnesLike",Fn="OneHot",Dn="Pack",_n="PadV2",On="Pool",Mn="Pow",Ln="Prelu",zn="Prod",Pn="RaggedGather",Bn="RaggedRange",Wn="RaggedTensorToTensor",Vn="Range",Un="Real",Gn="Reciprocal",Hn="Relu",jn="Reshape",qn="ResizeNearestNeighbor",Kn="ResizeNearestNeighborGrad",Xn="ResizeBilinear",Yn="ResizeBilinearGrad",Zn="Relu6",Jn="Reverse",Qn="Round",es="Rsqrt",ts="ScatterNd",ns="TensorScatterUpdate",ss="SearchSorted",rs="Select",as="Selu",is="Slice",os="Sin",ls="Sinh",us="Sign",cs="Sigmoid",hs="Softplus",ps="Sqrt",ds="Sum",fs="SpaceToBatchND",ms="SplitV",gs="Softmax",ys="SparseFillEmptyRows",bs="SparseReshape",xs="SparseSegmentMean",ws="SparseSegmentSum",vs="SparseToDense",ks="SquaredDifference",Is="Square",Ss="StaticRegexReplace",Ns="StridedSlice",Ts="StringNGrams",Cs="StringSplit",$s="StringToHashBucketFast",Es="Sub",As="Tan",Rs="Tanh",Fs="Tile",Ds="TopK",_s="Transform",Os="Transpose",Ms="Unique",Ls="Unpack",zs="UnsortedSegmentSum",Ps="UpperBound",Bs="ZerosLike",Ws="Step",Vs="FromPixels",Us="RotateWithOffset",Gs="_FusedMatMul",Hs="FusedConv2D",js="FusedDepthwiseConv2D";var qs={};n(qs,"getKernel",(()=>Qs)),n(qs,"getGradient",(()=>er)),n(qs,"getKernelsForBackend",(()=>tr)),n(qs,"registerKernel",(()=>nr)),n(qs,"registerGradient",(()=>sr)),n(qs,"unregisterKernel",(()=>rr)),n(qs,"unregisterGradient",(()=>ar)),n(qs,"copyRegisteredKernels",(()=>ir));var Ks={};function Xs(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.warn(...e)}function Ys(...e){le().getBool("IS_TEST")||le().getBool("PROD")||console.log(...e)}n(Ks,"warn",(()=>Xs)),n(Ks,"log",(()=>Ys));const Zs=Ce("kernelRegistry",(()=>new Map)),Js=Ce("gradRegistry",(()=>new Map));function Qs(e,t){const n=or(e,t);return Zs.get(n)}function er(e){return Js.get(e)}function tr(e){const t=Zs.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function nr(e){const{kernelName:t,backendName:n}=e,s=or(t,n);Zs.has(s)&&Xs(`The kernel '${t}' for backend '${n}' is already registered`),Zs.set(s,e)}function sr(e){const{kernelName:t}=e;Js.has(t)&&le().getBool("DEBUG")&&Xs(`Overriding the gradient for '${t}'`),Js.set(t,e)}function rr(e,t){const n=or(e,t);if(!Zs.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);Zs.delete(n)}function ar(e){if(!Js.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);Js.delete(e)}function ir(e,t){tr(e).forEach((e=>{nr(Object.assign({},e,{backendName:t}))}))}function or(e,t){return`${t}_${e}`}var lr={};function ur(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}n(lr,"createScalarValue",(()=>Xr)),n(lr,"encodeString",(()=>Qr)),n(lr,"toTypedArray",(()=>Yr)),n(lr,"flatten",(()=>na)),n(lr,"now",(()=>Zr)),n(lr,"fetch",(()=>Jr)),n(lr,"decodeString",(()=>ea)),n(lr,"isTypedArray",(()=>ta));var cr={};n(cr,"hexToLong",(()=>Lr)),n(cr,"fingerPrint64",(()=>Kr));var hr;hr=dr;var pr=null;try{pr=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function dr(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function fr(e){return!0===(e&&e.__isLong__)}dr.prototype.__isLong__,Object.defineProperty(dr.prototype,"__isLong__",{value:!0}),dr.isLong=fr;var mr={},gr={};function yr(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=gr[e])?s:(n=xr(e,(0|e)<0?-1:0,!0),r&&(gr[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=mr[e])?s:(n=xr(e,e<0?-1:0,!1),r&&(mr[e]=n),n)}function br(e,t){if(isNaN(e))return t?$r:Cr;if(t){if(e<0)return $r;if(e>=Sr)return Dr}else{if(e<=-Nr)return _r;if(e+1>=Nr)return Fr}return e<0?br(-e,t).neg():xr(e%Ir|0,e/Ir|0,t)}function xr(e,t,n){return new dr(e,t,n)}dr.fromInt=yr,dr.fromNumber=br,dr.fromBits=xr;var wr=Math.pow;function vr(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return Cr;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return vr(e.substring(1),t,n).neg();for(var r=br(wr(n,8)),a=Cr,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=br(wr(n,o));a=a.mul(u).add(br(l))}else a=(a=a.mul(r)).add(br(l))}return a.unsigned=t,a}function kr(e,t){return"number"==typeof e?br(e,t):"string"==typeof e?vr(e,t):xr(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}dr.fromString=vr,dr.fromValue=kr;var Ir=4294967296,Sr=Ir*Ir,Nr=Sr/2,Tr=yr(16777216),Cr=yr(0);dr.ZERO=Cr;var $r=yr(0,!0);dr.UZERO=$r;var Er=yr(1);dr.ONE=Er;var Ar=yr(1,!0);dr.UONE=Ar;var Rr=yr(-1);dr.NEG_ONE=Rr;var Fr=xr(-1,2147483647,!1);dr.MAX_VALUE=Fr;var Dr=xr(-1,-1,!0);dr.MAX_UNSIGNED_VALUE=Dr;var _r=xr(0,-2147483648,!1);dr.MIN_VALUE=_r;var Or=dr.prototype;Or.toInt=function(){return this.unsigned?this.low>>>0:this.low},Or.toNumber=function(){return this.unsigned?(this.high>>>0)*Ir+(this.low>>>0):this.high*Ir+(this.low>>>0)},Or.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(_r)){var t=br(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=br(wr(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},Or.getHighBits=function(){return this.high},Or.getHighBitsUnsigned=function(){return this.high>>>0},Or.getLowBits=function(){return this.low},Or.getLowBitsUnsigned=function(){return this.low>>>0},Or.getNumBitsAbs=function(){if(this.isNegative())return this.eq(_r)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},Or.isZero=function(){return 0===this.high&&0===this.low},Or.eqz=Or.isZero,Or.isNegative=function(){return!this.unsigned&&this.high<0},Or.isPositive=function(){return this.unsigned||this.high>=0},Or.isOdd=function(){return 1==(1&this.low)},Or.isEven=function(){return 0==(1&this.low)},Or.equals=function(e){return fr(e)||(e=kr(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},Or.eq=Or.equals,Or.notEquals=function(e){return!this.eq(e)},Or.neq=Or.notEquals,Or.ne=Or.notEquals,Or.lessThan=function(e){return this.comp(e)<0},Or.lt=Or.lessThan,Or.lessThanOrEqual=function(e){return this.comp(e)<=0},Or.lte=Or.lessThanOrEqual,Or.le=Or.lessThanOrEqual,Or.greaterThan=function(e){return this.comp(e)>0},Or.gt=Or.greaterThan,Or.greaterThanOrEqual=function(e){return this.comp(e)>=0},Or.gte=Or.greaterThanOrEqual,Or.ge=Or.greaterThanOrEqual,Or.compare=function(e){if(fr(e)||(e=kr(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},Or.comp=Or.compare,Or.negate=function(){return!this.unsigned&&this.eq(_r)?_r:this.not().add(Er)},Or.neg=Or.negate,Or.add=function(e){fr(e)||(e=kr(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,xr((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},Or.subtract=function(e){return fr(e)||(e=kr(e)),this.add(e.neg())},Or.sub=Or.subtract,Or.multiply=function(e){if(this.isZero())return Cr;if(fr(e)||(e=kr(e)),pr)return xr(pr.mul(this.low,this.high,e.low,e.high),pr.get_high(),this.unsigned);if(e.isZero())return Cr;if(this.eq(_r))return e.isOdd()?_r:Cr;if(e.eq(_r))return this.isOdd()?_r:Cr;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(Tr)&&e.lt(Tr))return br(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,p=0;return h+=(p+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,xr((h&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},Or.mul=Or.multiply,Or.divide=function(e){if(fr(e)||(e=kr(e)),e.isZero())throw Error("division by zero");var t,n,s;if(pr)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?xr((this.unsigned?pr.div_u:pr.div_s)(this.low,this.high,e.low,e.high),pr.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?$r:Cr;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return $r;if(e.gt(this.shru(1)))return Ar;s=$r}else{if(this.eq(_r))return e.eq(Er)||e.eq(Rr)?_r:e.eq(_r)?Er:(t=this.shr(1).div(e).shl(1)).eq(Cr)?e.isNegative()?Er:Rr:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(_r))return this.unsigned?$r:Cr;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=Cr}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:wr(2,r-48),i=br(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=br(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=Er),s=s.add(i),n=n.sub(o)}return s},Or.div=Or.divide,Or.modulo=function(e){return fr(e)||(e=kr(e)),pr?xr((this.unsigned?pr.rem_u:pr.rem_s)(this.low,this.high,e.low,e.high),pr.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},Or.mod=Or.modulo,Or.rem=Or.modulo,Or.not=function(){return xr(~this.low,~this.high,this.unsigned)},Or.and=function(e){return fr(e)||(e=kr(e)),xr(this.low&e.low,this.high&e.high,this.unsigned)},Or.or=function(e){return fr(e)||(e=kr(e)),xr(this.low|e.low,this.high|e.high,this.unsigned)},Or.xor=function(e){return fr(e)||(e=kr(e)),xr(this.low^e.low,this.high^e.high,this.unsigned)},Or.shiftLeft=function(e){return fr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?xr(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):xr(0,this.low<<e-32,this.unsigned)},Or.shl=Or.shiftLeft,Or.shiftRight=function(e){return fr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?xr(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):xr(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},Or.shr=Or.shiftRight,Or.shiftRightUnsigned=function(e){if(fr(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?xr(this.low>>>e|t<<32-e,t>>>e,this.unsigned):xr(32===e?t:t>>>e-32,0,this.unsigned)},Or.shru=Or.shiftRightUnsigned,Or.shr_u=Or.shiftRightUnsigned,Or.toSigned=function(){return this.unsigned?xr(this.low,this.high,!1):this},Or.toUnsigned=function(){return this.unsigned?this:xr(this.low,this.high,!0)},Or.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},Or.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},Or.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},dr.fromBytes=function(e,t,n){return n?dr.fromBytesLE(e,t):dr.fromBytesBE(e,t)},dr.fromBytesLE=function(e,t){return new dr(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},dr.fromBytesBE=function(e,t){return new dr(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const Mr=hr.default||hr;function Lr(e){return Mr.fromString(e,!0,16)}const zr=Lr("c3a5c85c97cb3127"),Pr=Lr("b492b66fbe98f273"),Br=Lr("9ae16a3b2f90404f");function Wr(e){return e.xor(e.shru(47))}function Vr(e,t,n){const s=e.slice(t,t+n);return Mr.fromBytes(Array.from(s),!0,!0)}function Ur(e,t){return Vr(e,t,8)}function Gr(e,t){return Vr(e,t,4)}function Hr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function jr(e,t,n=Lr("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function qr(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Hr(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Hr(r,44)),[r.add(s),a.add(i)]}(Ur(e,t),Ur(e,t+8),Ur(e,t+16),Ur(e,t+24),n,s)}function Kr(e,t=e.length){const n=Mr.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Br.add(2*t),s=Ur(e,0).add(Br),r=Ur(e,t-8);return jr(Hr(r,37).mul(n).add(s),Hr(s,25).add(r).mul(n),n)}if(t>=4){const n=Br.add(2*t);return jr(Gr(e,0).shl(3).add(t),Gr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return Wr(Br.mul(n).xor(zr.mul(s))).mul(Br)}return Br}(e,t):function(e,t=e.length){const n=Br.add(2*t),s=Ur(e,0).mul(Pr),r=Ur(e,8),a=Ur(e,t-8).mul(n),i=Ur(e,t-16).mul(Br);return jr(Hr(s.add(r),43).add(Hr(a,30)).add(i),s.add(Hr(r.add(Br),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Br.add(2*t),s=Ur(e,0).mul(Br),r=Ur(e,8),a=Ur(e,t-8).mul(n),i=Ur(e,t-16).mul(Br),o=Hr(s.add(r),43).add(Hr(a,30)).add(i),l=jr(o,s.add(Hr(r.add(Br),18)).add(a),n),u=Ur(e,16).mul(n),c=Ur(e,24),h=o.add(Ur(e,t-32)).mul(n),p=l.add(Ur(e,t-24)).mul(n);return jr(Hr(u.add(c),43).add(Hr(h,30)).add(p),u.add(Hr(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Pr).add(113),a=Wr(r.mul(Br).add(113)).mul(Br),i=[Mr.UZERO,Mr.UZERO],o=[Mr.UZERO,Mr.UZERO];s=s.mul(Br).add(Ur(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Hr(s.add(r).add(i[0]).add(Ur(e,l+8)),37).mul(Pr),r=Hr(r.add(i[1]).add(Ur(e,l+48)),42).mul(Pr),s=s.xor(o[1]),r=r.add(i[0]).add(Ur(e,l+40)),a=Hr(a.add(o[0]),33).mul(Pr),i=qr(e,l,i[1].mul(Pr),s.add(o[0])),o=qr(e,l+32,a.add(o[1]),r.add(Ur(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Pr.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Hr(s.add(r).add(i[0]).add(Ur(e,l+8)),37).mul(h),r=Hr(r.add(i[1]).add(Ur(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Ur(e,l+40))),a=Hr(a.add(o[0]),33).mul(h),i=qr(e,l,i[1].mul(h),s.add(o[0])),o=qr(e,l+32,a.add(o[1]),r.add(Ur(e,l+16))),[a,s]=[s,a],jr(jr(i[0],o[0],h).add(Wr(r).mul(zr)).add(a),jr(i[1],o[1],h).add(s),h)}function Xr(e,t){return"string"===t?Qr(e):Yr([e],t)}function Yr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=na(e)),le().getBool("DEBUG")&&L(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Zr(){return le().platform.now()}function Jr(e,t){return le().platform.fetch(e,t)}function Qr(e,t="utf-8"){return t=t||"utf-8",le().platform.encode(e,t)}function ea(e,t="utf-8"){return t=t||"utf-8",le().platform.decode(e,t)}function ta(e){return null!=le().platform.isTypedArray?le().platform.isTypedArray(e):ur(e)}function na(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||re(e)||null==e||ta(e)&&n)t.push(e);else if(Array.isArray(e)||ta(e))for(let s=0;s<e.length;++s)na(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)na(e[r],t,n)}return t}e(lr,c),e(lr,cr);class sa{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new aa)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=Zr();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:Zr()-i})}if(le().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{ra(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function ra(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class aa{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?A(`${s}ms`,9):s.error,o=A(e,25),l=t.rank,u=t.size,c=A(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ia(e,t,n,s){const r=K(t),a=function(e,t,n,s){const r=k(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?ca(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],oa(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=ua(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function oa(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:V(e)?`'${e}'`:"bool"===n?la(e):parseFloat(e.toFixed(7)).toString(),A(s,t)}function la(e){return 0===e?"false":"true"}function ua(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[oa(ca(e)[0],0,n)]}return"bool"===n?[la(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=ca(s),a=ca(a)),["["+s.map(((e,t)=>oa(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>oa(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?ca(e):Array.from(e)).map(((e,t)=>oa(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...ua(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...ua(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...ua(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+(o>0?p[0]+d:"");for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function ca(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class ha{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=k(e),null!=n){const e=n.length;x(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(t,this.size),this.strides=K(e)}set(e,...t){0===t.length&&(t=[0]),x(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return pa().makeTensor(this.values,this.shape,this.dtype)}}let pa=null,da=null,fa=null;class ma{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=k(e),this.strides=K(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return da.buffer(this.shape,this.dtype,e)}bufferSync(){return da.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Y(this.shape,e,"complex64"===this.dtype)}arraySync(){return Y(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=pa().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>ea(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),pa().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=pa().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>ea(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await pa().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(pa().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return da.print(this,e)}clone(){return this.throwIfDisposed(),da.clone(this)}toString(e=!1){return ia(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),da.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),pa().makeVariable(this,e,t,n)}}function ga(){return Ce("Tensor",(()=>ma))}Object.defineProperty(ma,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ga();class ya extends ma{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!N(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);pa().disposeTensor(this),this.dataId=e.dataId,pa().incRef(this,null)}dispose(){pa().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(ya,Symbol.hasInstance,{value:e=>e instanceof ma&&null!=e.assign&&e.assign instanceof Function});var ba,xa,wa,va,ka,Ia,Sa,Na,Ta,Ca={};n(Ca,"makeTypesMatch",(()=>Da)),n(Ca,"assertTypesMatch",(()=>_a)),n(Ca,"isTensorInList",(()=>Oa)),n(Ca,"getTensorsInContainer",(()=>Ma)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(ba||(ba={})),(wa=xa||(xa={})).float32="float32",wa.int32="int32",wa.bool="int32",wa.complex64="complex64",(ka=va||(va={})).float32="float32",ka.int32="int32",ka.bool="bool",ka.complex64="complex64",(Sa=Ia||(Ia={})).float32="float32",Sa.int32="float32",Sa.bool="float32",Sa.complex64="complex64",(Ta=Na||(Na={})).float32="complex64",Ta.int32="complex64",Ta.bool="complex64",Ta.complex64="complex64";const $a={float32:Ia,int32:xa,bool:va,complex64:Na};function Ea(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return $a[e][t]}function Aa(e){return Ea(e,"int32")}function Ra(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function Fa(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function Da(e,t){if(e.dtype===t.dtype)return[e,t];const n=Ea(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function _a(e,t){x(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function Oa(e,t){return t.some((t=>t.id===e.id))}function Ma(e){const t=[];return La(e,t,new Set),t}function La(e,t,n){if(null==e)return;if(e instanceof ma)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),La(s,t,n))}}function za(e){return null!=e.kernelName}class Pa{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ba{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Pa}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Xs(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new sa(this.backendInstance),!0}setupRegisteredKernels(){tr(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){tr(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof l||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Xs(`Initialization of backend ${e} failed`),Xs(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return Xs(`Initialization of backend ${e} failed`),Xs(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ba.nextTensorId++}nextVariableId(){return Ba.nextVariableId++}clone(e){const t=Va.runKernel(Gt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Va.runKernel(Qe,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Qs(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=za(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(za(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Qs(t,this.backendName);x(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=za(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=er(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(x(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&V(e[0])&&(r=e.map((e=>Qr(e))));const a=s.write(r,t,n),i=new ma(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=W(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new ma(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new ya(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*B(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ya||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*B(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=er(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=Q(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ma(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(x(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));x(r instanceof ma,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=J(k(e),"float32");return Va.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!N(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Ua);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return x(j(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;x(t.every((e=>e instanceof ma)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),x(n.value instanceof ma,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),x(j(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];x(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),x(a.every((e=>e instanceof ma)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Zr(),n=await this.backend.time(e);return n.wallMs=Zr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Pa;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Wa(){const e=Te();if(null==e._tfengine){const t=new ie(e);e._tfengine=new Ba(t)}var t;return t=e._tfengine.ENV,ue=t,pa=()=>e._tfengine,e._tfengine}Ba.nextTensorId=0,Ba.nextVariableId=0;const Va=Wa();function Ua(e,t){const n={a:e,b:t};return Va.runKernel(Fe,n)}var Ga={};let Ha;function ja(e){Ha=e}function qa(e){if(void 0!==Ha)return Ha;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ka(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n(Ga,"mockIsMobile",(()=>ja)),n(Ga,"isMobile",(()=>qa)),n(Ga,"isBrowser",(()=>Ka));const Xa=le();function Ya(e,t){let n=e;if(ta(e))return"string"===t?[]:[e.length];if(Ra(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(Fa(e))return[e.buffer.size/(null==t?4:B(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||ta(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&le().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Za(e,s,[]),s}function Za(e,t,n){if(n=n||[],!Array.isArray(e)&&!ta(e))return void x(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));x(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),x(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)Za(e[t],s,n.concat(t))}function Ja(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Qa(e,t,n,s="numeric"){if(e instanceof ma)return Ja(s,e.dtype,t,n),e;let r=H(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ja(s,r,t,n),null==e||!ta(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=Ya(e,r);ta(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Yr(e,r):na(e,[],!0);return Va.makeTensor(i,a,r)}function ei(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Qa(e,`${t}[${r}]`,n,s)))}Xa.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Xa.registerFlag("IS_BROWSER",(()=>Ka())),Xa.registerFlag("IS_NODE",(()=>void 0!==pe&&void 0!==pe.versions&&void 0!==pe.versions.node)),Xa.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Xa.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),Xa.registerFlag("PROD",(()=>!1)),Xa.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Xa.getBool("DEBUG"))),Xa.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Xa.registerFlag("IS_TEST",(()=>!1)),Xa.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>Xa.getBool("DEBUG"))),Xa.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Xa.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Xa.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const ti="__op";function ni(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=ti;const r=(...e)=>{Va.startScope(n);try{const t=s(...e);return re(t)&&console.error("Cannot return a Promise inside of tidy."),Va.endScope(t),t}catch(e){throw Va.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const si=ni({complex_:function(e,t){const n=Qa(e,"real","complex"),s=Qa(t,"imag","complex");w(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Va.runKernel(nt,r)}});function ri(e,t,n,s){if(null==s)s=H(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Fa(e)||Ra(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return Va.backend.createTensorFromGPUData(e,t||n,s)}if(!ta(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){te(t);const e=k(t),s=k(n);x(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==k(t.slice(e));x(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return ta(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Yr(e,s):na(e,[],!0),Va.makeTensor(e,t,s)}function ai(e,t,n){return ri(e,t,Ya(e,n),n)}const ii={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var oi,li,ui;li=function(e){var t,n,s=bi(e),r=s[0],a=s[1],i=new fi(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),o=0,l=a>0?r-4:r;for(n=0;n<l;n+=4)t=di[e.charCodeAt(n)]<<18|di[e.charCodeAt(n+1)]<<12|di[e.charCodeAt(n+2)]<<6|di[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;2===a&&(t=di[e.charCodeAt(n)]<<2|di[e.charCodeAt(n+1)]>>4,i[o++]=255&t);1===a&&(t=di[e.charCodeAt(n)]<<10|di[e.charCodeAt(n+1)]<<4|di[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t);return i},ui=function(e){for(var t,n=e.length,s=n%3,r=[],a=16383,i=0,o=n-s;i<o;i+=a)r.push(xi(e,i,i+a>o?o:i+a));1===s?(t=e[n-1],r.push(pi[t>>2]+pi[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],r.push(pi[t>>10]+pi[t>>4&63]+pi[t<<2&63]+"="));return r.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var ci,hi,pi=[],di=[],fi="undefined"!=typeof Uint8Array?Uint8Array:Array,mi="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",gi=0,yi=mi.length;gi<yi;++gi)pi[gi]=mi[gi],di[mi.charCodeAt(gi)]=gi;function bi(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function xi(e,t,n){for(var s,r,a=[],i=t;i<n;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(pi[(r=s)>>18&63]+pi[r>>12&63]+pi[r>>6&63]+pi[63&r]);return a.join("")}di["-".charCodeAt(0)]=62,di["_".charCodeAt(0)]=63,ci=function(e,t,n,s,r){var a,i,o=8*r-s-1,l=(1<<o)-1,u=l>>1,c=-7,h=n?r-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=s;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-u;else{if(a===l)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,s),a-=u}return(d?-1:1)*i*Math.pow(2,a-s)},hi=function(e,t,n,s,r,a){var i,o,l,u=8*a-r-1,c=(1<<u)-1,h=c>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=s?0:a-1,f=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),(t+=i+h>=1?p/l:p*Math.pow(2,1-h))*l>=2&&(i++,l/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*l-1)*Math.pow(2,r),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,r),i=0));r>=8;e[n+d]=255&o,d+=f,o/=256,r-=8);for(i=i<<r|o,u+=r;u>0;e[n+d]=255&i,d+=f,i/=256,u-=8);e[n+d-f]|=128*m};const wi="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;oi=Ii;const vi=2147483647;function ki(e){if(e>vi)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,Ii.prototype),t}function Ii(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return Ti(e)}return Si(e,t,n)}function Si(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!Ii.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|Ai(e,t);let s=ki(n);const r=s.write(e,t);r!==n&&(s=s.slice(0,r));return s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(co(e,Uint8Array)){const t=new Uint8Array(e);return $i(t.buffer,t.byteOffset,t.byteLength)}return Ci(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(co(e,ArrayBuffer)||e&&co(e.buffer,ArrayBuffer))return $i(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(co(e,SharedArrayBuffer)||e&&co(e.buffer,SharedArrayBuffer)))return $i(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return Ii.from(s,t,n);const r=function(e){if(Ii.isBuffer(e)){const t=0|Ei(e.length),n=ki(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||ho(e.length)?ki(0):Ci(e);if("Buffer"===e.type&&Array.isArray(e.data))return Ci(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return Ii.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function Ni(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function Ti(e){return Ni(e),ki(e<0?0:0|Ei(e))}function Ci(e){const t=e.length<0?0:0|Ei(e.length),n=ki(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function $i(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,Ii.prototype),s}function Ei(e){if(e>=vi)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+vi.toString(16)+" bytes");return 0|e}function Ai(e,t){if(Ii.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||co(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return oo(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return lo(e).length;default:if(r)return s?-1:oo(e).length;t=(""+t).toLowerCase(),r=!0}}function Ri(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Hi(this,t,n);case"utf8":case"utf-8":return Wi(this,t,n);case"ascii":return Ui(this,t,n);case"latin1":case"binary":return Gi(this,t,n);case"base64":return Bi(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ji(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function Fi(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function Di(e,t,n,s,r){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),ho(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=Ii.from(t,s)),Ii.isBuffer(t))return 0===t.length?-1:_i(e,t,n,s,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):_i(e,[t],n,s,r);throw new TypeError("val must be string, number or Buffer")}function _i(e,t,n,s,r){let a,i=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(r){let s=-1;for(a=n;a<o;a++)if(u(e,a)===u(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===l)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(n+l>o&&(n=o-l),a=n;a>=0;a--){let n=!0;for(let s=0;s<l;s++)if(u(e,a+s)!==u(t,s)){n=!1;break}if(n)return a}return-1}function Oi(e,t,n,s){n=Number(n)||0;const r=e.length-n;s?(s=Number(s))>r&&(s=r):s=r;const a=t.length;let i;for(s>a/2&&(s=a/2),i=0;i<s;++i){const s=parseInt(t.substr(2*i,2),16);if(ho(s))return i;e[n+i]=s}return i}function Mi(e,t,n,s){return uo(oo(t,e.length-n),e,n,s)}function Li(e,t,n,s){return uo(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function zi(e,t,n,s){return uo(lo(t),e,n,s)}function Pi(e,t,n,s){return uo(function(e,t){let n,s,r;const a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),s=n>>8,r=n%256,a.push(r),a.push(s);return a}(t,e.length-n),e,n,s)}function Bi(e,t,n){return 0===t&&n===e.length?ui(e):ui(e.slice(t,n))}function Wi(e,t,n){n=Math.min(e.length,n);const s=[];let r=t;for(;r<n;){const t=e[r];let a=null,i=t>239?4:t>223?3:t>191?2:1;if(r+i<=n){let n,s,o,l;switch(i){case 1:t<128&&(a=t);break;case 2:n=e[r+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[r+1],s=e[r+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[r+1],s=e[r+2],o=e[r+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,i=1):a>65535&&(a-=65536,s.push(a>>>10&1023|55296),a=56320|1023&a),s.push(a),r+=i}return function(e){const t=e.length;if(t<=Vi)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=Vi));return n}(s)}Ii.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),Ii.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(Ii.prototype,"parent",{enumerable:!0,get:function(){if(Ii.isBuffer(this))return this.buffer}}),Object.defineProperty(Ii.prototype,"offset",{enumerable:!0,get:function(){if(Ii.isBuffer(this))return this.byteOffset}}),Ii.poolSize=8192,Ii.from=function(e,t,n){return Si(e,t,n)},Object.setPrototypeOf(Ii.prototype,Uint8Array.prototype),Object.setPrototypeOf(Ii,Uint8Array),Ii.alloc=function(e,t,n){return function(e,t,n){return Ni(e),e<=0?ki(e):void 0!==t?"string"==typeof n?ki(e).fill(t,n):ki(e).fill(t):ki(e)}(e,t,n)},Ii.allocUnsafe=function(e){return Ti(e)},Ii.allocUnsafeSlow=function(e){return Ti(e)},Ii.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==Ii.prototype},Ii.compare=function(e,t){if(co(e,Uint8Array)&&(e=Ii.from(e,e.offset,e.byteLength)),co(t,Uint8Array)&&(t=Ii.from(t,t.offset,t.byteLength)),!Ii.isBuffer(e)||!Ii.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let r=0,a=Math.min(n,s);r<a;++r)if(e[r]!==t[r]){n=e[r],s=t[r];break}return n<s?-1:s<n?1:0},Ii.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Ii.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Ii.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=Ii.allocUnsafe(t);let r=0;for(n=0;n<e.length;++n){let t=e[n];if(co(t,Uint8Array))r+t.length>s.length?(Ii.isBuffer(t)||(t=Ii.from(t)),t.copy(s,r)):Uint8Array.prototype.set.call(s,t,r);else{if(!Ii.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,r)}r+=t.length}return s},Ii.byteLength=Ai,Ii.prototype._isBuffer=!0,Ii.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)Fi(this,t,t+1);return this},Ii.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)Fi(this,t,t+3),Fi(this,t+1,t+2);return this},Ii.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)Fi(this,t,t+7),Fi(this,t+1,t+6),Fi(this,t+2,t+5),Fi(this,t+3,t+4);return this},Ii.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?Wi(this,0,e):Ri.apply(this,arguments)},Ii.prototype.toLocaleString=Ii.prototype.toString,Ii.prototype.equals=function(e){if(!Ii.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Ii.compare(this,e)},Ii.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},wi&&(Ii.prototype[wi]=Ii.prototype.inspect),Ii.prototype.compare=function(e,t,n,s,r){if(co(e,Uint8Array)&&(e=Ii.from(e,e.offset,e.byteLength)),!Ii.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===r&&(r=this.length),t<0||n>e.length||s<0||r>this.length)throw new RangeError("out of range index");if(s>=r&&t>=n)return 0;if(s>=r)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(r>>>=0)-(s>>>=0),i=(n>>>=0)-(t>>>=0);const o=Math.min(a,i),l=this.slice(s,r),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){a=l[e],i=u[e];break}return a<i?-1:i<a?1:0},Ii.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},Ii.prototype.indexOf=function(e,t,n){return Di(this,e,t,n,!0)},Ii.prototype.lastIndexOf=function(e,t,n){return Di(this,e,t,n,!1)},Ii.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let a=!1;for(;;)switch(s){case"hex":return Oi(this,e,t,n);case"utf8":case"utf-8":return Mi(this,e,t,n);case"ascii":case"latin1":case"binary":return Li(this,e,t,n);case"base64":return zi(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Pi(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),a=!0}},Ii.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const Vi=4096;function Ui(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(127&e[r]);return s}function Gi(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(e[r]);return s}function Hi(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let r="";for(let s=t;s<n;++s)r+=po[e[s]];return r}function ji(e,t,n){const s=e.slice(t,n);let r="";for(let e=0;e<s.length-1;e+=2)r+=String.fromCharCode(s[e]+256*s[e+1]);return r}function qi(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function Ki(e,t,n,s,r,a){if(!Ii.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<a)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function Xi(e,t,n,s,r){so(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function Yi(e,t,n,s,r){so(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function Zi(e,t,n,s,r,a){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Ji(e,t,n,s,r){return t=+t,n>>>=0,r||Zi(e,0,n,4),hi(e,t,n,s,23,4),n+4}function Qi(e,t,n,s,r){return t=+t,n>>>=0,r||Zi(e,0,n,8),hi(e,t,n,s,52,8),n+8}Ii.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,Ii.prototype),s},Ii.prototype.readUintLE=Ii.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||qi(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return s},Ii.prototype.readUintBE=Ii.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||qi(e,t,this.length);let s=this[e+--t],r=1;for(;t>0&&(r*=256);)s+=this[e+--t]*r;return s},Ii.prototype.readUint8=Ii.prototype.readUInt8=function(e,t){return e>>>=0,t||qi(e,1,this.length),this[e]},Ii.prototype.readUint16LE=Ii.prototype.readUInt16LE=function(e,t){return e>>>=0,t||qi(e,2,this.length),this[e]|this[e+1]<<8},Ii.prototype.readUint16BE=Ii.prototype.readUInt16BE=function(e,t){return e>>>=0,t||qi(e,2,this.length),this[e]<<8|this[e+1]},Ii.prototype.readUint32LE=Ii.prototype.readUInt32LE=function(e,t){return e>>>=0,t||qi(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Ii.prototype.readUint32BE=Ii.prototype.readUInt32BE=function(e,t){return e>>>=0,t||qi(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Ii.prototype.readBigUInt64LE=fo((function(e){ro(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ao(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(r)<<BigInt(32))})),Ii.prototype.readBigUInt64BE=fo((function(e){ro(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ao(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(r)})),Ii.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||qi(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},Ii.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||qi(e,t,this.length);let s=t,r=1,a=this[e+--s];for(;s>0&&(r*=256);)a+=this[e+--s]*r;return r*=128,a>=r&&(a-=Math.pow(2,8*t)),a},Ii.prototype.readInt8=function(e,t){return e>>>=0,t||qi(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Ii.prototype.readInt16LE=function(e,t){e>>>=0,t||qi(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Ii.prototype.readInt16BE=function(e,t){e>>>=0,t||qi(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Ii.prototype.readInt32LE=function(e,t){return e>>>=0,t||qi(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Ii.prototype.readInt32BE=function(e,t){return e>>>=0,t||qi(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Ii.prototype.readBigInt64LE=fo((function(e){ro(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ao(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),Ii.prototype.readBigInt64BE=fo((function(e){ro(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ao(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),Ii.prototype.readFloatLE=function(e,t){return e>>>=0,t||qi(e,4,this.length),ci(this,e,!0,23,4)},Ii.prototype.readFloatBE=function(e,t){return e>>>=0,t||qi(e,4,this.length),ci(this,e,!1,23,4)},Ii.prototype.readDoubleLE=function(e,t){return e>>>=0,t||qi(e,8,this.length),ci(this,e,!0,52,8)},Ii.prototype.readDoubleBE=function(e,t){return e>>>=0,t||qi(e,8,this.length),ci(this,e,!1,52,8)},Ii.prototype.writeUintLE=Ii.prototype.writeUIntLE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Ki(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=1,a=0;for(this[t]=255&e;++a<n&&(r*=256);)this[t+a]=e/r&255;return t+n},Ii.prototype.writeUintBE=Ii.prototype.writeUIntBE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Ki(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=n-1,a=1;for(this[t+r]=255&e;--r>=0&&(a*=256);)this[t+r]=e/a&255;return t+n},Ii.prototype.writeUint8=Ii.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,1,255,0),this[t]=255&e,t+1},Ii.prototype.writeUint16LE=Ii.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},Ii.prototype.writeUint16BE=Ii.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},Ii.prototype.writeUint32LE=Ii.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},Ii.prototype.writeUint32BE=Ii.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Ii.prototype.writeBigUInt64LE=fo((function(e,t=0){return Xi(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Ii.prototype.writeBigUInt64BE=fo((function(e,t=0){return Yi(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),Ii.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Ki(this,e,t,n,s-1,-s)}let r=0,a=1,i=0;for(this[t]=255&e;++r<n&&(a*=256);)e<0&&0===i&&0!==this[t+r-1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},Ii.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Ki(this,e,t,n,s-1,-s)}let r=n-1,a=1,i=0;for(this[t+r]=255&e;--r>=0&&(a*=256);)e<0&&0===i&&0!==this[t+r+1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},Ii.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},Ii.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},Ii.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},Ii.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},Ii.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Ki(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},Ii.prototype.writeBigInt64LE=fo((function(e,t=0){return Xi(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Ii.prototype.writeBigInt64BE=fo((function(e,t=0){return Yi(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),Ii.prototype.writeFloatLE=function(e,t,n){return Ji(this,e,t,!0,n)},Ii.prototype.writeFloatBE=function(e,t,n){return Ji(this,e,t,!1,n)},Ii.prototype.writeDoubleLE=function(e,t,n){return Qi(this,e,t,!0,n)},Ii.prototype.writeDoubleBE=function(e,t,n){return Qi(this,e,t,!1,n)},Ii.prototype.copy=function(e,t,n,s){if(!Ii.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const r=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),r},Ii.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!Ii.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(r=t;r<n;++r)this[r]=e;else{const a=Ii.isBuffer(e)?e:Ii.from(e,s),i=a.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<n-t;++r)this[r+t]=a[r%i]}return this};const eo={};function to(e,t,n){eo[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function no(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function so(e,t,n,s,r,a){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let r;throw r=a>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(a+1)}${s}`:`>= -(2${s} ** ${8*(a+1)-1}${s}) and < 2 ** ${8*(a+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new eo.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,n){ro(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||ao(t,e.length-(n+1))}(s,r,a)}function ro(e,t){if("number"!=typeof e)throw new eo.ERR_INVALID_ARG_TYPE(t,"number",e)}function ao(e,t,n){if(Math.floor(e)!==e)throw ro(e,n),new eo.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new eo.ERR_BUFFER_OUT_OF_BOUNDS;throw new eo.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}to("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),to("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),to("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,r=n;return Number.isInteger(n)&&Math.abs(n)>2**32?r=no(String(n)):"bigint"==typeof n&&(r=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(r=no(r)),r+="n"),s+=` It must be ${t}. Received ${r}`,s}),RangeError);const io=/[^+/0-9A-Za-z-_]/g;function oo(e,t){let n;t=t||1/0;const s=e.length;let r=null;const a=[];for(let i=0;i<s;++i){if(n=e.charCodeAt(i),n>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===s){(t-=3)>-1&&a.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&a.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function lo(e){return li(function(e){if((e=(e=e.split("=")[0]).trim().replace(io,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function uo(e,t,n,s){let r;for(r=0;r<s&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function co(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function ho(e){return e!=e}const po=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let r=0;r<16;++r)t[s+r]=e[n]+e[r]}return t}();function fo(e){return"undefined"==typeof BigInt?mo:e}function mo(){throw new Error("BigInt not supported")}var go=oi;async function yo(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:xo(await Promise.all(s)),specs:n}}function bo(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=k(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=ii[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=Eo()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=k(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=ii[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=ai(e,o,"float32"),i=ai(s,o,"float32");n[t]=si(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=ai(u,o,i))}return n}function xo(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const wo=void 0!==go&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function vo(e){return wo?go.byteLength(e):new Blob([e]).size}function ko(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function Io(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function So(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function No(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function To(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),No(e,n,s)}function Co(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:vo(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:vo(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function $o(e){const t=[];for(const n of e)t.push(...n.weights);return t}function Eo(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class Ao{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ao.instance&&(Ao.instance=new Ao),Ao.instance}static registerSaveRouter(e){Ao.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Ao.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Ao.getHandlers(e,"save")}static getLoadHandlers(e,t){return Ao.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Ao.getInstance().loadRouters:Ao.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const Ro=e=>Ao.registerSaveRouter(e),Fo=e=>Ao.registerLoadRouter(e),Do=e=>Ao.getSaveHandlers(e),_o=(e,t)=>Ao.getLoadHandlers(e,t),Oo="tensorflowjs",Mo="models_store",Lo="model_info_store";function zo(){if(!le().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Po(e){const t=e.result;t.createObjectStore(Mo,{keyPath:"modelPath"}),t.createObjectStore(Lo,{keyPath:"modelPath"})}class Bo{constructor(e){if(this.indexedDB=zo(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(Oo,1);s.onupgradeneeded=()=>Po(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(Mo,"readonly"),s=t.objectStore(Mo).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=Co(t),a=r.transaction(Lo,"readwrite");let i,o,l=a.objectStore(Lo);try{i=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}i.onsuccess=()=>{o=r.transaction(Mo,"readwrite");const i=o.objectStore(Mo);let u;try{u=i.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{l=a.objectStore(Lo);const t=l.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(u.error)),t.onerror=e=>(r.close(),n(u.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==o?r.close():o.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}Bo.URL_SCHEME="indexeddb://";const Wo=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Bo.URL_SCHEME)?(t=e.slice(Bo.URL_SCHEME.length),new Bo(t)):null;var t};Ao.registerSaveRouter(Wo),Ao.registerLoadRouter(Wo);class Vo{constructor(){this.indexedDB=zo()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Oo,1);n.onupgradeneeded=()=>Po(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(Lo,"readonly"),a=r.objectStore(Lo).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Bo.URL_SCHEME)?t.slice(Bo.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(Oo,1);s.onupgradeneeded=()=>Po(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(Lo,"readwrite"),i=a.objectStore(Lo),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(Mo,"readwrite");const s=l.objectStore(Mo).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const Uo="/",Go="tensorflowjs_models",Ho="info",jo="model_topology",qo="weight_specs",Ko="weight_data",Xo="model_metadata";function Yo(e){return{info:[Go,e,Ho].join(Uo),topology:[Go,e,jo].join(Uo),weightSpecs:[Go,e,qo].join(Uo),weightData:[Go,e,Ko].join(Uo),modelMetadata:[Go,e,Xo].join(Uo)}}function Zo(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Jo(e){const t=e.split(Uo);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Uo)}class Qo{constructor(e){if(!le().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Yo(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=Co(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(wo)return go.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw Zo(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(wo){const t=go.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Qo.URL_SCHEME="localstorage://";const el=e=>{return le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Qo.URL_SCHEME)?(t=e.slice(Qo.URL_SCHEME.length),new Qo(t)):null;var t};Ao.registerSaveRouter(el),Ao.registerLoadRouter(el);class tl{constructor(){x(le().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),x("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Go+Uo,n=Uo+Ho;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[Jo(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=Yo(e=(t=e).startsWith(Qo.URL_SCHEME)?t.slice(Qo.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return Zo(n),s}}const nl="://";class sl{constructor(){this.managers={}}static getInstance(){return null==sl.instance&&(sl.instance=new sl),sl.instance}static registerManager(e,t){x(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(nl)&&(e=e.slice(0,e.indexOf(nl))),x(e.length>0,(()=>"scheme must not be an empty string."));const n=sl.getInstance();x(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=sl.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(sl.getInstance().managers)}}function rl(e){if(-1===e.indexOf(nl))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${sl.getSchemes().join(",")}`);return{scheme:e.split(nl)[0],path:e.split(nl)[1]}}async function al(e,t,n=!1){x(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=Ao.getLoadHandlers(e);x(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),x(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=Ao.getSaveHandlers(t);x(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),x(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=rl(e).scheme,l=rl(e).path,u=o===rl(e).scheme,c=await r.load();n&&u&&await sl.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await sl.getManager(o).removeModel(l),h.modelArtifactsInfo}async function il(){const e=sl.getSchemes(),t={};for(const n of e){const e=await sl.getManager(n).listModels();for(const s in e){t[n+nl+s]=e[s]}}return t}async function ol(e){const t=rl(e);return sl.getManager(t.scheme).removeModel(t.path)}async function ll(e,t){return al(e,t,!1)}async function ul(e,t){return al(e,t,!0)}class cl{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&le().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}isTypedArray(e){return ur(e)}}if(le().get("IS_BROWSER")){le().setPlatform("browser",new cl);try{sl.registerManager(Qo.URL_SCHEME,new tl)}catch(e){}try{sl.registerManager(Bo.URL_SCHEME,new Vo)}catch(e){}}const hl=()=>a("foUwZ");let pl;function dl(e,t="float32",n){return t=t||"float32",te(e),new ha(e,t,n)}le().get("IS_NODE")&&!le().get("IS_BROWSER")&&le().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=le().global.fetch?le().global.fetch(e,t):(null==pl&&(pl=hl()),pl(e,t))}now(){const e=pe.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const fl=ni({cast_:function(e,t){const n=Qa(e,"x","cast");if(!z(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Va.runKernel(Qe,s,r)}});const ml=ni({clone_:function(e){const t={x:Qa(e,"x","clone","string_or_numeric")};return Va.runKernel(Gt,t)}});function gl(e,t=!1){console.log(e.toString(t))}Wa();da={buffer:dl,cast:fl,clone:ml,print:gl};var yl={};function bl(){le().set("PROD",!0)}function xl(){le().set("DEBUG",!0)}function wl(){le().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function vl(e){le().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function kl(){Va.disposeVariables()}function Il(){return Va}function Sl(){return Va.memory()}function Nl(e){return Va.profile(e)}function Tl(e,t){return Va.tidy(e,t)}function Cl(e){Ma(e).forEach((e=>e.dispose()))}function $l(e){return Va.keep(e)}function El(e){return Va.time(e)}function Al(e){return Va.setBackend(e)}function Rl(){return Va.ready()}function Fl(){return Va.backendName}function Dl(e){Va.removeBackend(e)}function _l(e){return Va.findBackend(e)}function Ol(e){return Va.findBackendFactory(e)}function Ml(e,t,n=1){return Va.registerBackend(e,t,n)}function Ll(){return Va.backend}function zl(e,t){le().setPlatform(e,t)}n(yl,"enableProdMode",(()=>bl)),n(yl,"enableDebugMode",(()=>xl)),n(yl,"disableDeprecationWarnings",(()=>wl)),n(yl,"deprecationWarn",(()=>vl)),n(yl,"disposeVariables",(()=>kl)),n(yl,"engine",(()=>Il)),n(yl,"memory",(()=>Sl)),n(yl,"profile",(()=>Nl)),n(yl,"tidy",(()=>Tl)),n(yl,"dispose",(()=>Cl)),n(yl,"keep",(()=>$l)),n(yl,"time",(()=>El)),n(yl,"setBackend",(()=>Al)),n(yl,"ready",(()=>Rl)),n(yl,"getBackend",(()=>Fl)),n(yl,"removeBackend",(()=>Dl)),n(yl,"findBackend",(()=>_l)),n(yl,"findBackendFactory",(()=>Ol)),n(yl,"registerBackend",(()=>Ml)),n(yl,"backend",(()=>Ll)),n(yl,"setPlatform",(()=>zl)),fa=vl;const Pl=ni({add_:function(e,t){let n=Qa(e,"a","add"),s=Qa(t,"b","add");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Fe,r)}});const Bl=ni({floorDiv_:function(e,t){let n=Qa(e,"a","floorDiv"),s=Qa(t,"b","floorDiv");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(zt,r)}});const Wl=ni({div_:function(e,t){let n=Qa(e,"a","div"),s=Qa(t,"b","div");if([n,s]=Da(n,s),"int32"===n.dtype&&"int32"===s.dtype)return Bl(n,s);const r={a:n,b:s};return Va.runKernel(Nt,r,{})}});const Vl=ni({mul_:function(e,t){let n=Qa(e,"a","mul"),s=Qa(t,"b","mul");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Nn,r)}});var Ul={};n(Ul,"spectral",(()=>om)),n(Ul,"signal",(()=>lm)),n(Ul,"image",(()=>um)),n(Ul,"linalg",(()=>cm)),n(Ul,"losses",(()=>hm)),n(Ul,"sparse",(()=>pm)),n(Ul,"string",(()=>dm)),n(Ul,"abs",(()=>Qc)),n(Ul,"acos",(()=>Yh)),n(Ul,"acosh",(()=>Zh)),n(Ul,"add",(()=>Pl)),n(Ul,"addN",(()=>Jh)),n(Ul,"all",(()=>Qh)),n(Ul,"any",(()=>ep)),n(Ul,"argMax",(()=>tp)),n(Ul,"argMin",(()=>np)),n(Ul,"asin",(()=>sp)),n(Ul,"asinh",(()=>rp)),n(Ul,"atan",(()=>ap)),n(Ul,"atan2",(()=>ip)),n(Ul,"atanh",(()=>op)),n(Ul,"avgPool",(()=>lp)),n(Ul,"avgPool3d",(()=>up)),n(Ul,"basicLSTMCell",(()=>hp)),n(Ul,"batchToSpaceND",(()=>pp)),n(Ul,"batchNorm",(()=>dp)),n(Ul,"batchNorm2d",(()=>fp)),n(Ul,"batchNorm3d",(()=>mp)),n(Ul,"batchNorm4d",(()=>gp)),n(Ul,"bincount",(()=>_c)),n(Ul,"bitwiseAnd",(()=>yp)),n(Ul,"broadcastArgs",(()=>bp)),n(Ul,"broadcastTo",(()=>Pc)),n(Ul,"buffer",(()=>dl)),n(Ul,"cast",(()=>fl)),n(Ul,"ceil",(()=>xp)),n(Ul,"clipByValue",(()=>wp)),n(Ul,"clone",(()=>ml)),n(Ul,"complex",(()=>si)),n(Ul,"concat",(()=>Gl)),n(Ul,"concat1d",(()=>vp)),n(Ul,"concat2d",(()=>kp)),n(Ul,"concat3d",(()=>Ip)),n(Ul,"concat4d",(()=>Sp)),n(Ul,"conv1d",(()=>Np)),n(Ul,"conv2d",(()=>Fu)),n(Ul,"conv2dTranspose",(()=>Tp)),n(Ul,"conv3d",(()=>Cp)),n(Ul,"conv3dTranspose",(()=>Ep)),n(Ul,"cos",(()=>Ap)),n(Ul,"cosh",(()=>Rp)),n(Ul,"cumprod",(()=>Fp)),n(Ul,"cumsum",(()=>Dp)),n(Ul,"denseBincount",(()=>_p)),n(Ul,"depthToSpace",(()=>Op)),n(Ul,"depthwiseConv2d",(()=>Xu)),n(Ul,"diag",(()=>Mp)),n(Ul,"dilation2d",(()=>Lp)),n(Ul,"div",(()=>Wl)),n(Ul,"divNoNan",(()=>Pp)),n(Ul,"dot",(()=>Bp)),n(Ul,"einsum",(()=>Wp)),n(Ul,"elu",(()=>Mu)),n(Ul,"ensureShape",(()=>Vp)),n(Ul,"equal",(()=>zp)),n(Ul,"erf",(()=>Up)),n(Ul,"euclideanNorm",(()=>Gp)),n(Ul,"exp",(()=>Lh)),n(Ul,"expandDims",(()=>bh)),n(Ul,"expm1",(()=>Hp)),n(Ul,"eye",(()=>xh)),n(Ul,"fill",(()=>oc)),n(Ul,"floor",(()=>jp)),n(Ul,"floorDiv",(()=>Bl)),n(Ul,"gather",(()=>qp)),n(Ul,"greater",(()=>Mc)),n(Ul,"greaterEqual",(()=>Gc)),n(Ul,"imag",(()=>Hl)),n(Ul,"isFinite",(()=>Kp)),n(Ul,"isInf",(()=>Xp)),n(Ul,"isNaN",(()=>Yp)),n(Ul,"leakyRelu",(()=>Lu)),n(Ul,"less",(()=>Hc)),n(Ul,"lessEqual",(()=>Oc)),n(Ul,"linspace",(()=>Zp)),n(Ul,"localResponseNormalization",(()=>Jp)),n(Ul,"log",(()=>Dh)),n(Ul,"log1p",(()=>zh)),n(Ul,"logSigmoid",(()=>ed)),n(Ul,"logSoftmax",(()=>td)),n(Ul,"logSumExp",(()=>Bh)),n(Ul,"logicalAnd",(()=>jc)),n(Ul,"logicalNot",(()=>nd)),n(Ul,"logicalOr",(()=>sd)),n(Ul,"logicalXor",(()=>rd)),n(Ul,"lowerBound",(()=>ld)),n(Ul,"matMul",(()=>Qu)),n(Ul,"max",(()=>uh)),n(Ul,"maxPool",(()=>ud)),n(Ul,"maxPool3d",(()=>cd)),n(Ul,"maxPoolWithArgmax",(()=>hd)),n(Ul,"maximum",(()=>pd)),n(Ul,"mean",(()=>Nh)),n(Ul,"meshgrid",(()=>dd)),n(Ul,"min",(()=>ch)),n(Ul,"minimum",(()=>qc)),n(Ul,"mirrorPad",(()=>fd)),n(Ul,"mod",(()=>md)),n(Ul,"moments",(()=>gd)),n(Ul,"mul",(()=>Vl)),n(Ul,"multiRNNCell",(()=>yd)),n(Ul,"multinomial",(()=>bd)),n(Ul,"neg",(()=>Kc)),n(Ul,"notEqual",(()=>Th)),n(Ul,"oneHot",(()=>xd)),n(Ul,"ones",(()=>Ch)),n(Ul,"onesLike",(()=>wd)),n(Ul,"outerProduct",(()=>vd)),n(Ul,"pad",(()=>kd)),n(Ul,"pad1d",(()=>Id)),n(Ul,"pad2d",(()=>Sd)),n(Ul,"pad3d",(()=>Nd)),n(Ul,"pad4d",(()=>Td)),n(Ul,"pool",(()=>$d)),n(Ul,"pow",(()=>hh)),n(Ul,"prelu",(()=>zu)),n(Ul,"print",(()=>gl)),n(Ul,"prod",(()=>Ed)),n(Ul,"raggedGather",(()=>Ad)),n(Ul,"raggedRange",(()=>Rd)),n(Ul,"raggedTensorToTensor",(()=>Fd)),n(Ul,"rand",(()=>Dd)),n(Ul,"randomGamma",(()=>af)),n(Ul,"randomNormal",(()=>of)),n(Ul,"randomStandardNormal",(()=>lf)),n(Ul,"randomUniform",(()=>uf)),n(Ul,"randomUniformInt",(()=>cf)),n(Ul,"range",(()=>Wc)),n(Ul,"real",(()=>jl)),n(Ul,"reciprocal",(()=>hf)),n(Ul,"relu",(()=>Pu)),n(Ul,"relu6",(()=>Bu)),n(Ul,"reshape",(()=>ql)),n(Ul,"reverse",(()=>tu)),n(Ul,"reverse1d",(()=>pf)),n(Ul,"reverse2d",(()=>df)),n(Ul,"reverse3d",(()=>ff)),n(Ul,"reverse4d",(()=>mf)),n(Ul,"round",(()=>zc)),n(Ul,"rsqrt",(()=>gf)),n(Ul,"scalar",(()=>nu)),n(Ul,"selu",(()=>yf)),n(Ul,"separableConv2d",(()=>bf)),n(Ul,"setdiff1dAsync",(()=>xf)),n(Ul,"sigmoid",(()=>Wu)),n(Ul,"sign",(()=>wf)),n(Ul,"sin",(()=>vf)),n(Ul,"sinh",(()=>kf)),n(Ul,"slice",(()=>Kl)),n(Ul,"slice1d",(()=>If)),n(Ul,"slice2d",(()=>Sf)),n(Ul,"slice3d",(()=>Nf)),n(Ul,"slice4d",(()=>Tf)),n(Ul,"softmax",(()=>Cf)),n(Ul,"softplus",(()=>Qp)),n(Ul,"spaceToBatchND",(()=>Cd)),n(Ul,"fft",(()=>Jl)),n(Ul,"ifft",(()=>eu)),n(Ul,"irfft",(()=>su)),n(Ul,"rfft",(()=>Ql)),n(Ul,"split",(()=>Xl)),n(Ul,"sqrt",(()=>ph)),n(Ul,"square",(()=>dh)),n(Ul,"squaredDifference",(()=>Oh)),n(Ul,"squeeze",(()=>gh)),n(Ul,"stack",(()=>Xc)),n(Ul,"step",(()=>Vu)),n(Ul,"stridedSlice",(()=>$f)),n(Ul,"sub",(()=>Lc)),n(Ul,"sum",(()=>Uu)),n(Ul,"tan",(()=>Ef)),n(Ul,"tanh",(()=>cp)),n(Ul,"tensor",(()=>ai)),n(Ul,"tensor1d",(()=>nc)),n(Ul,"tensor2d",(()=>lc)),n(Ul,"tensor3d",(()=>Af)),n(Ul,"tensor4d",(()=>Rf)),n(Ul,"tensor5d",(()=>Ff)),n(Ul,"tensor6d",(()=>Df)),n(Ul,"tensorScatterUpdate",(()=>zf)),n(Ul,"tile",(()=>dc)),n(Ul,"topk",(()=>Pf)),n(Ul,"truncatedNormal",(()=>Bf)),n(Ul,"unique",(()=>Wf)),n(Ul,"unsortedSegmentSum",(()=>Vf)),n(Ul,"unstack",(()=>Yc)),n(Ul,"upperBound",(()=>Uf)),n(Ul,"variable",(()=>Gf)),n(Ul,"where",(()=>Bc)),n(Ul,"whereAsync",(()=>jf)),n(Ul,"zeros",(()=>Yl)),n(Ul,"zerosLike",(()=>Zl)),n(Ul,"op",(()=>ni)),n(Ul,"OP_SCOPE_SUFFIX",(()=>ti)),n(Ul,"fused",(()=>ru));const Gl=ni({concat_:function(e,t=0){x(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=ei(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return ml(n[0]);const s=n,r={axis:t};return Va.runKernel(rt,s,r)}});const Hl=ni({imag_:function(e){const t={input:Qa(e,"input","imag")};return Va.runKernel(jt,t)}});const jl=ni({real_:function(e){const t={input:Qa(e,"input","real")};return Va.runKernel(Un,t)}});const ql=ni({reshape_:function(e,t){const n={x:Qa(e,"x","reshape","string_or_numeric")},s={shape:t};return Va.runKernel(jn,n,s)}});const Kl=ni({slice_:function(e,t,n){const s=Qa(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Va.runKernel(is,r,a)}});const Xl=ni({split_:function(e,t,n=0){const s={x:Qa(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Va.runKernel(ms,s,r)}});function Yl(e,t="float32"){if(te(e),"complex64"===t){const t=Yl(e,"float32"),n=Yl(e,"float32");return si(t,n)}const n=Q(k(e),t);return Va.makeTensor(n,e,t)}const Zl=ni({zerosLike_:function(e){const t={x:Qa(e,"x","zerosLike")};return Va.runKernel(Bs,t)}});const Jl=ni({fft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Va.runKernel(_t,t)}});const Ql=ni({rfft_:function(e,t){x("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=Kl(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=Gl([e,Yl(s)],e.shape.length-1),n=t}else r=e;const a=Zl(r),i=ql(si(r,a),[s,n]),o=Jl(i),l=Math.floor(n/2)+1,u=jl(o),c=Hl(o),h=Xl(u,[l,n-l],u.shape.length-1),p=Xl(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,ql(si(h[0],p[0]),d)}});const eu=ni({ifft_:function(e){x("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Va.runKernel(Ht,t)}});const tu=ni({reverse_:function(e,t){const n={x:Qa(e,"x","reverse")},s={dims:t};return Va.runKernel(Jn,n,s)}});function nu(e,t){if((ta(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ta(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ri(e,[],[],t)}const su=ni({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=ql(e,[n,t]);s=eu(r)}else{const r=[n,2*(t-1)],a=ql(jl(e),[n,t]),i=ql(Hl(e),[n,t]),o=tu(Kl(a,[0,1],[n,t-2]),1),l=Vl(tu(Kl(i,[0,1],[n,t-2]),1),nu(-1)),u=Gl([a,o],1),c=Gl([i,l],1),h=ql(si(u,c),[r[0],r[1]]);s=eu(h)}if(s=jl(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=ql(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});var ru={};function au(e){return x(j(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const s=Qa(t,"x","tf.grad","string_or_numeric"),r=null!=n?Qa(n,"dy","tf.grad"):null;return Va.tidy((()=>{const{value:t,grads:n}=Va.gradients((()=>e(s)),[s],r);return null!=r&&w(t.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),hu(n),n[0]}))}}function iu(e){return x(j(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{x(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const s=ei(t,"args","tf.grads","string_or_numeric"),r=null!=n?Qa(n,"dy","tf.grads"):null;return Va.tidy((()=>{const{value:t,grads:n}=Va.gradients((()=>e(...s)),s,r);return null!=r&&w(t.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),hu(n),n}))}}function ou(e){return x(j(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{x(t instanceof ma,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),x(null==n||n instanceof ma,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:r}=Va.gradients((()=>e(t)),[t],n);return hu(s),{grad:s[0],value:r}}}function lu(e){return x(j(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{x(Array.isArray(t)&&t.every((e=>e instanceof ma)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),x(null==n||n instanceof ma,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=Va.gradients((()=>e(...t)),t,n);return null!=n&&w(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),hu(s.grads),s}}function uu(e,t){x(j(e),(()=>"The f passed in variableGrads(f) must be a function")),x(null==t||Array.isArray(t)&&t.every((e=>e instanceof ya)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Va.registeredVariables)t.push(Va.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;x((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Va.gradients(e,t,null,!0);x(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),x(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function cu(e){return Va.customGrad(e)}function hu(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}n(ru,"conv2d",(()=>Ku)),n(ru,"depthwiseConv2d",(()=>Ju)),n(ru,"matMul",(()=>ec));var pu={};function du(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function fu(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function mu(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===a)s[n-r-1]=i;else if(1===i)s[n-r-1]=a;else{if(a!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}s[n-r-1]=a}}return s}n(pu,"getBroadcastDims",(()=>du)),n(pu,"getReductionAxes",(()=>fu)),n(pu,"assertAndGetBroadcastShape",(()=>mu));var gu={};function yu(e,t,n,s,r="NHWC",a){return wu(e,[...t,e[3]],n,a,s,null,null,Au(r))}function bu(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Iu(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return wu(e,u,n,s,r,a,!1,i)}function xu(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Su(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return vu(e,c,n,s,r,!1,h,a)}function wu(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Iu(n),[y,b]=Iu(s),x=Nu(p,y),w=Nu(d,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=ku(e,t,n));const a=e[0],i=e[1],o=Tu((a-t+2*s)/n+1,r),l=Tu((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Tu((t-a+p+d)/s+1,o),h=Tu((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),S=i?f*h:f;let N;return"channelsFirst"===o?N=[l,S,k,I]:"channelsLast"===o&&(N=[l,k,I,S]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:S,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function vu(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Su(n),[w,v,k]=Su(s),I=Nu(d,w),S=Nu(f,v),N=Nu(m,k),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;"valid"===e&&(e=0);if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,s,r,a){null==r&&(r=ku(e,t[0],s[0]));const i=[0,0,0,n];for(let n=0;n<3;n++)e[n]+2*r>=t[n]&&(i[n]=Tu((e[n]-t[n]+2*r)/s[n]+1,a));return i}([t,n,s,1],[o,l,u],1,[r,a,i],e,c);p=m[0],d=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,S,N,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,C,$,E]:"channelsLast"===i&&(R=[l,C,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:$,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function ku(e,t,n,s=1){const r=Nu(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Iu(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Su(e){return"number"==typeof e?[e,e,e]:e}function Nu(e,t){return t<=1?e:e+(e-1)*(t-1)}function Tu(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Cu(e){const[t,n,s]=Iu(e);return 1===t&&1===n&&1===s}function $u(e,t){return Cu(e)||Cu(t)}function Eu(e){return Iu(e).every((e=>e>0))}function Au(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Ru(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{x(T(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}n(gu,"computeDilation2DInfo",(()=>yu)),n(gu,"convertConv2DDataFormat",(()=>Au)),n(gu,"computeConv2DInfo",(()=>wu)),n(gu,"computePool2DInfo",(()=>bu)),n(gu,"computePool3DInfo",(()=>xu)),n(gu,"computeConv3DInfo",(()=>vu)),n(gu,"computeDefaultPad",(()=>ku)),n(gu,"tupleValuesAreOne",(()=>Cu)),n(gu,"eitherStridesOrDilationsAreOne",(()=>$u)),n(gu,"stridesOrDilationsArePositive",(()=>Eu)),n(gu,"checkPadOnDimRoundingMode",(()=>Ru));const Fu=ni({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Qa(e,"x","conv2d","float32"),l=Qa(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=ql(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Ru("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];x(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),x($u(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x(Eu(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),x(Eu(n),(()=>"Error in conv2D: Strides should be larger than 0."));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Va.runKernel(at,p,d);return c?ql(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Du=ni({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=ql(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ql(t,[1,t.shape[0],t.shape[1],t.shape[2]])),x(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),x(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),x(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];x(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),x(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Ru("conv2dDerFilter",r,i);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Va.runKernel(it,h,p)}});const _u=ni({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=ql(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),x(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),x(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),x(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];x(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),x(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),Ru("conv2dDerInput",r,i);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Va.runKernel(ot,p,d);return u?ql(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});var Ou={};n(Ou,"getFusedDyActivation",(()=>Gu)),n(Ou,"getFusedBiasGradient",(()=>Hu)),n(Ou,"applyActivation",(()=>ju)),n(Ou,"shouldFuse",(()=>qu));const Mu=ni({elu_:function(e){const t={x:Qa(e,"x","elu","float32")};return Va.runKernel(Ct,t)}});const Lu=ni({leakyRelu_:function(e,t=.2){const n={x:Qa(e,"x","leakyRelu")},s={alpha:t};return Va.runKernel(Yt,n,s)}});const zu=ni({prelu_:function(e,t){const n={x:Qa(e,"x","prelu"),alpha:Qa(t,"alpha","prelu")};return Va.runKernel(Ln,n)}});const Pu=ni({relu_:function(e){const t={x:Qa(e,"x","relu")};return Va.runKernel(Hn,t)}});const Bu=ni({relu6_:function(e){const t={x:Qa(e,"x","relu6")};return Va.runKernel(Zn,t)}});const Wu=ni({sigmoid_:function(e){const t={x:Qa(e,"x","sigmoid","float32")};return Va.runKernel(cs,t)}});const Vu=ni({step_:function(e,t=0){const n={x:Qa(e,"x","step")},s={alpha:t};return Va.runKernel(Ws,n,s)}});const Uu=ni({sum_:function(e,t=null,n=!1){let s=Qa(e,"x","sum");"bool"===s.dtype&&(s=fl(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Va.runKernel(ds,r,a)}});function Gu(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Vl(e,Vu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Hu(e,t){let n=t;const s=fu(e.shape,t.shape);return s.length>0&&(n=Uu(n,s)),ql(n,e.shape)}function ju(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Pu(e);if("elu"===t)return Mu(e);if("relu6"===t)return Bu(e);if("prelu"===t)return zu(e,n);if("leakyrelu"===t)return Lu(e,s);if("sigmoid"===t)return Wu(e);throw new Error(`Unknown fused activation ${t}.`)}const qu=(e,t)=>!(e>0)||"linear"===t;const Ku=ni({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===qu(Va.state.gradientDepth,l)){x("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=Fu(e,t,n,s,r,a,i);return null!=o&&(h=Pl(h,o)),ju(h,l,u,c)}const h=Qa(e,"x","conv2d","float32"),p=Qa(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=ql(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),Ru("fused conv2d",s,i);const m="NHWC"===r?d.shape[3]:d.shape[1];x(p.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`)),x($u(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=wu(d.shape,p.shape,n,a,s,i);let y,b;if(null!=o&&(y=Qa(o,"bias","fused conv2d"),[y]=Da(y,h),"NHWC"===r?mu(g.outShape,y.shape):(x(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),x(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(x(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)x(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{mu(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Qa(u,"prelu weights","fused conv2d")}const w=(e,t)=>{x("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[i,o,u,c]=t,h=Gu(e,u,l);x(Cu(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[_u(o.shape,h,i,n,s),Du(o,h,i.shape,n,s)];if(null!=c){const e=Hu(c,h);p.push(e)}return p},v={x:d,filter:p,bias:y,preluActivationWeights:b},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return cu(((e,t,n)=>{let s=Va.runKernel(Hs,v,k);return n([t,e,s]),f&&(s=ql(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(d,p)}return cu(((e,t,n,s)=>{let r=Va.runKernel(Hs,v,k);return s([t,e,r,n]),f&&(r=ql(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(d,p,y)}});const Xu=ni({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Qa(e,"x","depthwiseConv2d","float32"),l=Qa(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=ql(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),x(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];x(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Ru("depthwiseConv2d",s,i);const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Va.runKernel(bt,p,d);return c?ql(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Yu=ni({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=ql(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=ql(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Va.runKernel(xt,u,c)}});const Zu=ni({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=ql(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Va.runKernel(wt,u,c);return l?ql(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Ju=ni({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===qu(Va.state.gradientDepth,l)){let h=Xu(e,t,n,s,r,a,i);return null!=o&&(h=Pl(h,o)),ju(h,l,u,c)}const h=Qa(e,"x","depthwiseConv2d","float32"),p=Qa(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=ql(h,[1,h.shape[0],h.shape[1],h.shape[2]])),x(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),x(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),x(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),x($u(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Ru("fused depthwiseConv2d",s,i);const m=wu(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Qa(o,"bias","fused conv2d"),[g]=Da(g,h),mu(m.outShape,g.shape)),null!=u&&(y=Qa(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{x(Cu(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=Gu(e,u,l),p=Zu(o.shape,h,r,n,s,a,i),d=Yu(o,h,r.shape,n,s,a,i);if(null!=c){return[p,d,Hu(g,h)]}return[p,d]},w={x:d,filter:p,bias:g,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return cu(((e,t,n)=>{let s=Va.runKernel(js,w,v);return n([t,e,s]),f&&(s=ql(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}))(d,p)}return cu(((e,t,n,s)=>{let r=Va.runKernel(js,w,v);return s([t,e,r,n]),f&&(r=ql(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}}))(d,p,g)}});const Qu=ni({matMul_:function(e,t,n=!1,s=!1){let r=Qa(e,"a","matMul"),a=Qa(t,"b","matMul");[r,a]=Da(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Va.runKernel(qe,i,o)}});const ec=ni({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===qu(Va.state.gradientDepth,a)){let l=Qu(e,t,n,s);return null!=r&&(l=Pl(l,r)),ju(l,a,i,o)}let l=Qa(e,"a","fused matMul"),u=Qa(t,"b","fused matMul");[l,u]=Da(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=k(f),y=k(m);x(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=mu(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,d]),w=ql(l,n?[g,c,p]:[g,p,c]),v=ql(u,s?[y,d,h]:[y,h,d]);let I,S;null!=r&&(I=Qa(r,"bias","fused matMul"),[I]=Da(I,l),mu(b,I.shape)),null!=i&&(S=Qa(i,"prelu weights","fused matMul"));const N=(e,t)=>{const[i,o,l,u]=t,c=Gu(ql(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=Qu(c,o,!1,!1),p=Qu(c,i,!0,!1)):n&&!s?(h=Qu(o,c,!1,!0),p=Qu(i,c,!1,!1)):(h=Qu(o,c,!0,!0),p=Qu(c,i,!0,!0)):(h=Qu(c,o,!1,!0),p=Qu(i,c,!0,!1)),null!=r){return[h,p,Hu(u,c)]}return[h,p]},T={a:w,b:v,bias:I,preluActivationWeights:S},C={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return cu(((e,t,n)=>{const s=Va.runKernel(Gs,T,C);return n([e,t,s]),{value:ql(s,b),gradFunc:N}}))(w,v)}return cu(((e,t,n,s)=>{const r=Va.runKernel(Gs,T,C);return s([e,t,r,n]),{value:ql(r,b),gradFunc:N}}))(w,v,I)}});var tc={};function nc(e,t){v(e);const n=Ya(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ri(e,null,n,t)}function sc(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function rc(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return nc(r,"float32")}n(tc,"enclosingPowerOfTwo",(()=>sc)),n(tc,"cosineWindow",(()=>rc));const ac=ni({hammingWindow_:function(e){return rc(e,.54,.46)}});const ic=ni({hannWindow_:function(e){return rc(e,.5,.5)}});function oc(e,t,n){te(e);const s={shape:e,value:t,dtype:n=n||H(t)};return Va.runKernel(Ot,{},s)}function lc(e,t,n){if(v(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Ya(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ri(e,t,s,n)}const uc=ni({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(Kl(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=Gl([Kl(e,a,t-s),oc([s],r)]);i.push(o),a+=n}return 0===i.length?lc([],[0,t]):ql(Gl(i),[i.length,t])}});const cc=ni({stft_:function(e,t,n,s,r=ic){null==s&&(s=sc(t));const a=uc(e,t,n),i=Vl(a,r(t));return Ql(i,s)}});const hc=ni({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Qa(e,"image","cropAndResize"),o=Qa(t,"boxes","cropAndResize","float32"),l=Qa(n,"boxInd","cropAndResize","int32"),u=o.shape[0];x(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),x(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),x(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),x(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),x("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Va.runKernel(mt,c,h)}});const pc=ni({flipLeftRight_:function(e){const t=Qa(e,"image","flipLeftRight","float32");x(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Va.runKernel(Mt,n,{})}});const dc=ni({tile_:function(e,t){const n=Qa(e,"x","tile","string_or_numeric");x(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Va.runKernel(Fs,s,r)}});const fc=ni({grayscaleToRGB_:function(e){const t=Qa(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];x(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),x(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,dc(t,r)}});const mc=ni({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Qa(e,"image","rotateWithOffset","float32");x(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Va.runKernel(Us,a,i)}});function gc(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),x(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),x(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),x(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),x(1===t.rank,(()=>"scores must be a 1D tensor")),x(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),x(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const yc=ni({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Qa(e,"boxes","nonMaxSuppression","float32"),i=Qa(t,"scores","nonMaxSuppression","float32"),o=gc(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Va.runKernel($n,{boxes:a,scores:i},l)}});function bc(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||xc)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function xc(e,t){return e>t?1:e<t?-1:0}function wc(e,t,n,s,r){return Ic(e,t,n,s,r,0)}function vc(e,t,n,s,r,a){return Ic(e,t,n,s,r,0,!1,a,!0)}function kc(e,t,n,s,r,a){return Ic(e,t,n,s,r,a,!0)}function Ic(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(Tc);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Sc(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Nc(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&bc(u,t,Tc))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Sc(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Nc(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function Tc(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Cc=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Qa(e,"boxes","nonMaxSuppressionAsync"),i=Qa(t,"scores","nonMaxSuppressionAsync"),o=gc(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=wc(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),nc(h,"int32")};const $c=ni({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Qa(e,"boxes","nonMaxSuppression"),o=Qa(t,"scores","nonMaxSuppression"),l=gc(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Va.runKernel(An,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Ec=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Qa(e,"boxes","nonMaxSuppressionAsync"),o=Qa(t,"scores","nonMaxSuppressionAsync"),l=gc(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=kc(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:nc(p,"int32"),selectedScores:nc(d)}};const Ac=ni({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Qa(e,"boxes","nonMaxSuppression"),o=Qa(t,"scores","nonMaxSuppression"),l=gc(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Va.runKernel(En,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Rc=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Qa(e,"boxes","nonMaxSuppressionAsync"),o=Qa(t,"scores","nonMaxSuppressionAsync"),l=gc(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=vc(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:nc(f,"int32"),validOutputs:nu(m,"int32")}};const Fc=ni({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Qa(e,"images","resizeBilinear");x(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),x(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=ql(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Va.runKernel(Xn,o,l);return i?ql(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Dc=ni({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Qa(e,"images","resizeNearestNeighbor");x(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),x(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),x("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),x(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=ql(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Va.runKernel(qn,o,l);return i?ql(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const _c=ni({bincount_:function(e,t,n){const s=Qa(e,"x","bincount"),r=Qa(t,"weights","bincount");x("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Va.runKernel(Xe,a,i)}});const Oc=ni({lessEqual_:function(e,t){let n=Qa(e,"a","lessEqual","string_or_numeric"),s=Qa(t,"b","lessEqual","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Jt,r)}});const Mc=ni({greater_:function(e,t){let n=Qa(e,"a","greater","string_or_numeric"),s=Qa(t,"b","greater","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Vt,r)}});const Lc=ni({sub_:function(e,t){let n=Qa(e,"a","sub"),s=Qa(t,"b","sub");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Es,r)}});const zc=ni({round_:function(e){const t={x:Qa(e,"x","round")};return Va.runKernel(Qn,t)}});const Pc=ni({broadcastTo_:function(e,t){let n=Qa(e,"broadcastTo","x");const s=n.shape;if(te(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=ql(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return ml(n);const i={x:n},o={reps:a};return Va.runKernel(Fs,i,o)}});const Bc=ni({where_:function(e,t,n){const s=Qa(t,"a","where"),r=Qa(n,"b","where"),a=Qa(e,"condition","where","bool"),i=mu(mu(a.shape,s.shape),r.shape),o={condition:Pc(a,i),t:Pc(s,i),e:Pc(r,i)};return Va.runKernel(rs,o)}});function Wc(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Va.runKernel(Vn,{},r)}const Vc=ni({threshold_:function(e,t="binary",n=!1,s=.5){const r=Qa(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=Vl(nc([s]),255);if(x(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),x(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),x("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),x("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=Xl(r,[1,1,1],-1);const e=Vl(i,.2989),t=Vl(o,.587),n=Vl(l,.114);u=Pl(Pl(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=nc([-1]),u=nc([0]),c=nc([0]);for(let h=0;h<e.size-1;h++){n=Kl(e,0,h+1),s=Kl(e,h+1),i=Wl(Uu(n),t),o=Wl(Uu(s),t);const p=Uu(Vl(n,Wc(0,n.size)));r=Wl(p,Uu(n));const d=oc(s.shape,n.size),f=Pl(Wc(0,s.size),d),m=Vl(s,f);a=Wl(Uu(m),Uu(s));const g=Lc(r,a),y=Lc(r,a),b=Vl(i,o);c=Vl(Vl(b,g),y);const x=Mc(c,u);u=Bc(x,c,u),l=Bc(x,nc([h]),l)}return l}(_c(fl(zc(u),"int32"),ai([]),256),a)}const h=n?Oc(u,c):Mc(u,c);return fl(Vl(h,255),"int32")}});const Uc=ni({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Qa(e,"image","transform","float32"),o=Qa(t,"transforms","transform","float32");x(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),x(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),x(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Va.runKernel(_s,l,u)}});const Gc=ni({greaterEqual_:function(e,t){let n=Qa(e,"a","greaterEqual","string_or_numeric"),s=Qa(t,"b","greaterEqual","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Ut,r)}});const Hc=ni({less_:function(e,t){let n=Qa(e,"a","less","string_or_numeric"),s=Qa(t,"b","less","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Zt,r)}});const jc=ni({logicalAnd_:function(e,t){const n=Qa(e,"a","logicalAnd","bool"),s=Qa(t,"b","logicalAnd","bool");mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(nn,r)}});const qc=ni({minimum_:function(e,t){let n=Qa(e,"a","minimum"),s=Qa(t,"b","minimum");[n,s]=Da(n,s),"bool"===n.dtype&&(n=fl(n,"int32"),s=fl(s,"int32")),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(vn,r)}});const Kc=ni({neg_:function(e){const t={x:Qa(e,"x","neg")};return Va.runKernel(Tn,t)}});const Xc=ni({stack_:function(e,t=0){const n=ei(e,"tensors","stack","string_or_numeric");x(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&x(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Va.runKernel(Dn,s,r)}});const Yc=ni({unstack_:function(e,t=0){const n=Qa(e,"x","unstack","string_or_numeric");x(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Va.runKernel(Ls,s,r)}});const Zc=ni({bandPart_:function(e,t,n){const s=Qa(e,"a","bandPart");x(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);let o,l;"number"==typeof t?(x(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),x(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),o=Qa(t<0?a:t,"numLower","bandPart")):(x("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),o=Bc(Hc(t,0),a,qc(t,a))),"number"==typeof n?(x(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),x(n<=i,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`)),l=Qa(n<0?i:n,"numUpper","bandPart")):(x("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=Bc(Hc(n,0),i,qc(n,i)));const u=ql(Wc(0,a,1,"int32"),[-1,1]),c=Wc(0,i,1,"int32"),h=Lc(u,c),p=jc(Oc(h,o),Gc(h,Kc(l))),d=Yl([a,i],s.dtype);return ql(Xc(Yc(ql(s,[-1,a,i])).map((e=>Bc(p,e,d)))),r)}});var Jc={};n(Jc,"norm",(()=>mh));const Qc=ni({abs_:function(e){const t=Qa(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Va.runKernel(st,e)}{const e={x:t};return Va.runKernel(Ee,e)}}});var eh={};function th(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function nh(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function sh(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function rh(e,t){return nh(e,t.map((e=>1)),t)}function ah(e,t,n){x(th(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function ih(e,t){if(th(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function oh(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function lh(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}n(eh,"axesAreInnerMostDims",(()=>th)),n(eh,"combineLocations",(()=>nh)),n(eh,"computeOutAndReduceShapes",(()=>sh)),n(eh,"expandShapeToKeepDim",(()=>rh)),n(eh,"assertAxesAreInnerMostDims",(()=>ah)),n(eh,"getAxesPermutation",(()=>ih)),n(eh,"getUndoAxesPermutation",(()=>oh)),n(eh,"getInnerMostAxes",(()=>lh));const uh=ni({max_:function(e,t=null,n=!1){const s={x:Qa(e,"x","max")},r={reductionIndices:t,keepDims:n};return Va.runKernel(pn,s,r)}});const ch=ni({min_:function(e,t=null,n=!1){const s={x:Qa(e,"x","min")},r={axis:t,keepDims:n};return Va.runKernel(wn,s,r)}});const hh=ni({pow_:function(e,t){let n=Qa(e,"base","pow"),s=Qa(t,"exp","pow");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Mn,r)}});const ph=ni({sqrt_:function(e){const t={x:Qa(e,"x","sqrt","float32")};return Va.runKernel(ps,t)}});const dh=ni({square_:function(e){const t=Qa(e,"x","square");return Va.runKernel("Square",{x:t},{})}});function fh(e,t,n=null){if(0===e.rank)return Qc(e);if(1!==e.rank&&null===n)return fh(ql(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Uu(Qc(e),n);if(t===1/0)return uh(Qc(e),n);if(t===-1/0)return ch(Qc(e),n);if("euclidean"===t||2===t)return ph(Uu(hh(Qc(e),nu(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return uh(Uu(Qc(e),n[0]),n[1]-1);if(t===1/0)return uh(Uu(Qc(e),n[1]),n[0]);if(t===-1/0)return ch(Uu(Qc(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return ph(Uu(dh(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const mh=ni({norm_:function(e,t="euclidean",n=null,s=!1){const r=fh(e=Qa(e,"x","norm"),t,n);let a=r.shape;if(s){const t=D(n,e.shape);a=rh(r.shape,t)}return ql(r,a)}});const gh=ni({squeeze_:function(e,t){const n=Qa(e,"x","squeeze","string_or_numeric");return ql(n,_(n.shape,t).newShape)}});const yh=ni({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,x(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)x(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=Xl(e,e.shape[0],0).map((e=>gh(e,[0])));x(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Va.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=Vl(Uu(Vl(n[s],e)),n[s]);e=Lc(e,t)}return Wl(e,mh(e,"euclidean"))})));return t?Xc(n,0):n}});const bh=ni({expandDims_:function(e,t=0){const n=Qa(e,"x","expandDims","string_or_numeric");x(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Va.runKernel(Ft,s,r)}});const xh=ni({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=dl([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=ql(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return dc(bh(i,0),[n[0],1,1]);if(2===n.length)return dc(bh(bh(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return dc(bh(bh(bh(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var wh={};n(wh,"transpose",(()=>vh));const vh=ni({transpose_:function(e,t,n){const s=Qa(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),x(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{x(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?Tl((()=>{let e=jl(s),t=Hl(s);return e=Va.runKernel(Os,{x:e},a),t=Va.runKernel(Os,{x:t},a),n&&(t=Kc(t)),si(e,t)})):Va.runKernel(Os,r,a)}});function kh(e,t=!1){return Va.tidy((()=>{x(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=xh(n),a=ml(e);const i=lc([[1]],[1,1]);let o=ml(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Va.tidy((()=>{const t=Kl(a,[e,e],[n-e,1]),l=mh(t),u=Kl(a,[e,e],[1,1]),c=Bc(Mc(u,0),lc([[-1]]),lc([[1]])),h=Lc(u,Vl(c,l)),p=Wl(t,h);o=1===p.shape[0]?ml(i):Gl([i,Kl(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Kc(Wl(Qu(c,h),l)),f=Kl(a,[e,0],[n-e,s]),m=Vl(d,o),g=vh(o);if(0===e)a=Lc(f,Qu(m,Qu(g,f)));else{const t=Lc(f,Qu(m,Qu(g,f)));a=Gl([Kl(a,[0,0],[e,s]),t],0)}const y=vh(m),b=Kl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=Lc(b,Qu(Qu(b,o),y));else{const t=Lc(b,Qu(Qu(b,o),y));r=Gl([Kl(r,[0,0],[n,e]),t],1)}return[o,a,r]})),Cl([t,l,u])}return!t&&n>s&&(r=Kl(r,[0,0],[n,s]),a=Kl(a,[0,0],[s,s])),[r,a]}))}const Ih=ni({qr_:function(e,t=!1){if(x(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return kh(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=Yc(ql(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=kh(e,t);r.push(n),a.push(s)}));return[ql(Xc(r,0),e.shape),ql(Xc(a,0),e.shape)]}}});var Sh;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Sh||(Sh={}));const Nh=ni({mean_:function(e,t=null,n=!1){const s={x:Qa(e,"x","mean")},r={axis:t,keepDims:n};return Va.runKernel(xn,s,r)}});const Th=ni({notEqual_:function(e,t){let n=Qa(e,"a","notEqual","string_or_numeric"),s=Qa(t,"b","notEqual","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(Cn,r)}});function Ch(e,t="float32"){if(te(e),"complex64"===t){const t=Ch(e,"float32"),n=Yl(e,"float32");return si(t,n)}const n=J(k(e),t);return Va.makeTensor(n,e,t)}const $h=ni({computeWeightedLoss_:function(e,t,n=Sh.SUM_BY_NONZERO_WEIGHTS){const s=Qa(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Qa(t,"weights","computeWeightedLoss"));const a=null==r?s:Vl(s,r);if(n===Sh.NONE)return a;if(n===Sh.SUM)return Uu(a);if(n===Sh.MEAN){if(null==r)return Nh(a);{const e=s.size/r.size,t=Wl(Uu(a),Uu(r));return e>1?Wl(t,nu(e)):t}}if(n===Sh.SUM_BY_NONZERO_WEIGHTS){if(null==r)return Wl(Uu(a),nu(s.size));{const e=Vl(r,Ch(s.shape)),t=fl(Uu(Th(e,nu(0))),"float32");return Wl(Uu(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Eh=ni({absoluteDifference_:function(e,t,n,s=Sh.SUM_BY_NONZERO_WEIGHTS){const r=Qa(e,"labels","absoluteDifference"),a=Qa(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Qa(n,"weights","absoluteDifference")),w(r.shape,a.shape,"Error in absoluteDifference: ");const o=Qc(Lc(r,a));return $h(o,i,s)}});const Ah=ni({cosineDistance_:function(e,t,n,s,r=Sh.SUM_BY_NONZERO_WEIGHTS){const a=Qa(e,"labels","cosineDistance"),i=Qa(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Qa(s,"weights","cosineDistance")),w(a.shape,i.shape,"Error in cosineDistance: ");const l=nu(1),u=Lc(l,Uu(Vl(a,i),n,!0));return $h(u,o,r)}});const Rh=ni({hingeLoss_:function(e,t,n,s=Sh.SUM_BY_NONZERO_WEIGHTS){let r=Qa(e,"labels","hingeLoss");const a=Qa(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Qa(n,"weights","hingeLoss")),w(r.shape,a.shape,"Error in hingeLoss: ");const o=nu(1);r=Lc(Vl(nu(2),r),o);const l=Pu(Lc(o,Vl(r,a)));return $h(l,i,s)}});const Fh=ni({huberLoss_:function(e,t,n,s=1,r=Sh.SUM_BY_NONZERO_WEIGHTS){const a=Qa(e,"labels","huberLoss"),i=Qa(t,"predictions","huberLoss");let o=null;null!=n&&(o=Qa(n,"weights","huberLoss")),w(a.shape,i.shape,"Error in huberLoss: ");const l=nu(s),u=Qc(Lc(i,a)),c=qc(u,l),h=Lc(u,c),p=Pl(Vl(nu(.5),dh(c)),Vl(l,h));return $h(p,o,r)}});const Dh=ni({log_:function(e){const t={x:Qa(e,"x","log","float32")};return Va.runKernel(en,t)}});const _h=ni({logLoss_:function(e,t,n,s=1e-7,r=Sh.SUM_BY_NONZERO_WEIGHTS){const a=Qa(e,"labels","logLoss"),i=Qa(t,"predictions","logLoss");let o=null;null!=n&&(o=Qa(n,"weights","logLoss")),w(a.shape,i.shape,"Error in logLoss: ");const l=nu(1),u=nu(s),c=Kc(Vl(a,Dh(Pl(i,u)))),h=Vl(Lc(l,a),Dh(Pl(Lc(l,i),u))),p=Lc(c,h);return $h(p,o,r)}});const Oh=ni({squaredDifference_:function(e,t){let n=Qa(e,"a","squaredDifference"),s=Qa(t,"b","squaredDifference");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(ks,r,{})}});const Mh=ni({meanSquaredError_:function(e,t,n,s=Sh.SUM_BY_NONZERO_WEIGHTS){const r=Qa(e,"labels","meanSquaredError"),a=Qa(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Qa(n,"weights","meanSquaredError")),w(r.shape,a.shape,"Error in meanSquaredError: ");const o=Oh(r,a);return $h(o,i,s)}});const Lh=ni({exp_:function(e){const t={x:Qa(e,"x","exp")};return Va.runKernel(Rt,t)}});const zh=ni({log1p_:function(e){const t={x:Qa(e,"x","log1p")};return Va.runKernel(tn,t)}});const Ph=ni({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Sh.SUM_BY_NONZERO_WEIGHTS){let a=Qa(e,"multiClassLabels","sigmoidCrossEntropy");const i=Qa(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Qa(n,"weights","sigmoidCrossEntropy")),w(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=nu(s),t=nu(1),n=nu(.5);a=Pl(Vl(a,Lc(t,e)),Vl(n,e))}const l=function(e,t){const n=Qa(e,"labels","sigmoidCrossEntropyWithLogits"),s=Qa(t,"logits","sigmoidCrossEntropyWithLogits");w(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=Pu(s),a=Vl(s,n),i=zh(Lh(Kc(Qc(s))));return Pl(Lc(r,a),i)}(a,i);return $h(l,o,r)}});const Bh=ni({logSumExp_:function(e,t=null,n=!1){const s=Qa(e,"x","logSumExp"),r=D(t,s.shape),a=uh(s,r,!0),i=Lc(s,a),o=Lh(i),l=Uu(o,r),u=Dh(l),c=Pl(ql(a,u.shape),u);if(n){const e=rh(c.shape,r);return ql(c,e)}return c}});const Wh=ni({softmaxCrossEntropy_:function(e,t,n,s=0,r=Sh.SUM_BY_NONZERO_WEIGHTS){let a=Qa(e,"onehotLabels","softmaxCrossEntropy");const i=Qa(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Qa(n,"weights","softmaxCrossEntropy")),w(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=nu(s),t=nu(1),n=nu(a.shape[1]);a=Pl(Vl(a,Lc(t,e)),Wl(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return cu(((e,t,s)=>{const r=Bh(t,[n],!0),a=Lc(fl(t,"float32"),r);s([e,a]);const i=Kc(Vl(a,e));return{value:Uu(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=rh(e.shape,[n]);return[Vl(ql(e,a),Lc(fl(s,"float32"),Lh(r))),Vl(ql(e,a),Lc(Lh(r),fl(s,"float32")))]}}}))(e,t)}(a,i);return $h(l,o,r)}});const Vh=ni({sparseFillEmptyRows_:function(e,t,n,s){const r=Qa(e,"indices","sparseFillEmptyRows","int32"),a=Qa(t,"values","sparseFillEmptyRows"),i=Qa(n,"denseShape","sparseFillEmptyRows","int32"),o=Qa(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Va.runKernel(ys,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const Uh=ni({sparseReshape_:function(e,t,n){const s=Qa(e,"inputIndices","sparseReshape","int32"),r=Qa(t,"inputShape","sparseReshape","int32"),a=Qa(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Va.runKernel(bs,i);return{outputIndices:o[0],outputShape:o[1]}}});const Gh=ni({sparseSegmentMean_:function(e,t,n){const s=Qa(e,"data","sparseSegmentMean"),r=Qa(t,"indices","sparseSegmentMean","int32"),a=Qa(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Va.runKernel(xs,i)}});const Hh=ni({sparseSegmentSum_:function(e,t,n){const s=Qa(e,"data","sparseSegmentSum"),r=Qa(t,"indices","sparseSegmentSum","int32"),a=Qa(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Va.runKernel(ws,i)}});const jh=ni({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Qa(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Qa(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=Va.runKernel(Ts,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const qh=ni({stringSplit_:function(e,t,n=!0){const s=Qa(e,"input","stringSplit","string"),r=Qa(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=Va.runKernel(Cs,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const Kh=ni({stringToHashBucketFast_:function(e,t){const n=Qa(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Va.runKernel($s,r,s)}});const Xh=ni({staticRegexReplace_:function(e,t,n,s=!0){const r=Qa(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:s};return Va.runKernel(Ss,{x:r},a)}});const Yh=ni({acos_:function(e){const t={x:Qa(e,"x","acos")};return Va.runKernel(Ae,t)}});const Zh=ni({acosh_:function(e){const t={x:Qa(e,"x","acosh")};return Va.runKernel(Re,t)}});const Jh=ni({addN_:function(e){x(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),x(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Qa(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!N(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Va.runKernel(De,s)}});const Qh=ni({all_:function(e,t=null,n=!1){const s={x:Qa(e,"x","all","bool")},r={axis:t,keepDims:n};return Va.runKernel(_e,s,r)}});const ep=ni({any_:function(e,t=null,n=!1){const s={x:Qa(e,"x","any","bool")},r={axis:t,keepDims:n};return Va.runKernel(Oe,s,r)}});const tp=ni({argMax_:function(e,t=0){const n={x:Qa(e,"x","argMax")},s={axis:t};return Va.runKernel(Me,n,s)}});const np=ni({argMin_:function(e,t=0){const n={x:Qa(e,"x","argMin")},s={axis:t};return Va.runKernel(Le,n,s)}});const sp=ni({asin_:function(e){const t={x:Qa(e,"x","asin")};return Va.runKernel(ze,t)}});const rp=ni({asinh_:function(e){const t={x:Qa(e,"x","asinh")};return Va.runKernel(Pe,t)}});const ap=ni({atan_:function(e){const t={x:Qa(e,"x","atan")};return Va.runKernel(Be,t)}});const ip=ni({atan2_:function(e,t){let n=Qa(e,"a","atan2"),s=Qa(t,"b","atan2");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(Ve,r)}});const op=ni({atanh_:function(e){const t={x:Qa(e,"x","atanh")};return Va.runKernel(We,t)}});const lp=ni({avgPool_:function(e,t,n,s,r){const a=Qa(e,"x","avgPool","float32");x($u(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=ql(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),Ru("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Va.runKernel(Ue,l,u);return c=fl(c,a.dtype),o?ql(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const up=ni({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Qa(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=ql(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),x("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),Ru("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Va.runKernel(He,u,c);return h=fl(h,o.dtype),l?ql(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const cp=ni({tanh_:function(e){const t={x:Qa(e,"x","tanh","float32")};return Va.runKernel(Rs,t)}});const hp=ni({basicLSTMCell_:function(e,t,n,s,r,a){const i=Qa(e,"forgetBias","basicLSTMCell"),o=Qa(t,"lstmKernel","basicLSTMCell"),l=Qa(n,"lstmBias","basicLSTMCell"),u=Qa(s,"data","basicLSTMCell"),c=Qa(r,"c","basicLSTMCell"),h=Qa(a,"h","basicLSTMCell"),p=Gl([u,h],1),d=Qu(p,o),f=Pl(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=Kl(f,[0,0],y),x=Kl(f,[0,g],y),w=Kl(f,[0,2*g],y),v=Kl(f,[0,3*g],y),k=Pl(Vl(Wu(b),cp(x)),Vl(c,Wu(Pl(i,w))));return[k,Vl(cp(k),Wu(v))]}});const pp=ni({batchToSpaceND_:function(e,t,n){const s=Qa(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));x(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),x(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),x(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Va.runKernel(Ke,a,i)}});const dp=ni({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Qa(e,"x","batchNorm"),o=Qa(t,"mean","batchNorm"),l=Qa(n,"variance","batchNorm");let u,c;null!=r&&(u=Qa(r,"scale","batchNorm")),null!=s&&(c=Qa(s,"offset","batchNorm")),x(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),x(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),x(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?ql(e,[1,1,1,e.size]):2===e.rank?ql(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?ql(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Va.runKernel(Pt,p,d);return ql(f,i.shape)}});const fp=ni({batchNorm2d_:function(e,t,n,s,r,a){const i=Qa(e,"x","batchNorm"),o=Qa(t,"mean","batchNorm"),l=Qa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qa(r,"scale","batchNorm")),null!=s&&(c=Qa(s,"offset","batchNorm")),x(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),x(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),x(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),dp(i,o,l,c,u,a)}});const mp=ni({batchNorm3d_:function(e,t,n,s,r,a){const i=Qa(e,"x","batchNorm"),o=Qa(t,"mean","batchNorm"),l=Qa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qa(r,"scale","batchNorm")),null!=s&&(c=Qa(s,"offset","batchNorm")),x(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),x(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),x(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),dp(i,o,l,c,u,a)}});const gp=ni({batchNorm4d_:function(e,t,n,s,r,a){const i=Qa(e,"x","batchNorm"),o=Qa(t,"mean","batchNorm"),l=Qa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Qa(r,"scale","batchNorm")),null!=s&&(c=Qa(s,"offset","batchNorm")),x(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),x(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),x(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&x(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&x(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),dp(i,o,l,c,u,a)}});const yp=ni({bitwiseAnd_:function(e,t){const n=Qa(e,"x","bitwiseAnd"),s=Qa(t,"y","bitwiseAnd");if(!N(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const r={a:n,b:s};return Va.runKernel(Ye,r)}});const bp=ni({broadcastArgs_:function(e,t){const n=Qa(e,"s0","broadcastArgs","int32"),s=Qa(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return Va.runKernel(Je,r)}});const xp=ni({ceil_:function(e){const t={x:Qa(e,"x","ceil","float32")};return Va.runKernel(et,t)}});const wp=ni({clipByValue_:function(e,t,n){const s=Qa(e,"x","clipByValue");if(x(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return oc(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return Va.runKernel(tt,r,a)}});const vp=ni({concat1d_:function(e){return Gl(e,0)}});const kp=ni({concat2d_:function(e,t){return Gl(e,t)}});const Ip=ni({concat3d_:function(e,t){return Gl(e,t)}});const Sp=ni({concat4d_:function(e,t){return Gl(e,t)}});const Np=ni({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Qa(e,"x","conv1d"),l=Qa(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=ql(o,[1,o.shape[0],o.shape[1]])),x(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),x(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Ru("conv1d",s,i),x(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),x($u(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),x(Eu(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),x(Eu(n),(()=>"Error in conv1D: Stride should be larger than 0.")),x("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=ql(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=ql(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Fu(p,h,[1,n],s,"NHWC",[1,a],i);return ql(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const Tp=ni({conv2dTranspose_:function(e,t,n,s,r,a){const i=Qa(e,"x","conv2dTranspose"),o=Qa(t,"filter","conv2dTranspose");return _u(n,i,o,s,r,"NHWC",a)}});const Cp=ni({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Qa(e,"x","conv3d"),o=Qa(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=ql(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),x(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),x(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),x($u(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),x("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),x(Eu(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),x(Eu(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Va.runKernel(lt,c,h);return u?ql(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const $p=ni({conv3DBackpropInput_:function(e,t,n,s,r){x(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=ql(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];x(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),x(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),x(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),x(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),x(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Va.runKernel(ct,c,h);return o?ql(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Ep=ni({conv3dTranspose_:function(e,t,n,s,r){const a=Qa(e,"x","conv3dTranspose"),i=Qa(t,"filter","conv3dTranspose");return $p(n,a,i,s,r)}});const Ap=ni({cos_:function(e){const t={x:Qa(e,"x","cos","float32")};return Va.runKernel(ht,t)}});const Rp=ni({cosh_:function(e){const t={x:Qa(e,"x","cosh","float32")};return Va.runKernel(pt,t)}});const Fp=ni({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:Qa(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Va.runKernel(dt,r,a)}});const Dp=ni({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Qa(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Va.runKernel(ft,r,a)}});const _p=ni({denseBincount_:function(e,t,n,s=!1){const r=Qa(e,"x","denseBincount"),a=Qa(t,"weights","denseBincount");x("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),x(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),x(n>=0,(()=>`size must be non-negative, but got ${n}.`)),x(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Va.runKernel(gt,i,o)}});const Op=ni({depthToSpace_:function(e,t,n="NHWC"){const s=Qa(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];x(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),x(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),x(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),x(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Va.runKernel(yt,o,l)}});const Mp=ni({diag_:function(e){const t={x:Qa(e,"x","diag")};return Va.runKernel(vt,t)}});const Lp=ni({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Qa(e,"x","dilation2d"),o=Qa(t,"filter","dilation2d");x(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),x(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),x("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=ql(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),x(l.shape[3]===o.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`));const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Va.runKernel(kt,c,h);return u?ql(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const zp=ni({equal_:function(e,t){let n=Qa(e,"a","equal","string_or_numeric"),s=Qa(t,"b","equal","string_or_numeric");[n,s]=Da(n,s),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(At,r)}});const Pp=ni({divNoNan_:function(e,t){let n=Qa(e,"a","div"),s=Qa(t,"b","div");[n,s]=Da(n,s);const r=Wl(n,s),a=Zl(r),i=zp(s,a);return Bc(i,a,r)}});const Bp=ni({dot_:function(e,t){const n=Qa(e,"t1","dot"),s=Qa(t,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(x(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=ql(n,[1,-1]),t=ql(s,[-1,1]),r=Qu(e,t);return ql(r,[])}if(1===n.rank&&2===s.rank){const e=ql(n,[1,-1]),t=ql(s,[s.shape[0],s.shape[1]]),r=Qu(e,t);return ql(r,[r.size])}if(2===n.rank&&1===s.rank){const e=ql(s,[-1,1]),t=Qu(n,e);return ql(t,[t.size])}{const e=ql(s,[s.shape[0],s.shape[1]]);return Qu(n,e)}}});const Wp=ni({einsum_:function(e,...t){const n=t.map(((e,t)=>Qa(e,`tensors${t}`,"einsum"))),s={equation:e};return Va.runKernel(Tt,n,s)}});const Vp=ni({ensureShape_:function(e,t){const n=Qa(e,"x","ensureShape","string_or_numeric");if(!S(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});const Up=ni({erf_:function(e){let t=Qa(e,"x","erf");x("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=fl(t,"float32"));const n={x:t};return Va.runKernel(Et,n)}});const Gp=ni({euclideanNorm_:function(e,t=null,n=!1){return mh(e,"euclidean",t,n)}});const Hp=ni({expm1_:function(e){const t={x:Qa(e,"x","expm1")};return Va.runKernel(Dt,t)}});const jp=ni({floor_:function(e){const t={x:Qa(e,"x","floor","float32")};return Va.runKernel(Lt,t)}});const qp=ni({gather_:function(e,t,n=0,s=0){const r={x:Qa(e,"x","gather"),indices:Qa(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Va.runKernel(Bt,r,a)}});const Kp=ni({isFinite_:function(e){const t={x:Qa(e,"x","isFinite")};return Va.runKernel(qt,t)}});const Xp=ni({isInf_:function(e){const t={x:Qa(e,"x","isInf")};return Va.runKernel(Kt,t)}});const Yp=ni({isNaN_:function(e){const t={x:Qa(e,"x","isNaN")};return Va.runKernel(Xt,t)}});function Zp(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Va.runKernel(Qt,{},s)}const Jp=ni({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Qa(e,"x","localResponseNormalization");x(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),x(T(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=ql(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Va.runKernel(un,l,u);return o?ql(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Qp=ni({softplus_:function(e){const t={x:Qa(e,"x","softplus")};return Va.runKernel(hs,t)}});const ed=ni({logSigmoid_:function(e){const t=Qa(e,"x","logSigmoid");return cu((e=>({value:Kc(Qp(Kc(e))),gradFunc:t=>Vl(t,Wu(Kc(e)))})))(t)}});const td=ni({logSoftmax_:function(e,t=-1){const n=Qa(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return cu(((e,n)=>{const s=uh(e,t,!0),r=Lc(e,s),a=Lc(fl(r,"float32"),Dh(Uu(Lh(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=Lh(s);return Lc(e,Vl(Uu(e,t,!0),r))}}}))(n)}});const nd=ni({logicalNot_:function(e){const t={x:Qa(e,"x","logicalNot","bool")};return Va.runKernel(sn,t)}});const sd=ni({logicalOr_:function(e,t){const n=Qa(e,"a","logicalOr","bool"),s=Qa(t,"b","logicalOr","bool");mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(rn,r)}});const rd=ni({logicalXor_:function(e,t){const n=Qa(e,"a","logicalXor","bool"),s=Qa(t,"b","logicalXor","bool");return mu(n.shape,s.shape),jc(sd(e,t),nd(jc(e,t)))}});var ad={};n(ad,"searchSorted",(()=>od));const id=2147483648;const od=ni({searchSorted_:function(e,t,n="left"){const s=Qa(e,"sortedSequence","searchSorted"),r=Qa(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=ql(s,[-1,a]),l=ql(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(k(l.shape)>=id)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=id)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const u={sortedSequence:o,values:l},c={side:n};return Va.runKernel(ss,u,c)}});function ld(e,t){return od(e,t,"left")}const ud=ni({maxPool_:function(e,t,n,s,r){const a=Qa(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=ql(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),x($u(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Ru("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Va.runKernel(fn,l,u);return o?ql(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const cd=ni({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Qa(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=ql(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),x(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),x("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Ru("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Va.runKernel(gn,u,c);return l?ql(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const hd=ni({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Qa(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Va.runKernel(bn,a,i);return{result:o[0],indexes:o[1]}}});const pd=ni({maximum_:function(e,t){let n=Qa(e,"a","maximum"),s=Qa(t,"b","maximum");[n,s]=Da(n,s),"bool"===n.dtype&&(n=fl(n,"int32"),s=fl(s,"int32")),mu(n.shape,s.shape);const r={a:n,b:s};return Va.runKernel(dn,r)}});function dd(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=Qa(e,"x","meshgrid",e instanceof ma?e.dtype:"float32");if(void 0===t)return[s];let r=Qa(t,"y","meshgrid",t instanceof ma?t.dtype:"float32");const a=k(s.shape),i=k(r.shape);return"xy"===n?(s=ql(s,[1,-1]),r=ql(r,[-1,1]),[Qu(Ch([i,1],s.dtype),s),Qu(r,Ch([1,a],r.dtype))]):(s=ql(s,[-1,1]),r=ql(r,[1,-1]),[Qu(s,Ch([1,i],s.dtype)),Qu(Ch([a,1],r.dtype),r)])}const fd=ni({mirrorPad_:function(e,t,n){x("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Qa(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");x(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)x(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),x(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Va.runKernel(kn,i,a)}});const md=ni({mod_:function(e,t){let n=Qa(e,"a","mod"),s=Qa(t,"b","mod");[n,s]=Da(n,s);const r={a:n,b:s};return Va.runKernel(In,r)}});const gd=ni({moments_:function(e,t=null,n=!1){const s=D(t,(e=Qa(e,"x","moments")).shape),r=Nh(e,s,n);let a=r.shape;n||(a=rh(r.shape,s));const i=dh(Lc(fl(e,"float32"),ql(r,a)));return{mean:r,variance:Nh(i,s,n)}}});const yd=ni({multiRNNCell_:function(e,t,n,s){const r=Qa(t,"data","multiRNNCell"),a=ei(n,"c","multiRNNCell"),i=ei(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const bd=ni({multinomial_:function(e,t,n,s=!1){const r=Qa(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?ql(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Va.runKernel(Sn,o,l);return 1===i?ql(u,[u.size]):u}});const xd=ni({oneHot_:function(e,t,n=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Qa(e,"indices","oneHot","int32")},i={dtype:r,depth:t,onValue:n,offValue:s};return Va.runKernel(Fn,a,i)}});const wd=ni({onesLike_:function(e){const t={x:Qa(e,"x","onesLike")};return Va.runKernel(Rn,t)}});const vd=ni({outerProduct_:function(e,t){const n=Qa(e,"v1","outerProduct"),s=Qa(t,"v2","outerProduct");x(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=ql(n,[-1,1]),a=ql(s,[1,-1]);return Qu(r,a)}});const kd=ni({pad_:function(e,t,n=0){const s=Qa(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Va.runKernel(_n,a,r)}});const Id=ni({pad1d_:function(e,t,n=0){return x(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),kd(e,[t],n)}});const Sd=ni({pad2d_:function(e,t,n=0){return x(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kd(e,t,n)}});const Nd=ni({pad3d_:function(e,t,n=0){return x(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kd(e,t,n)}});const Td=ni({pad4d_:function(e,t,n=0){return x(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),kd(e,t,n)}});const Cd=ni({spaceToBatchND_:function(e,t,n){const s=Qa(e,"x","spaceToBatchND");x(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),x(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),x(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Va.runKernel(fs,r,a)}});const $d=ni({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Qa(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=ql(o,[1,o.shape[0],o.shape[1],o.shape[2]])),x($u(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=bu(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:Cd(l,h,f),b=("avg"===n?()=>lp(y,t,a,g,i):()=>ud(y,t,a,g,i))(),w=d?b:pp(b,h,m);return u?ql(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Ed=ni({prod_:function(e,t=null,n=!1){let s=Qa(e,"x","prod");"bool"===s.dtype&&(s=fl(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Va.runKernel(zn,r,a)}});const Ad=ni({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map(((e,t)=>Qa(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Qa(t,"paramsDenseValues","raggedGather"),indices:Qa(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},i=Va.runKernel(Pn,r,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}});const Rd=ni({raggedRange_:function(e,t,n){const s=Qa(e,"starts","raggedRange"),r={starts:s,limits:Qa(t,"limits","raggedRange",s.dtype),deltas:Qa(n,"deltas","raggedRange",s.dtype)},a=Va.runKernel(Bn,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const Fd=ni({raggedTensorToTensor_:function(e,t,n,s,r){const a=Qa(e,"shape","raggedTensorToTensor","int32"),i=Qa(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:Qa(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map(((e,t)=>Qa(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:r};return Va.runKernel(Wn,o,l)}});const Dd=ni({rand_:function(e,t,n){te(e);const s=k(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Va.makeTensor(r,e,n)}});var _d={},Od=a("gj6Et"),Md=a("4gDjz"),Ld=a("HLBv4"),zd=a("ktaoY"),Pd=a("gBs5C"),Bd=a("ktLSh"),Wd={};!function(e,t,n){var s,r=256,i=n.pow(r,6),o=n.pow(2,52),l=2*o,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return s&&(n=s.randomBytes)?n=n(r):(n=new Uint8Array(r),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,i=a&&a.plugins;return[+new Date,e,i,e.screen,m(t)]}}():a,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),Wd){Wd=c;try{s=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:Wd,[],Math),Wd.alea=Od,Wd.xor128=Md,Wd.xorwow=Ld,Wd.xorshift7=zd,Wd.xor4096=Pd,Wd.tychei=Bd,_d=Wd;var Vd={};n(Vd,"TEST_EPSILON_FLOAT16",(()=>Ud)),n(Vd,"expectArraysClose",(()=>Gd)),n(Vd,"testEpsilon",(()=>Hd)),n(Vd,"expectPromiseToFail",(()=>qd)),n(Vd,"expectArraysEqual",(()=>Kd)),n(Vd,"expectNumbersClose",(()=>Xd)),n(Vd,"expectValuesInRange",(()=>Zd)),n(Vd,"expectArrayBuffersEqual",(()=>Jd)),n(Vd,"encodeStrings",(()=>Qd)),n(Vd,"createVideoElement",(()=>ef)),n(Vd,"play",(()=>tf));const Ud=.1;function Gd(e,t,n){return null==n&&(n=Hd()),jd(e,t,((e,t)=>Yd(e,t,n)))}function Hd(){return 32===Va.backend.floatPrecision()?.001:Ud}function jd(e,t,n){let s=!0;if((ta(e)||ta(t))&&(s=!1),ta(e)&&ta(t)&&(s=!0),s){const n=e.constructor.name,s=t.constructor.name;if(n!==s)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${s}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=Ya(e),s=Ya(t);if(!N(n,s))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${s}]`)}const r=ta(e)?e:na(e),a=ta(t)?t:na(t);if(r.length!==a.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${a.length}.\nActual:   ${r}.\nExpected: ${a}.`);for(let e=0;e<a.length;++e){const t=r[e],s=a[e];if(!n(t,s))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${s}.\nActual:   ${r}.\nExpected: ${a}.`)}"undefined"!=typeof expect&&expect().nothing()}function qd(e,t){e().then((()=>t.fail()),(()=>t())),"undefined"!=typeof expect&&expect().nothing()}function Kd(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return V(e)||V(e[0])||V(t)||V(t[0])?jd(e,n,((e,t)=>e==t)):jd(e,t,((e,t)=>Yd(e,t,0)))}function Xd(e,t,n){if(null==n&&(n=Hd()),!Yd(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function Yd(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Zd(e,t,n){for(let s=0;s<e.length;s++)if(e[s]<t||e[s]>n)throw new Error(`Value out of range:${e[s]} low: ${t}, high: ${n}`)}function Jd(e,t){const n=new Float32Array(e),s=new Float32Array(t);if(n.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${n.length}`);for(let e=0;e<s.length;e++)if(n[e]!==s[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${s[e]} but got ${n[e]} instead`)}function Qd(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Qd(n):e[t]=Qr(n)}return e}function ef(e){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise((e=>{t.addEventListener("loadeddata",(n=>e(t))),t.load()}))}async function tf(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise((t=>{e.requestVideoFrameCallback(t)}))}class nf{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=_d.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class sf{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=_d.alea(r.toString()),this.randn=new nf(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class rf{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=_d.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const af=ni({randomGamma_:function(e,t,n=1,s="float32",r){if(te(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new sf(t,n,s,r),i=dl(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const of=ni({randomNormal_:function(e,t=0,n=1,s,r){if(te(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new nf(t,n,s,!1,r),i=dl(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const lf=ni({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return of(e,0,1,t,n)}});const uf=ni({randomUniform_:function(e,t=0,n=1,s="float32",r){te(e);const a=dl(e,s),i=new rf(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});const cf=ni({randomUniformInt_:function(e,t,n,s){return uf(e,t,n,"int32",s)}});const hf=ni({reciprocal_:function(e){const t={x:Qa(e,"x","reciprocal")};return Va.runKernel(Gn,t)}});const pf=ni({reverse1d_:function(e){const t=Qa(e,"x","reverse");return x(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),tu(t,0)}});const df=ni({reverse2d_:function(e,t){const n=Qa(e,"x","reverse");return x(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),tu(n,t)}});const ff=ni({reverse3d_:function(e,t){const n=Qa(e,"x","reverse");return x(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),tu(n,t)}});const mf=ni({reverse4d_:function(e,t){const n=Qa(e,"x","reverse");return x(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),tu(n,t)}});const gf=ni({rsqrt_:function(e){const t={x:Qa(e,"x","rsqrt","float32")};return Va.runKernel(es,t)}});const yf=ni({selu_:function(e){const t={x:Qa(e,"x","selu")};return Va.runKernel(as,t)}});const bf=ni({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Qa(e,"x","separableConv2d"),l=Qa(t,"depthwiseFilter","separableConv2d"),u=Qa(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ql(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),x(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),x(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),x(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];x(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=Xu(c,l,s,r,i,a),m=Fu(f,u,1,"valid",i);return h?ql(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const xf=async function(e,t){const n=Qa(e,"x","setdiff1d"),s=Qa(t,"y","setdiff1d");x(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),x(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),x(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new ha([o],n.dtype),u=new ha([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const wf=ni({sign_:function(e){const t={x:Qa(e,"x","sign")};return Va.runKernel(us,t)}});const vf=ni({sin_:function(e){const t={x:Qa(e,"x","sin","float32")};return Va.runKernel(os,t)}});const kf=ni({sinh_:function(e){const t={x:Qa(e,"x","sinh")};return Va.runKernel(ls,t)}});const If=ni({slice1d_:function(e,t,n){const s=Qa(e,"x","slice1d");return x(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),Kl(s,[t],[n])}});const Sf=ni({slice2d_:function(e,t,n){const s=Qa(e,"x","slice2d");return x(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),Kl(s,t,n)}});const Nf=ni({slice3d_:function(e,t,n){const s=Qa(e,"x","slice3d");return x(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),Kl(s,t,n)}});const Tf=ni({slice4d_:function(e,t,n){const s=Qa(e,"x","slice4d");return x(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),Kl(s,t,n)}});const Cf=ni({softmax_:function(e,t=-1){const n=Qa(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Va.runKernel(gs,s,r)}});const $f=ni({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Qa(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Va.runKernel(Ns,u,c)}});const Ef=ni({tan_:function(e){const t={x:Qa(e,"x","tan","float32")};return Va.runKernel(As,t)}});function Af(e,t,n){if(v(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Ya(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ri(e,t,s,n)}function Rf(e,t,n){if(v(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Ya(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ri(e,t,s,n)}function Ff(e,t,n){if(v(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Ya(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ri(e,t,s,n)}function Df(e,t,n){if(v(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Ya(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ri(e,t=t||s,s,n)}var _f={};function Of(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Mf(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Of(n,t,e)}function Lf(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:k(t.shape)/o,sliceSize:i,strides:[...K(n.slice(0,r)),1],outputSize:k(n)}}n(_f,"validateUpdateShape",(()=>Of)),n(_f,"validateInput",(()=>Mf)),n(_f,"calculateShapes",(()=>Lf));const zf=ni({tensorScatterUpdate_:function(e,t,n){const s=Qa(e,"tensor","tensorScatterupdate"),r=Qa(t,"indices","tensorScatterupdate","int32"),a=Qa(n,"updates","tensorScatterupdate");if(Mf(a,r,s.shape),s.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);const i={tensor:s,indices:r,updates:a};return Va.runKernel(ns,i,{})}});const Pf=ni({topk_:function(e,t=1,n=!0){const s=Qa(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Va.runKernel(Ds,a,i);return{values:o,indices:l}}});const Bf=ni({truncatedNormal_:function(e,t=0,n=1,s,r){if(te(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new nf(t,n,s,!0,r),i=dl(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const Wf=ni({unique_:function(e,t=0){const n=Qa(e,"x","unique","string_or_numeric");x(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Va.runKernel(Ms,s,r);return{values:a,indices:i}}});const Vf=ni({unsortedSegmentSum_:function(e,t,n){const s=Qa(e,"x","unsortedSegmentSum"),r=Qa(t,"segmentIds","unsortedSegmentSum","int32");x(T(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Va.runKernel(zs,a,i)}});function Uf(e,t){return od(e,t,"right")}function Gf(e,t=!0,n,s){return Va.makeVariable(e,t,n,s)}function Hf(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=dl(e,"int32"),r=dl([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const jf=async function(e){const t=Qa(e,"condition","whereAsync","bool"),n=await t.data(),s=Hf(t.shape,n);return e!==t&&t.dispose(),s};var qf={};n(qf,"booleanMaskAsync",(()=>Kf));const Kf=async function(e,t,n){const s=Qa(e,"tensor","boolMask"),r=Qa(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;x(i>0,(()=>"mask cannot be scalar")),w(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=ql(s,u),h=ql(r,[-1]),p=await jf(h),d=gh(p,[1]),f=qp(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};var Xf={};n(Xf,"movingAverage",(()=>Yf));const Yf=ni({movingAverage_:function(e,t,n,s,r=!0){const a=Qa(e,"v","movingAverage"),i=Qa(t,"x","movingAverage"),o=Qa(n,"decay","movingAverage");_a(a,i),x(N(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=nu(1),u=Lc(l,o);let c=Vl(Lc(i,a),u);if(r){x(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Qa(s,"step","movingAverage");c=Wl(c,Lc(l,hh(o,e)))}return Pl(a,c)}});var Zf={};n(Zf,"scatterND",(()=>Jf));const Jf=ni({scatterND_:function(e,t,n){te(n);const s=Qa(e,"indices","scatterND","int32"),r=Qa(t,"updates","scatterND");Mf(r,s,n);const a={indices:s,updates:r},i={shape:n};return Va.runKernel(ts,a,i)}});var Qf={};n(Qf,"sparseToDense",(()=>em));const em=ni({sparseToDense_:function(e,t,n,s=0){te(n);const r=Qa(e,"sparseIndices","sparseToDense","int32"),a=Qa(t,"sparseValues","sparseToDense","string_or_numeric"),i=Qa(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Va.runKernel(vs,o,l)}});var tm={};n(tm,"gatherND",(()=>nm));const nm=ni({gatherND_:function(e,t){const n=Qa(t,"indices","gatherND","int32"),s={params:Qa(e,"x","gatherND","string_or_numeric"),indices:n};return Va.runKernel(Wt,s)}});var sm={};n(sm,"dropout",(()=>rm));const rm=ni({dropout_:function(e,t,n,s){const r=Qa(e,"x","dropout");if(x("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),x(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ma?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(N(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=Wl(jp(Pl(uf(a,0,1,"float32",s),i)),i);return Vl(r,o)}});var am={};n(am,"inTopKAsync",(()=>im));const im=async function(e,t,n=1){const s=Qa(e,"predictions","inTopK"),r=Qa(t,"targets","inTopK");x(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),x(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),w(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];x(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=O("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),ai(c,r.shape,"bool")},om={fft:Jl,ifft:eu,rfft:Ql,irfft:su},lm={hammingWindow:ac,hannWindow:ic,frame:uc,stft:cc},um={flipLeftRight:pc,grayscaleToRGB:fc,resizeNearestNeighbor:Dc,resizeBilinear:Fc,rotateWithOffset:mc,cropAndResize:hc,nonMaxSuppression:yc,nonMaxSuppressionAsync:Cc,nonMaxSuppressionWithScore:$c,nonMaxSuppressionWithScoreAsync:Ec,nonMaxSuppressionPadded:Ac,nonMaxSuppressionPaddedAsync:Rc,threshold:Vc,transform:Uc},cm={bandPart:Zc,gramSchmidt:yh,qr:Ih},hm={absoluteDifference:Eh,computeWeightedLoss:$h,cosineDistance:Ah,hingeLoss:Rh,huberLoss:Fh,logLoss:_h,meanSquaredError:Mh,sigmoidCrossEntropy:Ph,softmaxCrossEntropy:Wh},pm={sparseFillEmptyRows:Vh,sparseReshape:Uh,sparseSegmentMean:Gh,sparseSegmentSum:Hh},dm={stringNGrams:jh,stringSplit:qh,stringToHashBucketFast:Kh,staticRegexReplace:Xh};e(Ul,qf),e(Ul,wh),e(Ul,Jc),e(Ul,Xf),e(Ul,Zf),e(Ul,Qf),e(Ul,tm),e(Ul,sm),e(Ul,tc),e(Ul,am),e(Ul,ad);var fm={};n(fm,"Serializable",(()=>mm)),n(fm,"SerializationMap",(()=>gm)),n(fm,"registerClass",(()=>ym));class mm{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class gm{constructor(){this.classNameMap={}}static getMap(){return null==gm.instance&&(gm.instance=new gm),gm.instance}static register(e){gm.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function ym(e){x(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),x("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),x(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),gm.register(e)}class bm extends mm{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return Cl(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return uu(e,t)}dispose(){null!=this.iterations_&&Cl(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:nu(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(bm,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class xm extends bm{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:Tl((()=>Zl(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:Tl((()=>Zl(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;Tl((()=>{const e=Pl(Vl(a,this.rho),Vl(dh(r),1-this.rho)),t=Vl(Wl(ph(Pl(i,this.epsilon)),ph(Pl(a,this.epsilon))),r),n=Pl(Vl(i,this.rho),Vl(dh(t),1-this.rho));a.assign(e),i.assign(n);const o=Pl(Vl(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Cl(this.accumulatedGrads.map((e=>e.variable))),Cl(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}class wm extends bm{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:Tl((()=>oc(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;Tl((()=>{const e=Pl(a,dh(r));a.assign(e);const t=Pl(Vl(Wl(r,ph(Pl(e,Va.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Cl(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}class vm extends bm{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Tl((()=>{this.accBeta1=nu(t).variable(),this.accBeta2=nu(n).variable()})),null==s&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Tl((()=>{const n=Lc(1,this.accBeta1),s=Lc(1,this.accBeta2);t.forEach(((t,r)=>{const a=Va.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Tl((()=>Zl(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:Tl((()=>Zl(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=Pl(Vl(o,this.beta1),Vl(i,1-this.beta1)),c=Pl(Vl(l,this.beta2),Vl(dh(i),1-this.beta2)),h=Wl(u,n),p=Wl(c,s);o.assign(u),l.assign(c);const d=Pl(Vl(Wl(h,Pl(ph(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(Vl(this.accBeta1,this.beta1)),this.accBeta2.assign(Vl(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Cl(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&Cl(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),Tl((()=>{this.accBeta1.assign(hh(this.beta1,this.iterations_+1)),this.accBeta2.assign(hh(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}class km extends bm{static get className(){return"Adamax"}constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Tl((()=>{this.iteration=nu(0).variable(),this.accBeta1=nu(t).variable()})),null==s&&(this.epsilon=Va.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);Tl((()=>{const n=Lc(1,this.accBeta1),s=Wl(-this.learningRate,Pl(Vl(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Va.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:Zl(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:Zl(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=Pl(Vl(o,this.beta1),Vl(i,1-this.beta1)),c=Vl(l,this.beta2),h=Qc(i),p=pd(c,h);o.assign(u),l.assign(p);const d=Pl(Vl(Wl(s,n),Wl(u,Pl(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(Pl(this.iteration,1)),this.accBeta1.assign(Vl(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Cl(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&Cl(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Im extends bm{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Va.registeredVariables[t];Tl((()=>{const e=Pl(Vl(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=$l(nu(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Sm extends Im{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=nu(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:Tl((()=>Zl(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&Tl((()=>{let e;const t=Pl(Vl(this.m,r),a);e=this.useNesterov?Pl(Vl(this.c,Pl(a,Vl(t,this.m))),s):Pl(Vl(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Cl(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Nm extends bm{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Va.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Va.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:Tl((()=>Zl(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:Tl((()=>Zl(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:Tl((()=>Zl(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Tl((()=>{const e=Pl(Vl(i,this.decay),Vl(dh(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=Pl(Vl(t,this.decay),Vl(a,1-this.decay)),l=Wl(Vl(a,this.learningRate),ph(Lc(e,Pl(dh(r),this.epsilon)))),u=Pl(Vl(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=Lc(s,u);s.assign(c)}else{const e=Pl(Vl(i,this.decay),Vl(dh(a),1-this.decay)),t=Pl(Vl(o,this.momentum),Wl(Vl(a,this.learningRate),ph(Pl(e,this.epsilon))));i.assign(e),o.assign(t);const n=Lc(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Cl(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Cl(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&Cl(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const Tm=[xm,wm,vm,km,Sm,Nm,Im];var Cm={};n(Cm,"AdadeltaOptimizer",(()=>xm)),n(Cm,"AdagradOptimizer",(()=>wm)),n(Cm,"AdamOptimizer",(()=>vm)),n(Cm,"AdamaxOptimizer",(()=>km)),n(Cm,"MomentumOptimizer",(()=>Sm)),n(Cm,"Optimizer",(()=>bm)),n(Cm,"OptimizerConstructors",(()=>Hy)),n(Cm,"RMSPropOptimizer",(()=>Nm)),n(Cm,"SGDOptimizer",(()=>Im)),n(Cm,"Tensor",(()=>ma)),n(Cm,"TensorBuffer",(()=>ha)),n(Cm,"Variable",(()=>ya)),n(Cm,"Rank",(()=>ba)),n(Cm,"sumOutType",(()=>Aa)),n(Cm,"upcastType",(()=>Ea)),n(Cm,"Reduction",(()=>Sh)),n(Cm,"customGrad",(()=>cu)),n(Cm,"grad",(()=>au)),n(Cm,"grads",(()=>iu)),n(Cm,"valueAndGrad",(()=>ou)),n(Cm,"valueAndGrads",(()=>lu)),n(Cm,"variableGrads",(()=>uu)),n(Cm,"Environment",(()=>ie)),n(Cm,"env",(()=>le)),n(Cm,"ENV",(()=>ue)),n(Cm,"version_core",(()=>Ng)),n(Cm,"nextFrame",(()=>Xy)),n(Cm,"browser",(()=>Jm)),n(Cm,"io",(()=>$m)),n(Cm,"math",(()=>Ym)),n(Cm,"serialization",(()=>fm)),n(Cm,"test_util",(()=>Vd)),n(Cm,"util",(()=>lr)),n(Cm,"backend_util",(()=>Tg)),n(Cm,"broadcast_util",(()=>pu)),n(Cm,"tensor_util",(()=>Ca)),n(Cm,"slice_util",(()=>og)),n(Cm,"gather_util",(()=>ag)),n(Cm,"scatter_util",(()=>_f)),n(Cm,"device_util",(()=>Ga)),n(Cm,"kernel_impls",(()=>Gy)),n(Cm,"KernelBackend",(()=>l)),n(Cm,"DataStorage",(()=>o));var $m={};n($m,"copyModel",(()=>ll)),n($m,"listModels",(()=>il)),n($m,"moveModel",(()=>ul)),n($m,"removeModel",(()=>ol)),n($m,"browserFiles",(()=>Fm)),n($m,"browserHTTPRequest",(()=>Vm)),n($m,"concatenateArrayBuffers",(()=>ko)),n($m,"decodeWeights",(()=>bo)),n($m,"encodeWeights",(()=>yo)),n($m,"fromMemory",(()=>jm)),n($m,"fromMemorySync",(()=>qm)),n($m,"getLoadHandlers",(()=>_o)),n($m,"getModelArtifactsForJSON",(()=>To)),n($m,"getModelArtifactsForJSONSync",(()=>No)),n($m,"getModelArtifactsInfoForJSON",(()=>Co)),n($m,"getSaveHandlers",(()=>Do)),n($m,"getWeightSpecs",(()=>$o)),n($m,"http",(()=>Wm)),n($m,"isHTTPScheme",(()=>Pm)),n($m,"loadWeights",(()=>Mm)),n($m,"registerLoadRouter",(()=>Fo)),n($m,"registerSaveRouter",(()=>Ro)),n($m,"weightsLoaderFactory",(()=>Lm)),n($m,"withSaveHandler",(()=>Km)),n($m,"withSaveHandlerSync",(()=>Xm));function Em(e){return new Promise((e=>setTimeout(e))).then(e)}class Am{constructor(e){if(!le().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Am.URL_SCHEME)&&(e=e.slice(Am.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=So(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await Em((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Em((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Co(e)}}}}Am.URL_SCHEME="downloads://";class Rm{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=To(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,ko(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>Io(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=Io(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function Fm(e){return new Rm(e)}Ao.registerSaveRouter((e=>le().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Am.URL_SCHEME)?function(e="model"){return new Am(e)}(e.slice(Am.URL_SCHEME.length)):null));class Dm{constructor(e){if(this.shards=[],this.previousShardIndex=0,e instanceof Array||(e=[e]),0===(e=e.map((e=>ta(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let s=n;s<this.shards.length;s++){const n=this.shards[s],i=e+a-n.start,o=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer.slice(i,l));if(r.set(u,o),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function _m(e,t,n,s){var r,a,i;x(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),i=s=null==s?1:s,x((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),x(i>=0&&i<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`)),x(i>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${i}`));let o=0;return Promise.all(e.map((r=>(r.then((r=>{const a=n+ ++o/e.length*(s-n);return t(a),r})),r))))}async function Om(e,t){null==t&&(t={});const n=null==t.fetchFunc?le().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await _m(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await _m(r,t.onProgress,.5,1)}async function Mm(e,t="",n,s){return Lm((e=>Om(e,{requestInit:s})))(e,t,n)}function Lm(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=ii[l]*k(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length,s=new Dm(c.slice(p,p+n));a[e].forEach((e=>{const t=bo(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}class zm{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(x("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=le().platform.fetch,x(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&x(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=So(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Co(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return To(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=$o(e),i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,ko(await Om(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Pm(e){return null!=e.match(zm.URL_SCHEME_REGEX)}zm.URL_SCHEME_REGEX=/^https?:\/\//;const Bm=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Pm(e))):Pm(e),n)return Wm(e,t)}return null};function Wm(e,t){return new zm(e,t)}function Vm(e,t){return Wm(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */Ao.registerSaveRouter(Bm),Ao.registerLoadRouter(Bm);class Um{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Gm{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Hm{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function jm(e,t,n,s){const r=arguments;return new Hm(qm(...r))}function qm(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Um(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Um({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Um({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}function Km(e){return new Gm(e)}function Xm(e){return new Gm(e)}var Ym={};n(Ym,"confusionMatrix",(()=>Zm));const Zm=ni({confusionMatrix_:function(e,t,n){const s=Qa(e,"labels","confusionMatrix"),r=Qa(t,"predictions","confusionMatrix");x(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),x(1===s.rank,(()=>`Expected the rank of labels to be 1, but got ${s.rank}`)),x(1===r.rank,(()=>`Expected the rank of predictions to be 1, but got ${r.rank}`)),x(s.shape[0]===r.shape[0],(()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`)),x(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const a=xd(fl(s,"int32"),n),i=xd(fl(r,"int32"),n),o=vh(a),l=Qu(o,i);return fl(l,"int32")}});var Jm={};let Qm;function eg(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=Qs(Vs,Va.backendName)){const n={pixels:e},s={numChannels:t};return Va.runKernel(Vs,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==Qm)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");Qm=new OffscreenCanvas(1,1).getContext("2d")}else Qm=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});Qm.canvas.width=l,Qm.canvas.height=u,Qm.drawImage(e,0,0,l,u),c=Qm.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return Af(h,[u,l,t],"int32")}function tg(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function ng(e,t=3){let n=null;if(le().getBool("WRAP_TO_IMAGEBITMAP")&&tg(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return eg(n,t)}async function sg(e,t){let n=Qa(e,"img","toPixels");if(!(e instanceof ma)){const e=n;n=fl(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}n(Jm,"fromPixelsAsync",(()=>ng)),n(Jm,"toPixels",(()=>sg)),n(Jm,"fromPixels",(()=>rg));const rg=ni({fromPixels_:eg});var ag={};function ig(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===k(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...K(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}n(ag,"prepareAndValidate",(()=>ig));var og={};n(og,"assertParamsValid",(()=>lg)),n(og,"maskToAxes",(()=>ug)),n(og,"computeOutShape",(()=>cg)),n(og,"stridesWithElidedDims",(()=>hg)),n(og,"getNormalizedAxes",(()=>fg)),n(og,"startIndicesWithElidedDims",(()=>mg)),n(og,"stopIndicesWithElidedDims",(()=>gg)),n(og,"startForAxis",(()=>bg)),n(og,"stopForAxis",(()=>xg)),n(og,"stridesForAxis",(()=>yg)),n(og,"isSliceContinous",(()=>wg)),n(og,"computeFlatOffset",(()=>vg)),n(og,"parseSliceParams",(()=>kg)),n(og,"sliceInfo",(()=>Ig));function lg(e,t,n){const s=e.shape.length;x(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),x(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)x(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function ug(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function cg(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function hg(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function pg(e,t,n){return n<=e?n:n-(t-1)}function dg(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function fg(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=mg(i,l,u,s,e),h=gg(o,l,u,r,e),p=hg(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=bg(i,s,a,e,t,l),h[t]=xg(o,r,a,e,t,l),p[t]=yg(a,t,l);return{begin:c,end:h,strides:p}}function mg(e,t,n,s,r){const a=[...r],i=dg(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=pg(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function gg(e,t,n,s,r){const a=[...r],i=dg(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=pg(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=d(0,a[e],r[e])}return a}function yg(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function bg(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=d(0,i,l-1),i}function xg(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?d(0,i,l):d(-1,i,l-1),i}function wg(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function vg(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function kg(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{x(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(x(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Ig(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],a=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=Sg(p.begin[t],0,p.strides[t],s,r,a),p.end[t]=Sg(p.end[t],1,p.strides[t],s,r,a);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function Sg(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}
/** @license See the LICENSE file. */const Ng="4.5.0";var Tg={};n(Tg,"fromUint8ToStringArray",(()=>Vy)),n(Tg,"fromStringArrayToUint8",(()=>Uy)),n(Tg,"slice_util",(()=>og)),n(Tg,"upcastType",(()=>Ea)),n(Tg,"segment_util",(()=>Cg));var Cg={};n(Cg,"segOpComputeOptimalWindowSize",(()=>Rg)),n(Cg,"computeOutShape",(()=>Fg)),n(Cg,"collectGatherOpShapeInfo",(()=>Dg));var $g={};n($g,"PARALLELIZE_THRESHOLD",(()=>Eg)),n($g,"computeOptimalWindowSize",(()=>Ag));const Eg=30;function Ag(e){return e<=Eg?e:q(e,Math.floor(Math.sqrt(e)))}function Rg(e,t){let n,s=!1;for(e<=Eg?(n=e,s=!0):n=q(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=q(e,n+1);return n}function Fg(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function Dg(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var _g={};function Og(e,t){const n=e[0].length;e.forEach(((e,t)=>{x(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),x(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)x(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Mg(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}n(_g,"assertParamsConsistent",(()=>Og)),n(_g,"computeOutShape",(()=>Mg));var Lg,zg={};function Pg(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function Bg(e){const t={FIRST_DIM_SIZE:Lg.FIRST_DIM_SIZE,VALUE_ROWIDS:Lg.VALUE_ROWIDS,ROW_LENGTHS:Lg.ROW_LENGTHS,ROW_SPLITS:Lg.ROW_SPLITS,ROW_LIMITS:Lg.ROW_LIMITS,ROW_STARTS:Lg.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function Wg(e){return 0===e.length?0:e[0]===Lg.FIRST_DIM_SIZE?e.length-1:e.length}function Vg(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}n(zg,"RowPartitionType",(()=>Lg)),n(zg,"combineRaggedTensorToTensorShapes",(()=>Pg)),n(zg,"getRowPartitionTypesHelper",(()=>Bg)),n(zg,"getRaggedRank",(()=>Wg)),n(zg,"validateDefaultValueShape",(()=>Vg)),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Lg||(Lg={}));var Ug={};function Gg(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}n(Ug,"getImageCenter",(()=>Gg));var Hg={};function jg(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function qg(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Kg(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Xg(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Yg(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}n(Hg,"getReshaped",(()=>jg)),n(Hg,"getPermuted",(()=>qg)),n(Hg,"getReshapedPermuted",(()=>Kg)),n(Hg,"getSliceBeginCoords",(()=>Xg)),n(Hg,"getSliceSize",(()=>Yg));var Zg={};n(Zg,"SELU_SCALEALPHA",(()=>Jg)),n(Zg,"SELU_SCALE",(()=>Qg));const Jg=1.7580993408473768,Qg=1.0507009873554805;var ey={};n(ey,"ERF_P",(()=>ty)),n(ey,"ERF_A1",(()=>ny)),n(ey,"ERF_A2",(()=>sy)),n(ey,"ERF_A3",(()=>ry)),n(ey,"ERF_A4",(()=>ay)),n(ey,"ERF_A5",(()=>iy));const ty=.3275911,ny=.254829592,sy=-.284496736,ry=1.421413741,ay=-1.453152027,iy=1.061405429;var oy={};function ly(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function uy(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function cy(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function hy(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function py(e,t){return{real:e[2*t],imag:e[2*t+1]}}function dy(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function fy(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function my(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}n(oy,"mergeRealAndImagArrays",(()=>ly)),n(oy,"splitRealAndImagArrays",(()=>uy)),n(oy,"complexWithEvenIndex",(()=>cy)),n(oy,"complexWithOddIndex",(()=>hy)),n(oy,"getComplexWithIndex",(()=>py)),n(oy,"assignToTypedArray",(()=>dy)),n(oy,"exponents",(()=>fy)),n(oy,"exponent",(()=>my));var gy={};n(gy,"decodeEinsumEquation",(()=>xy)),n(gy,"getEinsumPermutation",(()=>wy)),n(gy,"checkEinsumDimSizes",(()=>vy)),n(gy,"getEinsumComputePath",(()=>ky)),n(gy,"isIdentityPermutation",(()=>Iy));const yy="->",by=/->/g;function xy(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(by,"").length)/yy.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split(yy);x(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(o.indexOf(a[e][t]))}const u=o.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function wy(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function vy(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:x(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function ky(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Sy(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Iy(e){return e.every(((e,t)=>e===t))}function Sy(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}var Ny={};function Ty(e,t,n=0){let s=[];if("number"==typeof t)x(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{x(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}x(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}n(Ny,"prepareSplitSize",(()=>Ty));var Cy={};function $y(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Ey(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Ay(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}n(Cy,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>$y)),n(Cy,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Ey)),n(Cy,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>Ay));var Ry={};function Fy(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Dy(e,t){return`size ${e} must be non-negative, not ${t}`}function _y(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Oy(e,t){return`Input to reshape is a SparseTensor with ${k(e)}\n  dense values, but the requested shape requires a multiple of ${k(t)}. inputShape=${e} outputShape= ${t}`}function My(e,t){return`Input to reshape is a tensor with ${k(e)} dense values, but the requested shape has ${k(t)}. inputShape=${e} outputShape=${t}`}n(Ry,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Fy)),n(Ry,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Dy)),n(Ry,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>_y)),n(Ry,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>Oy)),n(Ry,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>My));var Ly={};function zy(){return"segment ids must be >= 0"}function Py(){return"segment ids are not increasing"}function By(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Wy(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Vy(e){try{return e.map((e=>ea(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Uy(e){return e.map((e=>Qr(e)))}n(Ly,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>zy)),n(Ly,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Py)),n(Ly,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>By)),n(Ly,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Wy)),e(Tg,eh),e(Tg,pu),e(Tg,_g),e(Tg,gu),e(Tg,Ou),e(Tg,$g),e(Tg,Ug),e(Tg,Hg),e(Tg,ag),e(Tg,_f),e(Tg,Zg),e(Tg,ey),e(Tg,Ks),e(Tg,oy),e(Tg,gy),e(Tg,Ny),e(Tg,Cy),e(Tg,Ry),e(Tg,Ly),e(Tg,{}),e(Tg,zg);var Gy={};n(Gy,"nonMaxSuppressionV3Impl",(()=>wc)),n(Gy,"nonMaxSuppressionV4Impl",(()=>vc)),n(Gy,"nonMaxSuppressionV5Impl",(()=>kc)),n(Gy,"whereImpl",(()=>Hf));class Hy{static sgd(e){return new Im(e)}static momentum(e,t,n=!1){return new Sm(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Nm(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new vm(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new xm(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new km(e,t,n,s,r)}static adagrad(e,t=.1){return new wm(e,t)}}var jy={};n(jy,"train",(()=>qy));const qy=Hy,Ky="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Xy(){return new Promise((e=>Ky((()=>e()))))}e(Cm,Ul),e(Cm,jy),e(Cm,yl),e(Cm,qs),e(Cm,$e),function(){for(const e of Tm)ym(e)}(),e(i,Cm);var Yy,Zy;le().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(Yy||(Yy={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(Zy||(Zy={}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const Jy={};function Qy(e){return Jy[e]}function eb(e,t,n,s,r){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,i=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd,o=e<0?t.inputNames.length+e:e;if("tensor"===a.type)return tb(t.inputNames[o],n,s,r);if("tensors"===a.type){const a=t.inputs.slice(e,i);return t.inputNames.slice(e,i).filter(((e,t)=>{var n;return"NoOp"!==(null===(n=a[t])||void 0===n?void 0:n.op)})).map((e=>tb(e,n,s,r)))}const l=tb(t.inputNames[o],n,s,r),u=l.dataSync();return"number"===a.type?u[0]:lr.toNestedArray(l.shape,u)}const i=t.attrParams[e];return i&&i.value}function tb(e,t,n,s){const[r,a]=ab(e,n);if(null!=s){const e=s.getHashTableHandleByName(r);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[rb(r,e)]));return void 0!==i?t[rb(r,i)][a]:void 0}function nb(e,t,n){return t[rb(e,n.currentContextId)]}function sb(e,t){const[n,s,r]=ab(e,t);return[rb(n,t&&t.currentContextId),s,r]}function rb(e,t){return t?`${e}-${t}`:e}function ab(e,t){if(""===e)return["",0,void 0];const n=null!=t&&null!=t.parseNodeNameCache;if(n){const n=t.parseNodeNameCache.get(e);if(null!=n)return n}const s=e.split(":");let r;if(1===s.length)r=[e,0,void 0];else{const e=s[0],t=3===s.length?s[1]:void 0;r=[e,Number(s[s.length-1]),t]}return n&&t.parseNodeNameCache.set(e,r),r}function ib(e,t,n){let s=eb("pad",e,t,n);if("explicit"===s){s=eb("explicitPaddings",e,t,n);const r=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)r[e][0]=s[2*e],r[e][1]=s[2*e+1];return r}return s}function ob(e){return e.kept?e:ml(e)}var lb={};n(lb,"json",(()=>ub));const ub=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var cb={};n(cb,"json",(()=>hb));const hb=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var pb={};n(pb,"json",(()=>db));const db=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var fb={};n(fb,"json",(()=>mb));const mb=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var gb={};n(gb,"json",(()=>yb));const yb=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var bb={};n(bb,"json",(()=>xb));const xb=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var wb={};n(wb,"json",(()=>vb));const vb=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var kb={};n(kb,"json",(()=>Ib));const Ib=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var Sb={};n(Sb,"json",(()=>Nb));const Nb=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var Tb={};n(Tb,"json",(()=>Cb));const Cb=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var $b={};n($b,"json",(()=>Eb));const Eb=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var Ab={};n(Ab,"json",(()=>Rb));const Rb=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var Fb={};n(Fb,"json",(()=>Db));const Db=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var _b={};n(_b,"json",(()=>Ob));const Ob=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var Mb={};n(Mb,"json",(()=>Lb));const Lb=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var zb={};n(zb,"json",(()=>Pb));const Pb=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var Bb={};n(Bb,"json",(()=>Wb));const Wb=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var Vb={};n(Vb,"json",(()=>Ub));const Ub=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var Gb={};n(Gb,"json",(()=>Hb));const Hb=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var jb=oi;class qb{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[lb,cb,pb,fb,gb,bb,wb,kb,Sb,Tb,$b,Ab,Fb,_b,Mb,zb,Bb,Vb,Gb].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],r=[],a=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?r.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,r]=sb(e),a=i[s];if(null!=a.outputs){const e=a.outputs.indexOf(r);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(a),a.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=sb(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=sb(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:r,placeholders:s,signature:t,functions:p};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=Qy(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let r;switch(n.type){case"string":r=Xb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Xb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":r=ax(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ax(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":r=Zb(e.attr,n.tfName,n.defaultValue||0),void 0===r&&n.tfDeprecatedName&&(r=Zb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":r=rx(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=rx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":r=Yb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Yb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":r=ox(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ox(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":r=sx(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=sx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":r=ix(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ix(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":r=ex(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=ex(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":r=tx(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=tx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":r=Qb(e.attr,n.tfName,n.defaultValue),void 0===r&&n.tfDeprecatedName&&(r=Qb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const r=[],a=[];e.signature.inputArg.forEach((e=>{const[t]=sb(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Jb(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,r.push(n),s[t]=n}));Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=sb(e),i=s[r];if(null!=i.outputs){const e=i.outputs.indexOf(a);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=sb(i[e.name]),r=s[t];null!=r&&(r.defaultOutput=n,a.push(r))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:r,outputs:a,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Kb(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=le().global;if(void 0!==t.atob)return t.atob(e);if(void 0!==jb)return new jb(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Xb(e,t,n,s=!1){const r=e[t];return null!=r?Kb(r.s,s):n}function Yb(e,t,n){const s=e[t];return s?s.b:n}function Zb(e,t,n){const s=e[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof r?r:parseInt(r,10)}function Jb(e){switch("string"==typeof e&&(e=Yy[e]),e){case Yy.DT_FLOAT:case Yy.DT_HALF:return"float32";case Yy.DT_INT32:case Yy.DT_INT64:case Yy.DT_INT8:case Yy.DT_UINT8:return"int32";case Yy.DT_BOOL:return"bool";case Yy.DT_DOUBLE:return"float32";case Yy.DT_STRING:return"string";default:return null}}function Qb(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function ex(e,t,n){const s=e[t];return s&&s.type?Jb(s.type):n}function tx(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>Jb(e))):n}function nx(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function sx(e,t,n){const s=e[t];return s&&s.shape?nx(s.shape):n}function rx(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function ax(e,t,n,s=!1){const r=e[t];return r&&r.list&&r.list.s?r.list.s.map((e=>Kb(e,s))):n}function ix(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>nx(e))):n}function ox(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class lx{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return tb(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return tb(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Zb(this.node.rawAttrs,e,t);if(null!=n.s)return Xb(this.node.rawAttrs,e,t);if(null!=n.b)return Yb(this.node.rawAttrs,e,t);if(null!=n.shape)return sx(this.node.rawAttrs,e,t);if(null!=n.type)return ex(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return rx(this.node.rawAttrs,e,t);if(null!=n.list.s)return ax(this.node.rawAttrs,e,t);if(null!=n.list.shape)return ix(this.node.rawAttrs,e,t);if(null!=n.list.b)return ox(this.node.rawAttrs,e,t);if(null!=n.list.type)return tx(this.node.rawAttrs,e,t)}return t}}var ux={};e(ux,Ul);function cx(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){lr.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const r=e[s],a=t[s];lr.assert(r<0||a<0||r===a,(()=>n+` Shapes ${e} and ${t} must match`))}}}function hx(e){return"number"!=typeof e&&!e.some((e=>e<0))}function px(e,t,n){let s=dx(e,n);const r=!hx(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach((e=>{s=dx(e.shape,s)})),!hx(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function dx(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const r=e[s],a=t[s];if(r>=0&&a>=0&&r!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=r>=0?r:a}return n}class fx{constructor(e,t,n,s,r,a,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=r,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=nu(0),$l(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),cx(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,$l(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ai([],[0].concat(this.elementShape));const n=this.readMany(e);return cx(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Xc(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ai([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return cx(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Gl(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Yc(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const r=0===n?0:t.size/n,a=[];Tl((()=>{t=ql(t,[1,n,r]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],r];a[n]=ql(Kl(t,i,o),this.elementShape)}return a}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,a)}}class mx{get id(){return this.idTensor.id}constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);cx(t,e.shape,"TensorList shape mismatch: "),$l(e)})),this.idTensor=nu(0),this.maxNumElements=s,$l(this.idTensor)}copy(){return new mx([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);cx(e,this.elementShape,"TensorList shape mismatch: ");const s=px(this.elementShape,this.tensors,e);return Tl((()=>{const e=this.tensors.map((e=>ql(e,s)));return Xc(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=px(this.elementShape,this.tensors,e),s=this.tensors.pop();return s.kept=!1,cx(s.shape,e,"TensorList shape mismatch: "),ql(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(cx(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");$l(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new mx([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);cx(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=px(this.elementShape,this.tensors,t);return ql(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);cx(this.elementShape,t.shape,"TensorList shape mismatch: "),$l(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);cx(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=px(this.elementShape,this.tensors,n);return 0===e.length?ai([],[0].concat(s)):Tl((()=>{const t=e.map((e=>ql(this.tensors[e],s)));return Xc(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);cx(this.elementShape,t,"TensorList shape mismatch: ");const n=px(this.elementShape,this.tensors,t);return 0===this.size()?ai([],[0].concat(n)):Tl((()=>{const e=this.tensors.map((e=>ql(e,n)));return Gl(e,0)}))}}const gx=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=eb("thenBranch",e,t,n),r=eb("elseBranch",e,t,n),a=eb("cond",e,t,n),i=eb("args",e,t,n);return(await a.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=eb("body",e,t,n),r=eb("cond",e,t,n),a=eb("args",e,t,n),i=await n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),o=a.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=a;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const a=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await a[0].data(),a.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[ob(eb("pred",e,t,n))];case"Switch":{const s=eb("pred",e,t,n);let r=eb("data",e,t,n);return r.kept||(r=ob(r)),(await s.data())[0]?[void 0,r]:[r,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==tb(e,t,n)));if(s){return[ob(tb(s,t,n))]}return}case"Enter":{const s=eb("frameName",e,t,n),r=eb("tensor",e,t,n);return n.enterFrame(s),[ob(r)]}case"Exit":{const s=eb("tensor",e,t,n);return n.exitFrame(),[ob(s)]}case"NextIteration":{const s=eb("tensor",e,t,n);return n.nextIteration(),[ob(s)]}case"TensorArrayV3":{const s=eb("size",e,t,n),r=eb("dtype",e,t,n),a=eb("elementShape",e,t,n),i=eb("dynamicSize",e,t,n),o=eb("clearAfterRead",e,t,n),l=eb("identicalElementShapes",e,t,n),u=eb("name",e,t,n),c=new fx(u,r,s,a,l,i,o);return n.addTensorArray(c),[c.idTensor,nu(1)]}case"TensorArrayWriteV3":{const s=eb("tensorArrayId",e,t,n),r=eb("index",e,t,n),a=eb("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(r,a),[i.idTensor]}case"TensorArrayReadV3":{const s=eb("tensorArrayId",e,t,n),r=eb("index",e,t,n);return[n.getTensorArray(s.id).read(r)]}case"TensorArrayGatherV3":{const s=eb("tensorArrayId",e,t,n),r=eb("indices",e,t,n),a=eb("dtype",e,t,n);return[n.getTensorArray(s.id).gather(r,a)]}case"TensorArrayScatterV3":{const s=eb("tensorArrayId",e,t,n),r=eb("indices",e,t,n),a=eb("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(r,a),[i.idTensor]}case"TensorArrayConcatV3":{const s=eb("tensorArrayId",e,t,n),r=n.getTensorArray(s.id),a=eb("dtype",e,t,n);return[r.concat(a)]}case"TensorArraySplitV3":{const s=eb("tensorArrayId",e,t,n),r=eb("tensor",e,t,n),a=eb("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(a,r),[i.idTensor]}case"TensorArraySizeV3":{const s=eb("tensorArrayId",e,t,n);return[nu(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=eb("tensorArrayId",e,t,n),r=n.getTensorArray(s.id);return r.clearAndClose(),[r.idTensor]}case"TensorListSetItem":{const s=eb("tensorListId",e,t,n),r=eb("index",e,t,n),a=eb("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(r,a),[i.idTensor]}case"TensorListGetItem":{const s=eb("tensorListId",e,t,n),r=eb("index",e,t,n),a=eb("elementShape",e,t,n),i=eb("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(r,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=eb("indices",e,t,n),r=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const a=new mx([],n,e.dtype,s),i=Yc(e,0);return t.forEach(((e,t)=>{a.setItem(e,i[t])})),a}(eb("tensor",e,t,n),s,eb("elementShape",e,t,n),eb("numElements",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=eb("elementShape",e,t,n),r=eb("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=eb(a,e,t,n),o=function(e,t,n,s){return new mx([],e,t,s)}(s,r,0,"TensorListReserve"===e.op?-1:i);return n.addTensorList(o),[o.idTensor]}case"TensorListGather":{const s=eb("tensorListId",e,t,n),r=eb("indices",e,t,n),a=eb("elementShape",e,t,n),i=eb("elementDType",e,t,n);return[n.getTensorList(s.id).gather(r,i,a)]}case"TensorListStack":{const s=eb("tensorListId",e,t,n),r=eb("elementShape",e,t,n),a=eb("elementDType",e,t,n),i=eb("numElements",e,t,n);return[n.getTensorList(s.id).stack(r,a,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);cx(e.shape.slice(1),t,"TensorList shape mismatch: ");const r=Yc(e);return new mx(r,t,s)}(eb("tensor",e,t,n),eb("elementShape",e,t,n),eb("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=eb("tensorListId",e,t,n),r=n.getTensorList(s.id),a=eb("dtype",e,t,n),i=eb("elementShape",e,t,n);return[r.concat(a,i)]}case"TensorListPushBack":{const s=eb("tensorListId",e,t,n),r=eb("tensor",e,t,n),a=n.getTensorList(s.id);return a.pushBack(r),[a.idTensor]}case"TensorListPopBack":{const s=eb("tensorListId",e,t,n),r=eb("elementShape",e,t,n),a=eb("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(r,a)]}case"TensorListSplit":{const s=eb("tensor",e,t,n),r=eb("elementShape",e,t,n),a=function(e,t,n){let s=0;const r=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const a=dx(e.shape.slice(1),n),i=0===s?0:e.size/s,o=Tl((()=>{const n=[];e=ql(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:r[s-1],0],l=[1,t[s],i];n[s]=ql(Kl(e,o,l),a)}return e.dispose(),n})),l=new mx([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,eb("lengths",e,t,n),r);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const s=eb("tensorListId",e,t,n);return[nu(n.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=eb("tensorListId",e,t,n),r=eb("size",e,t,n),a=n.getTensorList(s.id).resize(r);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function yx(e,t,n){const[s,r]=eb("fusedOps",e,t,n),a="biasadd"===s,i=!a,o="prelu"===r,l="fusedbatchnorm"===s,u=eb("numArgs",e,t,n);if(a){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&a&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=eb("strides",e,t,n),h=ib(e,t,n),p=eb("dataFormat",e,t,n).toUpperCase(),d=eb("dilations",e,t,n);let[f,m]=eb("args",e,t,n);i&&(m=f,f=void 0);return{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:eb("leakyreluAlpha",e,t,n)}}function bx(e,t,n){return{boxes:eb("boxes",e,t,n),scores:eb("scores",e,t,n),maxOutputSize:eb("maxOutputSize",e,t,n),iouThreshold:eb("iouThreshold",e,t,n),scoreThreshold:eb("scoreThreshold",e,t,n),softNmsSigma:eb("softNmsSigma",e,t,n)}}class xx{get id(){return this.handle.id}constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=nu(0),this.tensorMap=new Map,$l(this.handle)}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return nu(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),Tl((()=>{const e=Yc(t),s=n.length,r=e.length;lr.assert(s===r,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${r} elements.`));for(let t=0;t<s;t++){const s=n[t],r=e[t];$l(r),this.tensorMap.set(s,r)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Tl((()=>{const e=[];for(let s=0;s<n.length;s++){const r=n[s],a=this.findWithDefault(r,t);e.push(a)}return Xc(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function wx(e,t,n,s,r=Tl){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(eb("a",e,t,n),eb("b",e,t,n))];case"AddN":return[s.addN(eb("tensors",e,t,n))];case"FloorMod":case"Mod":return[s.mod(eb("a",e,t,n),eb("b",e,t,n))];case"Mul":return[s.mul(eb("a",e,t,n),eb("b",e,t,n))];case"RealDiv":case"Div":return[s.div(eb("a",e,t,n),eb("b",e,t,n))];case"DivNoNan":return[s.divNoNan(eb("a",e,t,n),eb("b",e,t,n))];case"FloorDiv":return[s.floorDiv(eb("a",e,t,n),eb("b",e,t,n))];case"Sub":return[s.sub(eb("a",e,t,n),eb("b",e,t,n))];case"Minimum":return[s.minimum(eb("a",e,t,n),eb("b",e,t,n))];case"Maximum":return[s.maximum(eb("a",e,t,n),eb("b",e,t,n))];case"Pow":return[s.pow(eb("a",e,t,n),eb("b",e,t,n))];case"SquaredDifference":return[s.squaredDifference(eb("a",e,t,n),eb("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Abs":case"ComplexAbs":return[s.abs(eb("x",e,t,n))];case"Acos":return[s.acos(eb("x",e,t,n))];case"Acosh":return[s.acosh(eb("x",e,t,n))];case"Asin":return[s.asin(eb("x",e,t,n))];case"Asinh":return[s.asinh(eb("x",e,t,n))];case"Atan":return[s.atan(eb("x",e,t,n))];case"Atan2":return[s.atan2(eb("x",e,t,n),eb("y",e,t,n))];case"Atanh":return[s.atanh(eb("x",e,t,n))];case"Ceil":return[s.ceil(eb("x",e,t,n))];case"Complex":return[s.complex(eb("real",e,t,n),eb("imag",e,t,n))];case"Cos":return[s.cos(eb("x",e,t,n))];case"Cosh":return[s.cosh(eb("x",e,t,n))];case"Elu":return[s.elu(eb("x",e,t,n))];case"Erf":return[s.erf(eb("x",e,t,n))];case"Exp":return[s.exp(eb("x",e,t,n))];case"Expm1":return[s.expm1(eb("x",e,t,n))];case"Floor":return[s.floor(eb("x",e,t,n))];case"Log":return[s.log(eb("x",e,t,n))];case"Log1p":return[s.log1p(eb("x",e,t,n))];case"Imag":return[s.imag(eb("x",e,t,n))];case"Neg":return[s.neg(eb("x",e,t,n))];case"Reciprocal":return[s.reciprocal(eb("x",e,t,n))];case"Real":return[s.real(eb("x",e,t,n))];case"Relu":return[s.relu(eb("x",e,t,n))];case"Round":return[s.round(eb("x",e,t,n))];case"Selu":return[s.selu(eb("x",e,t,n))];case"Sigmoid":return[s.sigmoid(eb("x",e,t,n))];case"Sin":return[s.sin(eb("x",e,t,n))];case"Sign":return[s.sign(eb("x",e,t,n))];case"Sinh":return[s.sinh(eb("x",e,t,n))];case"Softplus":return[s.softplus(eb("x",e,t,n))];case"Sqrt":return[s.sqrt(eb("x",e,t,n))];case"Square":return[s.square(eb("x",e,t,n))];case"Tanh":return[s.tanh(eb("x",e,t,n))];case"Tan":return[s.tan(eb("x",e,t,n))];case"ClipByValue":return[s.clipByValue(eb("x",e,t,n),eb("clipValueMin",e,t,n),eb("clipValueMax",e,t,n))];case"Relu6":return[s.relu6(eb("x",e,t,n))];case"Rsqrt":return[s.rsqrt(tb(e.inputNames[0],t,n))];case"LeakyRelu":return[s.leakyRelu(eb("x",e,t,n),eb("alpha",e,t,n))];case"Prelu":return[s.prelu(eb("x",e,t,n),eb("alpha",e,t,n))];case"IsNan":return[s.isNaN(tb(e.inputNames[0],t,n))];case"IsInf":return[s.isInf(tb(e.inputNames[0],t,n))];case"IsFinite":return[s.isFinite(tb(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return gx(e,t,n);case"convolution":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Conv1D":{const r=eb("stride",e,t,n),a=eb("pad",e,t,n),i=eb("dataFormat",e,t,n).toUpperCase(),o=eb("dilation",e,t,n);return[s.conv1d(eb("x",e,t,n),eb("filter",e,t,n),r,a,i,o)]}case"Conv2D":{const r=eb("strides",e,t,n),a=ib(e,t,n),i=eb("dataFormat",e,t,n).toUpperCase(),o=eb("dilations",e,t,n);return[s.conv2d(eb("x",e,t,n),eb("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=yx(e,t,n);return[s.fused.conv2d({x:eb("x",e,t,n),filter:eb("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=yx(e,t,n);return[s.fused.depthwiseConv2d({x:eb("x",e,t,n),filter:eb("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=eb("outputShape",e,t,n),a=eb("strides",e,t,n),i=ib(e,t,n);return[s.conv2dTranspose(eb("x",e,t,n),eb("filter",e,t,n),r,[a[1],a[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=eb("strides",e,t,n),a=ib(e,t,n),i=eb("dilations",e,t,n),o=eb("dataFormat",e,t,n).toUpperCase();return[s.depthwiseConv2d(eb("input",e,t,n),eb("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"Conv3D":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("dataFormat",e,t,n).toUpperCase(),o=eb("dilations",e,t,n);return[s.conv3d(eb("x",e,t,n),eb("filter",e,t,n),[r[1],r[2],r[3]],a,i,[o[1],o[2],o[3]])]}case"AvgPool":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("kernelSize",e,t,n);return[s.avgPool(eb("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("kernelSize",e,t,n);return[s.maxPool(eb("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("kernelSize",e,t,n),o=eb("includeBatchInIndex",e,t,n),{result:l,indexes:u}=s.maxPoolWithArgmax(eb("x",e,t,n),[i[1],i[2]],[r[1],r[2]],a,o);return[l,u]}case"AvgPool3D":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("kernelSize",e,t,n);return[s.avgPool3d(eb("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("kernelSize",e,t,n);return[s.maxPool3d(eb("x",e,t,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=eb("strides",e,t,n),a=eb("pad",e,t,n),i=eb("dilations",e,t,n),o=r[1],l=r[2],u=i[1],c=i[2];return[s.dilation2d(eb("x",e,t,n),eb("filter",e,t,n),[o,l],a,[u,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Fill":{const r=eb("shape",e,t,n),a=eb("dtype",e,t,n),i=eb("value",e,t,n);return[s.fill(r,i,a)]}case"LinSpace":{const r=eb("start",e,t,n),a=eb("stop",e,t,n),i=eb("num",e,t,n);return[s.linspace(r,a,i)]}case"Multinomial":{const r=eb("logits",e,t,n),a=eb("numSamples",e,t,n),i=eb("seed",e,t,n);return[s.multinomial(r,a,i)]}case"OneHot":{const r=eb("indices",e,t,n),a=eb("depth",e,t,n),i=eb("onValue",e,t,n),o=eb("offValue",e,t,n),l=eb("dtype",e,t,n);return[s.oneHot(r,a,i,o,l)]}case"Ones":return[s.ones(eb("shape",e,t,n),eb("dtype",e,t,n))];case"OnesLike":return[s.onesLike(eb("x",e,t,n))];case"RandomStandardNormal":return[s.randomStandardNormal(eb("shape",e,t,n),eb("dtype",e,t,n),eb("seed",e,t,n))];case"RandomUniform":return[s.randomUniform(eb("shape",e,t,n),eb("minval",e,t,n),eb("maxval",e,t,n),eb("dtype",e,t,n))];case"RandomUniformInt":return[s.randomUniformInt(eb("shape",e,t,n),eb("minval",e,t,n),eb("maxval",e,t,n),eb("seed",e,t,n))];case"Range":{const r=eb("start",e,t,n),a=eb("stop",e,t,n),i=eb("step",e,t,n);return[s.range(r,a,i,eb("dtype",e,t,n))]}case"TruncatedNormal":{const r=eb("shape",e,t,n),a=eb("mean",e,t,n),i=eb("stdDev",e,t,n),o=eb("seed",e,t,n);return[s.truncatedNormal(r,a,i,eb("dtype",e,t,n),o)]}case"Zeros":return[s.zeros(eb("shape",e,t,n),eb("dtype",e,t,n))];case"ZerosLike":return[s.zerosLike(eb("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n,s,r=ux)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=bx(e,t,n),c=await r.image.nonMaxSuppressionWithScoreAsync(s,a,i,o,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=bx(e,t,n),u=eb("padToMaxOutputSize",e,t,n),c=await r.image.nonMaxSuppressionPaddedAsync(s,a,i,o,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=bx(e,t,n);return[await r.image.nonMaxSuppressionAsync(s,a,i,o,l)]}case"Where":{const s=r.cast(eb("condition",e,t,n),"bool"),a=[await r.whereAsync(s)];return s.dispose(),a}case"ListDiff":return r.setdiff1dAsync(eb("x",e,t,n),eb("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"LowerBound":{const r=eb("sortedSequence",e,t,n),a=eb("values",e,t,n);return[s.lowerBound(r,a)]}case"TopKV2":{const r=eb("x",e,t,n),a=eb("k",e,t,n),i=eb("sorted",e,t,n),o=s.topk(r,a,i);return[o.values,o.indices]}case"UpperBound":{const r=eb("sortedSequence",e,t,n),a=eb("values",e,t,n);return[s.upperBound(r,a)]}case"Unique":{const r=eb("x",e,t,n),a=s.unique(r);return[a.values,a.indices]}case"UniqueV2":{const r=eb("x",e,t,n),a=eb("axis",e,t,n),i=s.unique(r,a);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"image":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"ResizeBilinear":{const r=eb("images",e,t,n),a=eb("size",e,t,n),i=eb("alignCorners",e,t,n),o=eb("halfPixelCenters",e,t,n);return[s.image.resizeBilinear(r,[a[0],a[1]],i,o)]}case"ResizeNearestNeighbor":{const r=eb("images",e,t,n),a=eb("size",e,t,n),i=eb("alignCorners",e,t,n),o=eb("halfPixelCenters",e,t,n);return[s.image.resizeNearestNeighbor(r,[a[0],a[1]],i,o)]}case"CropAndResize":{const r=eb("image",e,t,n),a=eb("boxes",e,t,n),i=eb("boxInd",e,t,n),o=eb("cropSize",e,t,n),l=eb("method",e,t,n),u=eb("extrapolationValue",e,t,n);return[s.image.cropAndResize(r,a,i,o,l,u)]}case"ImageProjectiveTransformV3":{const r=eb("images",e,t,n),a=eb("transforms",e,t,n),i=eb("outputShape",e,t,n),o=eb("fillValue",e,t,n),l=eb("interpolation",e,t,n),u=eb("fillMode",e,t,n);return[s.image.transform(r,a,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=eb("default",e,t,n);return[tb(e.name,t,n)||r];case"Placeholder":return[tb(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[ob(eb("x",e,t,n))];case"IdentityN":return eb("x",e,t,n).map((e=>ob(e)));case"Shape":return[s.tensor1d(eb("x",e,t,n).shape,"int32")];case"ShapeN":return eb("x",e,t,n).map((e=>s.tensor1d(e.shape)));case"Size":return[s.scalar(eb("x",e,t,n).size,"int32")];case"Rank":return[s.scalar(eb("x",e,t,n).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=eb("x",e,t,n),i=eb("data",e,t,n),o=eb("message",e,t,n),l=eb("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(o);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,l));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Equal":return[s.equal(eb("a",e,t,n),eb("b",e,t,n))];case"NotEqual":return[s.notEqual(eb("a",e,t,n),eb("b",e,t,n))];case"Greater":return[s.greater(eb("a",e,t,n),eb("b",e,t,n))];case"GreaterEqual":return[s.greaterEqual(eb("a",e,t,n),eb("b",e,t,n))];case"Less":return[s.less(eb("a",e,t,n),eb("b",e,t,n))];case"LessEqual":return[s.lessEqual(eb("a",e,t,n),eb("b",e,t,n))];case"LogicalAnd":return[s.logicalAnd(eb("a",e,t,n),eb("b",e,t,n))];case"LogicalNot":return[s.logicalNot(eb("a",e,t,n))];case"LogicalOr":return[s.logicalOr(eb("a",e,t,n),eb("b",e,t,n))];case"Select":case"SelectV2":return[s.where(eb("condition",e,t,n),eb("a",e,t,n),eb("b",e,t,n))];case"BitwiseAnd":return[s.bitwiseAnd(eb("a",e,t,n),eb("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(eb("a",e,t,n),eb("b",e,t,n),eb("transposeA",e,t,n),eb("transposeB",e,t,n))];case"Einsum":return[s.einsum(eb("equation",e,t,n),...eb("tensors",e,t,n))];case"Transpose":return[s.transpose(eb("x",e,t,n),eb("perm",e,t,n))];case"_FusedMatMul":const[r,a]=eb("fusedOps",e,t,n),i="biasadd"===r,o="prelu"===a,l=eb("numArgs",e,t,n),u=eb("leakyreluAlpha",e,t,n);if(i){if(o&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=eb("args",e,t,n);return[s.fused.matMul({a:eb("a",e,t,n),b:eb("b",e,t,n),transposeA:eb("transposeA",e,t,n),transposeB:eb("transposeB",e,t,n),bias:c,activation:a,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(eb("a",e,t,n),eb("numLower",e,t,n),eb("numUpper",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"EuclideanNorm":return[s.euclideanNorm(eb("x",e,t,n),eb("axis",e,t,n),eb("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(eb("x",e,t,n),eb("mean",e,t,n),eb("variance",e,t,n),eb("offset",e,t,n),eb("scale",e,t,n),eb("epsilon",e,t,n))];case"LRN":return[s.localResponseNormalization(eb("x",e,t,n),eb("radius",e,t,n),eb("bias",e,t,n),eb("alpha",e,t,n),eb("beta",e,t,n))];case"Softmax":return[s.softmax(eb("x",e,t,n))];case"LogSoftmax":return[s.logSoftmax(eb("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"ragged":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:a}=s.raggedGather(eb("paramsNestedSplits",e,t,n),eb("paramsDenseValues",e,t,n),eb("indices",e,t,n),eb("outputRaggedRank",e,t,n));return r.concat(a)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:a}=s.raggedRange(eb("starts",e,t,n),eb("limits",e,t,n),eb("splits",e,t,n));return[r,a]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(eb("shape",e,t,n),eb("values",e,t,n),eb("defaultValue",e,t,n),eb("rowPartitionTensors",e,t,n),eb("rowPartitionTypes",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Max":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.max(eb("x",e,t,n),r,a)]}case"Mean":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.mean(eb("x",e,t,n),r,a)]}case"Min":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.min(eb("x",e,t,n),r,a)]}case"Sum":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.sum(eb("x",e,t,n),r,a)]}case"All":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.all(eb("x",e,t,n),r,a)]}case"Any":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.any(eb("x",e,t,n),r,a)]}case"ArgMax":{const r=eb("axis",e,t,n);return[s.argMax(eb("x",e,t,n),r)]}case"ArgMin":{const r=eb("axis",e,t,n);return[s.argMin(eb("x",e,t,n),r)]}case"Prod":{const r=eb("axis",e,t,n),a=eb("keepDims",e,t,n);return[s.prod(eb("x",e,t,n),r,a)]}case"Cumprod":{const r=eb("axis",e,t,n),a=eb("exclusive",e,t,n),i=eb("reverse",e,t,n);return[s.cumprod(eb("x",e,t,n),r,a,i)]}case"Cumsum":{const r=eb("axis",e,t,n),a=eb("exclusive",e,t,n),i=eb("reverse",e,t,n);return[s.cumsum(eb("x",e,t,n),r,a,i)]}case"Bincount":const r=eb("x",e,t,n),a=eb("weights",e,t,n),i=eb("size",e,t,n);return[s.bincount(r,a,i)];case"DenseBincount":{const r=eb("x",e,t,n),a=eb("weights",e,t,n),i=eb("size",e,t,n),o=eb("binaryOutput",e,t,n);return[s.denseBincount(r,a,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=eb("n",e,t,n),a=eb("axis",e,t,n);let i=eb("tensors",e,t,n);return i=i.slice(0,r),[s.concat(i,a)]}case"Gather":{const r=eb("x",e,t,n),a=eb("indices",e,t,n);return[s.gather(r,s.cast(a,"int32"),0)]}case"GatherV2":{const r=eb("axis",e,t,n),a=eb("batchDims",e,t,n),i=eb("x",e,t,n),o=eb("indices",e,t,n);return[s.gather(i,s.cast(o,"int32"),r,a)]}case"Reverse":{const r=eb("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const i=eb("x",e,t,n);return[s.reverse(i,a)]}case"ReverseV2":{const r=eb("axis",e,t,n),a=eb("x",e,t,n);return[s.reverse(a,r)]}case"Slice":{const r=eb("begin",e,t,n),a=eb("size",e,t,n);return[s.slice(eb("x",e,t,n),r,a)]}case"StridedSlice":{const r=eb("begin",e,t,n),a=eb("end",e,t,n),i=eb("strides",e,t,n),o=eb("beginMask",e,t,n),l=eb("endMask",e,t,n),u=eb("ellipsisMask",e,t,n),c=eb("newAxisMask",e,t,n),h=eb("shrinkAxisMask",e,t,n),p=eb("x",e,t,n);return[s.stridedSlice(p,r,a,i,o,l,u,c,h)]}case"Pack":return Tl((()=>{const r=eb("axis",e,t,n),a=eb("tensors",e,t,n),i=a[0].shape,o=s.squeeze(a[0]).shape,l=a.map((e=>{const t=lr.arraysEqual(e.shape,i);if(!t&&!lr.arraysEqual(s.squeeze(e).shape,o))throw new Error("the input tensors shape does not match");return t?e:s.reshape(e,i)}));return[s.stack(l,r)]}));case"Unpack":{const r=eb("axis",e,t,n),a=eb("tensor",e,t,n);return s.unstack(a,r)}case"Tile":{const r=eb("reps",e,t,n);return[s.tile(eb("x",e,t,n),r)]}case"Split":case"SplitV":{const r=eb("axis",e,t,n),a=eb("numOrSizeSplits",e,t,n),i=eb("x",e,t,n);return s.split(i,a,r)}case"ScatterNd":{const r=eb("indices",e,t,n),a=eb("values",e,t,n),i=eb("shape",e,t,n);return[s.scatterND(r,a,i)]}case"GatherNd":{const r=eb("x",e,t,n),a=eb("indices",e,t,n);return[s.gatherND(r,a)]}case"SparseToDense":{const r=eb("sparseIndices",e,t,n),a=eb("outputShape",e,t,n),i=eb("sparseValues",e,t,n),o=eb("defaultValue",e,t,n);return[s.sparseToDense(r,i,a,i.dtype===o.dtype?o:s.cast(o,i.dtype))]}case"TensorScatterUpdate":{const r=eb("indices",e,t,n),a=eb("values",e,t,n),i=eb("tensor",e,t,n);return[s.tensorScatterUpdate(i,r,a)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:i,reverseIndexMap:o}=s.sparse.sparseFillEmptyRows(eb("indices",e,t,n),eb("values",e,t,n),eb("denseShape",e,t,n),eb("defaultValue",e,t,n));return[r,a,i,o]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=s.sparse.sparseReshape(eb("inputIndices",e,t,n),eb("inputShape",e,t,n),eb("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(eb("data",e,t,n),eb("indices",e,t,n),eb("segmentIds",e,t,n))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(eb("data",e,t,n),eb("indices",e,t,n),eb("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"FFT":return[s.fft(eb("x",e,t,n))];case"IFFT":return[s.ifft(eb("x",e,t,n))];case"RFFT":return[s.rfft(eb("x",e,t,n))];case"IRFFT":return[s.irfft(eb("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(eb("input",e,t,n),eb("pattern",e,t,n),eb("rewrite",e,t,n),eb("replaceGlobal",e,t,n))];case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=s.string.stringNGrams(eb("data",e,t,n),eb("dataSplits",e,t,n),eb("separator",e,t,n),eb("nGramWidths",e,t,n),eb("leftPad",e,t,n),eb("rightPad",e,t,n),eb("padWidth",e,t,n),eb("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:i}=s.string.stringSplit(eb("input",e,t,n),eb("delimiter",e,t,n),eb("skipEmpty",e,t,n));return[r,a,i]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(eb("input",e,t,n),eb("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return r((()=>((e,t,n,s=ux)=>{switch(e.op){case"Cast":return[s.cast(eb("x",e,t,n),eb("dtype",e,t,n))];case"ExpandDims":{const r=eb("axis",e,t,n);return[s.expandDims(eb("x",e,t,n),r)]}case"Squeeze":{const r=eb("axis",e,t,n);return[s.squeeze(eb("x",e,t,n),r)]}case"Reshape":return[s.reshape(eb("x",e,t,n),eb("shape",e,t,n))];case"EnsureShape":return[s.ensureShape(eb("x",e,t,n),eb("shape",e,t,n))];case"MirrorPad":return[s.mirrorPad(eb("x",e,t,n),eb("padding",e,t,n),eb("mode",e,t,n))];case"PadV2":case"Pad":return[s.pad(eb("x",e,t,n),eb("padding",e,t,n),eb("constantValue",e,t,n))];case"SpaceToBatchND":{const r=eb("blockShape",e,t,n),a=eb("paddings",e,t,n);return[s.spaceToBatchND(eb("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=eb("blockShape",e,t,n),a=eb("crops",e,t,n);return[s.batchToSpaceND(eb("x",e,t,n),r,a)]}case"DepthToSpace":{const r=eb("blockSize",e,t,n),a=eb("dataFormat",e,t,n).toUpperCase();return[s.depthToSpace(eb("x",e,t,n),r,a)]}case"BroadcastTo":return[s.broadcastTo(eb("x",e,t,n),eb("shape",e,t,n))];case"BroadcastArgs":return[s.broadcastArgs(eb("s0",e,t,n),eb("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const r=s.getHashTableHandleByName(e.name);if(null!=r)return[r];{const r=eb("keyDType",e,t,n),a=eb("valueDType",e,t,n),i=new xx(r,a);return s.addHashTable(e.name,i),[i.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const r=eb("tableHandle",e,t,n,s),a=eb("keys",e,t,n),i=eb("values",e,t,n),o=s.getHashTableById(r.id);return[await o.import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const r=eb("tableHandle",e,t,n,s),a=eb("keys",e,t,n),i=eb("defaultValue",e,t,n),o=s.getHashTableById(r.id);return[await o.find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const r=eb("tableHandle",e,t,n,s);return[s.getHashTableById(r.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=Qy(e.op);if(a&&a.customExecutor)return a.customExecutor(new lx(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return lr.isPromise(a)?a.then((e=>[].concat(e))):[].concat(a)}class vx{constructor(e={},t={},n={},s={},r){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.parseNodeNameCache=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function kx(e,t,n,s){const r=new Set,a=[];let i=null,o=null;const l=new Set,u=new Set(Object.keys(e).map((e=>ab(e)[0])));s=s||[];const c=new Set(s.map((e=>ab(e.name)[0]))),h=[...t];for(;h.length>0;){const e=h.pop();($x(e)||Ex(e)||Ax(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>r.has(e)))),r.add(e.name),null==n[e.name]&&(u.has(e.name)||c.has(e.name)||(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):a.push(e.name)))}return{inputs:e,outputs:t,usedNodes:r,missingInputs:a,dynamicNode:i,syncInputs:o}}function Ix(e,t){const{usedNodes:n,inputs:s}=t,r=Object.keys(s).map((e=>ab(e)[0])).map((t=>e.nodes[t])),a=e.initNodes||[],i=e=>n.has("string"==typeof e?e:e.name);function o(e){return[...new Map(e.map((e=>[e.name,e]))).values()]}const l=o([...r,...e.weights,...a]).filter(i),u=o([...l,...Object.values(e.nodes)]).filter(i),c=new Map(u.map((e=>[e.name,e]))),h={};for(const e of u){h[e.name]=h[e.name]||0;for(const t of e.children)i(t)||(h[t.name]=Number.POSITIVE_INFINITY),h[t.name]=(h[t.name]||0)+1}const p=Object.entries(h).filter((([,e])=>0===e)).map((([e])=>e)),d=[...p];for(;p.length>0;){const e=p.pop(),t=c.get(e);for(const e of t.children.filter(i))0==--h[e.name]&&(d.push(e.name),p.push(e.name))}const f=function(e,t){const n=new Map(e.map((e=>[e.name,e]))),s=t.map((e=>e.name)),r=new Set(s);for(;s.length>0;){const e=s.pop(),t=n.get(e);for(const e of t.children)n.has(e.name)&&!r.has(e.name)&&(r.add(e.name),s.push(e.name))}return e.filter((e=>r.has(e.name)))}(d.map((e=>c.get(e))),l);return function(e,t){const n=new Map(e.map(((e,t)=>[e.name,t]))),s=new Set(t.map((e=>e.name))),r=e=>s.has("string"==typeof e?e:e.name),a=new Set(e.map((e=>e.name))),i=e=>a.has("string"==typeof e?e:e.name);for(const t of e){for(const e of t.children.filter(i)){if(!n.has(e.name))throw new Sx(`Child ${e.name} of node ${t.name} is unreachable.`);if(n.get(t.name)>n.get(e.name))throw new Sx(`Node ${t.name} is scheduled to run after its child ${e.name}.`)}if(!r(t))for(const e of t.inputs){if(!n.has(e.name))throw new Sx(`Input ${e.name} of node ${t.name} is unreachable.`);if(n.get(e.name)>n.get(t.name))throw new Sx(`Node ${t.name} is scheduled to run before its input ${e.name}.`)}}}(f,l),f}class Sx extends Error{constructor(e){super(`NodesExecutionOrderError: ${e}`)}}const Nx=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),Tx=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),Cx=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function $x(e){return Nx.has(e.op)}function Ex(e){return Tx.has(e.op)}function Ax(e){return Cx.has(e.op)}class Rx{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Rx(e.functions[t],this)}))}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPARATOR)+"--"+s.join(this.SEPARATOR)}compile(e,t){const n=kx(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:r,syncInputs:a}=n;if(null!=r)throw new Error(`This execution contains the node '${r.name}', which has the dynamic op '${r.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(s.length>0){const n=t.map((e=>e.name)),r=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${r}]. Missing the following inputs: [${s}]`)}const i=Ix(this.graph,n),o=function(e){const t=new Map(e.map(((e,t)=>[e.name,t]))),n=Number.MAX_SAFE_INTEGER,s=e.map(((e,t)=>$x(e)?n:t)),r=e=>{const n=s[t.get(e.name)];return null==n?-1:n},a=e.map(((e,t)=>e.children.map(r).reduce(((e,t)=>Math.max(e,t)),s[t]))),i=new Map;for(let t=0;t<e.length;++t){const s=a[t];if(s===n)continue;const r=e[t],o=e[s];i.has(o.name)||i.set(o.name,[]),i.get(o.name).push(r)}return i}(i);return{orderedNodes:i,nodeLiveUntilMap:o}}cloneAndKeepTensor(e){if(null==e)return null;const t=e.clone();return $l(t),t}cloneTensorList(e){if(!e)return null;return e.map((e=>this.cloneAndKeepTensor(e)))}cloneTensorMap(e){return Object.fromEntries(Object.entries(e).map((([e,t])=>[e,this.cloneTensorList(t)])))}execute(e,t){this.disposeIntermediateTensors(),e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[ab(e)[0]])),r=t.map((e=>ab(e)[0])),a=new Set(r);let i=r.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const o=this.getCompilationKey(s,i);let l=this.compiledMap.get(o);null==l&&(l=this.compile(e,i),this.compiledMap.set(o,l));try{this.keepIntermediateTensors=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const u={},c={};return Tl((()=>{const n=new vx(this.weightMap,u,c,this.functionExecutorMap,this.parseNodeNameCache),s=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(e).forEach((t=>{const[r,a]=ab(t,n),i=[];i[a]=e[t],s[r]=i,this.keepIntermediateTensors&&(this.clonedTensorsMap[r]=this.cloneTensorList(i))}));const r=this.getFrozenTensorIds(s),{orderedNodes:i,nodeLiveUntilMap:o}=l;for(const e of i){if(s[e.name])continue;const t=wx(e,s,n,this._resourceManager);if(lr.isPromise(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);s[e.name]=t,this.keepIntermediateTensors&&(this.clonedTensorsMap[e.name]=this.cloneTensorList(t)),this.checkTensorForDisposalWithNodeLiveUntilInfo(e,s,n,r,a,o.get(e.name))}return null==this.parent&&n.dispose(r),t.map((e=>tb(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,r,a,i){if(!$x(t)&&!a.has(e)){for(const s of n[e])null!=s&&(i[s.id]=(i[s.id]||0)+t.children.length);for(const e of t.inputs){if($x(e))continue;const t=nb(e.name,n,s);if(null!=t)for(const e of t){if(!e||e.kept||r.has(e.id))continue;const t=i[e.id];1===t?(e.dispose(),delete i[e.id]):null!=t&&i[e.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(e,t,n,s,r,a){var i;if(!$x(e)&&null!=a)for(const e of a){if($x(i=e)||r.has(i.name))continue;const a=nb(e.name,t,n);for(const e of a)!e||e.kept||s.has(e.id)||e.dispose()}}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach((e=>{for(const t of e)t&&!t.isDisposed&&t.dispose()})),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}async _executeAsync(e,t,n=!1,s={},r={}){this.disposeIntermediateTensors(),n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepIntermediateTensors=le().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){this.keepIntermediateTensors=!1,console.warn(e.message)}const a=new vx(this.weightMap,s,r,this.functionExecutorMap,this.parseNodeNameCache);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap));const i=await this.executeWithControlFlow(e,a,t,n),o=t.map((e=>tb(e,i,a))),l=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id)),c=new Set([...l,...u,...this.weightIds]);return Object.values(i).forEach((e=>{e.forEach((e=>{!e||e.isDisposed||c.has(e.id)||e.dispose()}))})),null==this.parent&&a.dispose(c),o}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const r=Object.keys(e),a=r.map((e=>this.graph.nodes[ab(e)[0]])),i=n.map((e=>ab(e)[0])),o=new Set(i);let l=i.map((e=>this.graph.nodes[e]));0===l.length&&(l=this._outputs);const{usedNodes:u,missingInputs:c,dynamicNode:h,syncInputs:p}=kx(e,l,this.weightMap,this._initNodes),d=[...a,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),f=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=ab(t),r=[];r[s]=e[t],f[n]=r}));const m={},g=this.getFrozenTensorIds(f),y={};for(;d.length>0;){const e=this.processStack(a,d,t,f,y,g,o,m,u);await Promise.all(e)}null!=h||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=l.filter((e=>!$x(e)&&!tb(e.name,f,t))).map((e=>e.name));if(b.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${r}]. Consider providing the following inputs: [${c}]. ${e}`)}return f}processStack(e,t,n,s,r,a,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&eb("isConstant",e.node,s,n)&&([c]=sb(e.node.name,n)),null==s[e.node.name]){const h=wx(e.node,s,n,this._resourceManager);c||([c]=sb(e.node.name,n));const p=n.currentContext;lr.isPromise(h)?u.push(h.then((u=>(s[c]=u,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(u)),n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l),u)))):(s[c]=h,this.keepIntermediateTensors&&(this.clonedTensorsMap[c]=this.cloneTensorList(h)),this.checkTensorForDisposal(c,e.node,s,n,a,i,o),this.processChildNodes(e.node,t,n,s,r,l))}else this.processChildNodes(e.node,t,n,s,r,l)}return u}processChildNodes(e,t,n,s,r,a){e.children.forEach((e=>{const[i]=sb(e.name,n);!r[i]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!tb(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!tb(e,s,n)))&&(r[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=ab(t),r=this.graph.nodes[s];if(r.attrParams.shape&&r.attrParams.shape.value){const e=r.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));lr.assert(t,(()=>`The shape of dict['${r.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}r.attrParams.dtype&&r.attrParams.dtype.value&&lr.assert(n.dtype===r.attrParams.dtype.value,(()=>`The dtype of dict['${r.name}'] provided in model.execute(dict) must be ${r.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){var t,n;const s={};for(const r in e){const a=null===(n=null===(t=this._signature)||void 0===t?void 0:t.inputs)||void 0===n?void 0:n[r];null!=a?s[a.name]=e[r]:s[r]=e[r]}return s}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=ab(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{var t,n;const s=null===(n=null===(t=this._signature)||void 0===t?void 0:t.outputs)||void 0===n?void 0:n[e];return null!=s?s.name:e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=ab(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Fx{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Dx{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(e,t={},n=$m){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new Fx}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return lr.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Rx(qb.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=qb.Instance.transformGraph(e.modelInitializer);this.initializer=new Rx(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=e.initializerSignature}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}addStructuredOutputNames(e){if(this.structuredOutputKeys){const t={};return(e instanceof ma?[e]:e).forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return e}predict(e,t){const n=this.execute(e,this.outputNodes);return this.addStructuredOutputNames(n)}async predictAsync(e,t){const n=await this.executeAsync(e,this.outputNodes);return this.addStructuredOutputNames(n)}normalizeInputs(e){var t;if(!(e instanceof ma||Array.isArray(e))){const n=null===(t=this.signature)||void 0===t?void 0:t.inputs;if(null!=n)for(const t in n){const s=n[t];null!=s.resourceId&&(e[t]=this.resourceIdToCapturedInput[s.resourceId])}return e}e=Array.isArray(e)?e:[e];const n=Object.keys(this.resourceIdToCapturedInput).length;if(e.length+n!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-n} non-resource placeholders, while there are ${e.length} input tensors provided.`);let s=0;return this.inputNodes.reduce(((t,n)=>{var r,a,i;const o=null===(i=null===(a=null===(r=this.signature)||void 0===r?void 0:r.inputs)||void 0===a?void 0:a[n])||void 0===i?void 0:i.resourceId;return t[n]=null!=o?this.resourceIdToCapturedInput[o]:e[s++],t}),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}executeInitializerGraph(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.execute({},[]):this.initializer.execute({},Object.keys(this.initializerSignature.outputs))}async executeInitializerGraphAsync(){return null==this.initializer?[]:null==this.initializerSignature?this.initializer.executeAsync({},[]):this.initializer.executeAsync({},Object.keys(this.initializerSignature.outputs))}setResourceIdToCapturedInput(e){if(this.resourceIdToCapturedInput={},this.initializerSignature){const t=this.initializerSignature.outputs,n=Object.keys(t);for(let s=0;s<n.length;s++){const r=t[n[s]];this.resourceIdToCapturedInput[r.resourceId]=e[s]}}}execute(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()),e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Cl(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}async function _x(e,t={},n=$m){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){e.endsWith("/")||(e+="/");return`${e}model.json?tfjs-format=file`}
/** @license See the LICENSE file. */(e));const s=new Dx(e,t,n);return await s.load(),s}function Ox(e,t,n,s){return new(n||(n=Promise))((function(r,a){function i(e){try{l(s.next(e))}catch(e){a(e)}}function o(e){try{l(s.throw(e))}catch(e){a(e)}}function l(e){e.done?r(e.value):new n((function(t){t(e.value)})).then(i,o)}l((s=s.apply(e,t||[])).next())}))}function Mx(e,t){var n,s,r,a,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};function o(a){return function(o){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,s&&(r=2&a[0]?s.return:a[0]?s.throw||((r=s.return)&&r.call(s),0):s.next)&&!(r=r.call(s,a[1])).done)return r;switch(s=0,r&&(a=[2&a[0],r.value]),a[0]){case 0:case 1:r=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,s=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(r=(r=i.trys).length>0&&r[r.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!r||a[1]>r[0]&&a[1]<r[3])){i.label=a[1];break}if(6===a[0]&&i.label<r[1]){i.label=r[1],r=a;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(a);break}r[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],s=0}finally{n=r=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,o])}}return a={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a}var Lx={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},zx=224,Px={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},Bx={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};!function(){function e(e,t,n,s,r){void 0===s&&(s=-1),void 0===r&&(r=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=s,this.inputMax=r,this.normalizationConstant=(r-s)/255}e.prototype.load=function(){return Ox(this,void 0,void 0,(function(){var e,t,n,s,r=this;return Mx(this,(function(a){switch(a.label){case 0:return this.modelUrl?(e=this,[4,_x(this.modelUrl)]):[3,2];case 1:return e.model=a.sent(),[3,4];case 2:return t=Bx[this.version][this.alpha].url,n=this,[4,_x(t,{fromTFHub:!0})];case 3:n.model=a.sent(),a.label=4;case 4:return[4,(s=Tl((function(){return r.model.predict(Yl([1,zx,zx,3]))}))).data()];case 5:return a.sent(),s.dispose(),[2]}}))}))},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),Tl((function(){e instanceof ma||(e=Jm.fromPixels(e));var s=Pl(Vl(fl(e,"float32"),n.normalizationConstant),n.inputMin),r=s;e.shape[0]===zx&&e.shape[1]===zx||(r=um.resizeBilinear(s,[zx,zx],!0));var a,i=ql(r,[-1,zx,zx,3]);if(t){var o=Px[n.version],l=n.model.execute(i,o);a=gh(l,[1,2])}else{var u=n.model.predict(i);a=Kl(u,[0,1],[-1,1e3])}return a}))},e.prototype.classify=function(e,t){return void 0===t&&(t=3),Ox(this,void 0,void 0,(function(){var n,s;return Mx(this,(function(r){switch(r.label){case 0:return[4,Wx(n=this.infer(e),t)];case 1:return s=r.sent(),n.dispose(),[2,s]}}))}))}}();function Wx(e,t){return Ox(this,void 0,void 0,(function(){var n,s,r,a,i,o,l;return Mx(this,(function(u){switch(u.label){case 0:return[4,(n=Cf(e)).data()];case 1:for(s=u.sent(),n.dispose(),r=[],l=0;l<s.length;l++)r.push({value:s[l],index:l});for(r.sort((function(e,t){return t.value-e.value})),a=new Float32Array(t),i=new Int32Array(t),l=0;l<t;l++)a[l]=r[l].value,i[l]=r[l].index;for(o=[],l=0;l<i.length;l++)o.push({className:Lx[i[l]],probability:a[l]});return[2,o]}}))}))}const Vx={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,Vu(fl(n,"float32"),-1))}}},Ux={kernelName:Ae,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=dh(fl(n,"float32")),s=ph(Lc(nu(1),t));return Kc(Wl(e,s))}}}},Gx={kernelName:Re,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ph(Lc(dh(fl(n,"float32")),1));return Wl(e,t)}}}},Hx={kernelName:Fe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{let t=e;const s=fu(n.shape,r);return s.length>0&&(t=Uu(t,s)),ql(t,n.shape)},b:()=>{let t=e;const n=fu(s.shape,r);return n.length>0&&(t=Uu(t,n)),ql(t,s.shape)}}}},jx={kernelName:De,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},qx={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Zl(n)}}},Kx={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Zl(n)}}},Xx={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,ph(Lc(nu(1),dh(fl(n,"float32")))))}}},Yx={kernelName:Pe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=ph(Pl(nu(1),dh(fl(n,"float32"))));return Wl(e,t)}}}},Zx={kernelName:Ve,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{const t=Pl(dh(n),dh(s));let a=Vl(e,Wl(s,t));const i=fu(n.shape,r);return i.length>0&&(a=Uu(a,i)),ql(a,n.shape)},b:()=>{const t=Pl(dh(n),dh(s));let a=Kc(Vl(e,Wl(n,t)));const i=fu(s.shape,r);return i.length>0&&(a=Uu(a,i)),ql(a,s.shape)}}}},Jx={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,Pl(dh(fl(n,"float32")),1))}}},Qx={kernelName:We,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,Lc(nu(1),dh(fl(n,"float32"))))}}};const ew=ni({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Qa(e,"dy","avgPool3dGrad"),o=Qa(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=ql(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=ql(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),x(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),x(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Ru("avgPool3dGrad",r,a);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=Va.runKernel(je,h,p);return c?ql(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),tw={kernelName:He,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>ew(e,s,r,a,i,o)}}};const nw=ni({avgPoolGrad_:function(e,t,n,s,r){const a=Qa(e,"dy","avgPoolGrad"),i=Qa(t,"input","avgPoolGrad");x(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=ql(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=ql(a,[1,a.shape[0],a.shape[1],a.shape[2]])),x(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),x(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Va.runKernel(Ge,c,h);return u?ql(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),sw={kernelName:Ue,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>nw(e,s,r,a,i)}}},rw={kernelName:qe,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>Qu(e,r,!1,!1),b:()=>Qu(e,s,!0,!1)}:a&&!i?{a:()=>Qu(r,e,!1,!0),b:()=>Qu(s,e,!1,!1)}:{a:()=>Qu(r,e,!0,!0),b:()=>Qu(e,s,!0,!0)}:{a:()=>Qu(e,r,!1,!0),b:()=>Qu(s,e,!0,!1)}}},aw={kernelName:Ke,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>Cd(e,s,r)}}},iw={kernelName:Ze,gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>Uu(e,o,!0)}}},ow={kernelName:Qe,gradFunc:e=>({x:()=>e.clone()})},lw={kernelName:et,gradFunc:e=>({x:()=>Zl(e)})},uw={kernelName:tt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>Bc(jc(Gc(s,r),Oc(s,a)),e,Zl(e))}}},cw={kernelName:st,inputsToSave:["x"],gradFunc:Vx.gradFunc},hw={kernelName:rt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=D(r,t[0].shape)[0],i=s.map((e=>e[a]));return Xl(e,i,a).map((e=>()=>e))}},pw={kernelName:at,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return x(Cu(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>_u(s.shape,e,r,i,o,l),filter:()=>Du(s,e,r.shape,i,o,l)}}},dw={kernelName:ot,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Fu(e,r,a,i,o,1,l),filter:()=>Du(e,s,r.shape,a,i,o,l)}}};const fw=ni({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=ql(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=ql(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),x(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),x(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),x(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),x(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),x(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Va.runKernel(ut,o,l)}}),mw={kernelName:lt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;x(Cu(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>$p(i.shape,e,o,r,a),filter:()=>fw(i,e,o.shape,r,a)}}},gw={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(Kc(vf(fl(n,"float32"))),e)}}},yw={kernelName:pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(kf(fl(n,"float32")),e)}}},bw={kernelName:ft,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=ih([r],s.rank);let n=Dp(e,r,a,!i);return null!=t&&(n=vh(n,t)),n}}}},xw={kernelName:bt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;x(Cu(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return x(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),x(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),x(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),x($u(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),Ru("depthwiseConv2d",a,i),{x:()=>Zu(l.shape,e,u,r,a,o,i),filter:()=>Yu(l,e,u.shape,r,a,o,i)}}},ww={kernelName:kt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Va.runKernel(It,a,n),filter:()=>Va.runKernel(St,i,n)}}},vw={kernelName:Ct,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Va.runKernel($t,s)}}},kw={kernelName:Et,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Vl(Lh(Kc(dh(n))),2/Math.sqrt(Math.PI));return{x:()=>Vl(e,s)}}},Iw={kernelName:Rt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,n)}}},Sw={kernelName:Ft,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>ql(e,n.shape)}}},Nw={kernelName:Dt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,Lh(n))}}},Tw={kernelName:Lt,gradFunc:e=>({x:()=>Zl(e)})},Cw={kernelName:zt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{const t=Wl(e,fl(s,"float32")),a=fu(n.shape,r);return a.length>0?ql(Uu(t,a),n.shape):t},b:()=>{let t=Vl(e,fl(n,"float32"));const a=fu(s.shape,r);a.length>0&&(t=ql(Uu(t,a),s.shape));const i=dh(s);return Kc(Wl(t,fl(i,"float32")))}}}},$w={kernelName:Pt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?nu(1):o,u=fu(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=Lc(r,a),p=Vl(e,l),d=gf(Pl(i,nu(s))),f=Vl(Vl(Vl(d,d),d),nu(-.5));return{x:()=>1===a.rank?ql(Vl(Vl(e,dc(ql(d,[1,1,1,a.shape[0]]),c)),l),r.shape):ql(Vl(Vl(e,d),l),r.shape),mean:()=>{let e=Vl(Vl(d,nu(-1)),p);return 1===a.rank&&(e=Uu(e,u)),ql(e,a.shape)},variance:()=>{let e=Vl(Vl(f,h),p);return 1===a.rank&&(e=Uu(e,u)),ql(e,a.shape)},scale:()=>{const t=Vl(h,d);let n=Vl(e,t);return 1===a.rank&&(n=Uu(n,u)),ql(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=Uu(t,u)),ql(t,a.shape)}}}},Ew={kernelName:Bt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=D(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=Aw(0,l),p=Aw(l+1,l+1+c),d=Rw([o,[n],u]),f=ql(e,d),m=ql(r,[n]),g=Rw([[l],h,p]),y=vh(f,g);let b=Vf(y,m,s.shape[i]);const x=oh(g);return b=vh(b,x),b},indices:()=>r}}};function Aw(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Rw(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Fw={kernelName:Ut,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Zl(n),b:()=>Zl(s)}}},Dw={kernelName:Gt,gradFunc:e=>({x:()=>fl(e,"float32")})},_w={kernelName:qt,gradFunc:e=>({x:()=>Zl(e)})},Ow={kernelName:Kt,gradFunc:e=>({x:()=>Zl(e)})},Mw={kernelName:Xt,gradFunc:e=>({x:()=>Zl(e)})},Lw={kernelName:Yt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=Mc(s,0);return{x:()=>Bc(a,e,Vl(e,r))}}},zw={kernelName:tn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,Pl(n,1))}}},Pw={kernelName:en,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,fl(n,"float32"))}}},Bw={kernelName:on,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=Lh(s);return Lc(e,Vl(Uu(e,r,!0),t))}}}};const Ww=ni({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Va.runKernel(cn,o,l)}}),Vw={kernelName:un,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Ww(s,r,e,a,i,o,l)}}};function Uw(e,t,n,s){return t.rank<n.rank&&(t=ql(t,rh(t.shape,s))),e.rank<n.rank&&(e=ql(e,rh(e.shape,s))),{x:()=>Vl(e,fl(zp(n,t),e.dtype))}}const Gw={kernelName:pn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Uw(e,t[1],a,D(r,a.shape));return{x:()=>i.x()}}},Hw={kernelName:dn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Vl(e,fl(Gc(n,s),"float32")),b:()=>Vl(e,fl(Hc(n,s),"float32"))}}};const jw=ni({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Qa(e,"dy","maxPool3dGrad"),l=Qa(t,"input","maxPool3dGrad"),u=Qa(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=ql(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=ql(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=ql(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),x(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),x(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),x(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),Ru("maxPool3dGrad",a,i);const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=Va.runKernel(yn,f,m);return d?ql(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),qw={kernelName:gn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>jw(e,s,r,a,i,o,l)}}};const Kw=ni({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Qa(e,"dy","maxPoolGrad"),l=Qa(t,"input","maxPoolGrad"),u=Qa(n,"output","maxPoolGrad");x(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),x(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),x(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Ru("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Va.runKernel(mn,c,h)}}),Xw={kernelName:_n,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Kl(e,a,s.shape)}}};function Yw(e,t,n){const s=e.shape.length,r=s-n.length,a=Tg.getAxesPermutation(n,s);let i=e;null!=a&&(i=vh(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=ql(t,s),a=Fp(e,n,!0,!1),i=Fp(e,n,!0,!0),o=Vl(a,i);return Vl(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=Tg.getUndoAxesPermutation(a);u=vh(u,e)}return u}const Zw={kernelName:fs,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>pp(e,s,r)}}},Jw={kernelName:ms,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Gl(e,s)}}};const Qw=[Vx,Ux,Gx,Hx,jx,qx,Kx,Xx,Yx,Zx,Jx,Qx,tw,sw,rw,aw,iw,ow,lw,uw,cw,hw,dw,pw,mw,gw,yw,bw,xw,ww,{kernelName:Nt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{const t=Wl(e,fl(s,"float32")),a=fu(n.shape,r);return a.length>0?ql(Uu(t,a),n.shape):t},b:()=>{let t=Vl(e,fl(n,"float32"));const a=fu(s.shape,r);a.length>0&&(t=ql(Uu(t,a),s.shape));const i=dh(s);return Kc(Wl(t,fl(i,"float32")))}}}},vw,kw,Iw,Sw,Nw,Cw,Tw,$w,Ew,Fw,Dw,_w,Ow,Mw,Lw,zw,Pw,Bw,Vw,Gw,Gw,Hw,qw,{kernelName:fn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>Kw(e,s,r,a,i,o)}}},{kernelName:xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=D(r,s.shape),i=k(sh(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=ql(e,t);return Wl(Vl(n,Ch(s.shape,"float32")),i)}}}},{kernelName:wn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Uw(e,i,a,D(r,a.shape));return{x:()=>o.x()}}},{kernelName:vn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>Vl(e,fl(Oc(n,s),"float32")),b:()=>Vl(e,fl(Mc(n,s),"float32"))}}},{kernelName:kn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>Kl(e,a,s.shape)}}},{kernelName:In,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{const t=fu(n.shape,r);return t.length>0?ql(Uu(e,t),n.shape):e},b:()=>{const t=Vl(e,Kc(jp(Wl(n,s)))),a=fu(s.shape,r);return a.length>0?ql(Uu(t,a),s.shape):t}}}},{kernelName:Nn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{const t=Vl(e,fl(s,"float32")),a=fu(n.shape,r);return a.length>0?ql(Uu(t,a),n.shape):t},b:()=>{const t=Vl(e,fl(n,"float32")),a=fu(s.shape,r);return a.length>0?ql(Uu(t,a),s.shape):t}}}},{kernelName:Tn,gradFunc:e=>({x:()=>Kc(e)})},{kernelName:Fn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Yl(n.shape,"float32")}}},{kernelName:Rn,gradFunc:e=>({x:()=>Zl(e)})},{kernelName:Dn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return Yc(e,s).map((e=>()=>e))}},Xw,Xw,{kernelName:Mn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=mu(a.shape,i.shape);return{a:()=>{const t=fl(i,"float32");let n=Vl(e,Vl(t,hh(a,Lc(t,nu(1)))));const s=fu(a.shape,o);return s.length>0&&(n=Uu(n,s)),ql(n,a.shape)},b:()=>{const t=Mc(a,0),n=Bc(t,Dh(a),Zl(a));let s=Vl(e,Vl(r,n));const l=fu(i.shape,o);return l.length>0&&(s=Uu(s,l)),ql(s,i.shape)}}}},{kernelName:Ln,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=Mc(n,0);return{x:()=>Bc(r,e,Vl(e,s)),alpha:()=>{let t=Bc(r,Zl(e),Vl(e,n));const a=fu(s.shape,e.shape);return a.length>0&&(t=Uu(t,a)),ql(t,s.shape)}}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>Yw(s,e,a)}}},{kernelName:Gn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,Kc(dh(n)))}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=Vl(Oc(n,6),Vu(n));return{x:()=>Vl(e,fl(s,"float32"))}}},{kernelName:Hn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,fl(Vu(n),"float32"))}}},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>ql(e,n.shape)}}},{kernelName:Xn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Va.runKernel(Yn,r,n)}}},{kernelName:qn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Va.runKernel(Kn,r,n)}}},{kernelName:Jn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=D(s,e.shape);return{x:()=>tu(e,r)}}},{kernelName:Qn,gradFunc:e=>({x:()=>Zl(e)})},{kernelName:es,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Kc(Wl(e,Vl(hh(n,1.5),2)))}}},{kernelName:rs,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>fl(Zl(n),"float32"),t:()=>Vl(e,fl(n,e.dtype)),e:()=>Vl(e,fl(nd(n),e.dtype))}}},{kernelName:as,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Mc(n,nu(0)),s=nu(Jg),r=nu(Qg),a=Vl(e,r),i=Vl(Vl(e,s),Lh(fl(n,"float32")));return Bc(t,a,i)}}}},{kernelName:cs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,Vl(n,Lc(nu(1),n)))}}},{kernelName:us,gradFunc:e=>({x:()=>Zl(e)})},{kernelName:os,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(Ap(fl(n,"float32")),e)}}},{kernelName:ls,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(Rp(fl(n,"float32")),e)}}},{kernelName:is,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=kg(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>kd(e,u)}}},{kernelName:gs,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=Vl(e,s);return{logits:()=>Lc(a,Vl(Uu(a,[r],true),s))}}},{kernelName:hs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,Wu(n))}}},Zw,Zw,Jw,Jw,{kernelName:ps,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,Vl(ph(fl(n,"float32")),2))}}},{kernelName:ks,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=nu(2);return{a:()=>Vl(e,Vl(r,Lc(n,s))),b:()=>Vl(e,Vl(r,Lc(s,n)))}}},{kernelName:Is,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(e,Vl(fl(n,"float32"),2))}}},{kernelName:Ws,gradFunc:e=>({x:()=>Zl(e)})},{kernelName:Es,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=mu(n.shape,s.shape);return{a:()=>{let t=e;const s=fu(n.shape,r);return s.length>0&&(t=Uu(t,s)),ql(t,n.shape)},b:()=>{let t=e;const n=fu(s.shape,r);return n.length>0&&(t=Uu(t,n)),ql(Kc(t),s.shape)}}}},{kernelName:ds,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;D(a,s.shape).forEach((e=>{r[e]=1}));const i=ql(e,r),o=Vl(i,Ch(s.shape,"float32"));return{x:()=>o}}},{kernelName:As,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Wl(e,dh(Ap(n)))}}},{kernelName:Rs,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Vl(Lc(nu(1),dh(n)),e)}}},{kernelName:Fs,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=Zl(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=Pl(t,Kl(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=Pl(t,Kl(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=Pl(t,Kl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=Pl(t,Kl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Os,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=oh(r);return{x:()=>vh(e,a)}}},{kernelName:Ls,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>Xc(e,r)}}},{kernelName:zs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=pd(t,Zl(t)),s=qp(e,n);let r=Gc(t,nu(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=bh(r,e+1);r=jc(r,Ch(s.shape,"bool"));const i=Zl(s);return Bc(r,s,i)}(e,n)}}},{kernelName:Bs,gradFunc:e=>({x:()=>Zl(e)})}];for(const e of Qw)sr(e);function ev(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(rv(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=ev(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function tv(e,t=sv){return nv(e,t)}function nv(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(rv(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=nv(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function sv(e){return null===e?null:rv(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function rv(e){let t=!1;if(le().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ma)&&!(e instanceof Promise)&&!t)}function av(e){return ev(e,iv)}function iv(e){return e instanceof ma?{value:e.clone(),recurse:!1}:rv(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}ga().prototype.abs=function(){return this.throwIfDisposed(),Qc(this)},ga().prototype.acos=function(){return this.throwIfDisposed(),Yh(this)},ga().prototype.acosh=function(){return this.throwIfDisposed(),Zh(this)},ga().prototype.add=function(e){return this.throwIfDisposed(),Pl(this,e)},ga().prototype.all=function(e,t){return this.throwIfDisposed(),Qh(this,e,t)},ga().prototype.any=function(e,t){return this.throwIfDisposed(),ep(this,e,t)},ga().prototype.argMax=function(e){return this.throwIfDisposed(),tp(this,e)},ga().prototype.argMin=function(e){return this.throwIfDisposed(),np(this,e)},ga().prototype.asScalar=function(){return this.throwIfDisposed(),x(1===this.size,(()=>"The array must have only 1 element.")),ql(this,[])},ga().prototype.asType=function(e){return this.throwIfDisposed(),fl(this,e)},ga().prototype.as1D=function(){return this.throwIfDisposed(),ql(this,[this.size])},ga().prototype.as2D=function(e,t){return this.throwIfDisposed(),ql(this,[e,t])},ga().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),ql(this,[e,t,n])},ga().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),ql(this,[e,t,n,s])},ga().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),ql(this,[e,t,n,s,r])},ga().prototype.asin=function(){return this.throwIfDisposed(),sp(this)},ga().prototype.asinh=function(){return this.throwIfDisposed(),rp(this)},ga().prototype.atan=function(){return this.throwIfDisposed(),ap(this)},ga().prototype.atan2=function(e){return this.throwIfDisposed(),ip(this,e)},ga().prototype.atanh=function(){return this.throwIfDisposed(),op(this)},ga().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),lp(this,e,t,n,s)},ga().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),pp(this,e,t)},ga().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),dp(this,e,t,n,s,r)},ga().prototype.broadcastTo=function(e){return this.throwIfDisposed(),Pc(this,e)},ga().prototype.cast=function(e){return this.throwIfDisposed(),fl(this,e)},ga().prototype.ceil=function(){return this.throwIfDisposed(),xp(this)},ga().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),wp(this,e,t)},ga().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ma&&(e=[e]),Gl([this,...e],t)},ga().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Np(this,e,t,n,s,r,a)},ga().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),Tp(this,e,t,n,s,r)},ga().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Fu(this,e,t,n,s,r,a)},ga().prototype.cos=function(){return this.throwIfDisposed(),Ap(this)},ga().prototype.cosh=function(){return this.throwIfDisposed(),Rp(this)},ga().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Fp(this,e,t,n)},ga().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Dp(this,e,t,n)},ga().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),Op(this,e,t)},ga().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Xu(this,e,t,n,s,r,a)},ga().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),Lp(this,e,t,n,s,r)},ga().prototype.divNoNan=function(e){return this.throwIfDisposed(),Pp(this,e)},ga().prototype.div=function(e){return this.throwIfDisposed(),Wl(this,e)},ga().prototype.dot=function(e){return this.throwIfDisposed(),Bp(this,e)},ga().prototype.elu=function(){return this.throwIfDisposed(),Mu(this)},ga().prototype.equal=function(e){return this.throwIfDisposed(),zp(this,e)},ga().prototype.erf=function(){return this.throwIfDisposed(),Up(this)},ga().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),Gp(this,e,t)},ga().prototype.exp=function(){return this.throwIfDisposed(),Lh(this)},ga().prototype.expandDims=function(e){return this.throwIfDisposed(),bh(this,e)},ga().prototype.expm1=function(){return this.throwIfDisposed(),Hp(this)},ga().prototype.fft=function(){return this.throwIfDisposed(),Jl(this)},ga().prototype.flatten=function(){return this.throwIfDisposed(),ql(this,[this.size])},ga().prototype.floor=function(){return this.throwIfDisposed(),jp(this)},ga().prototype.floorDiv=function(e){return this.throwIfDisposed(),Bl(this,e)},ga().prototype.gather=function(e,t,n){return this.throwIfDisposed(),qp(this,e,t,n)},ga().prototype.greaterEqual=function(e){return this.throwIfDisposed(),Gc(this,e)},ga().prototype.greater=function(e){return this.throwIfDisposed(),Mc(this,e)},ga().prototype.ifft=function(){return this.throwIfDisposed(),eu(this)},ga().prototype.irfft=function(){return this.throwIfDisposed(),su(this)},ga().prototype.isFinite=function(){return this.throwIfDisposed(),Kp(this)},ga().prototype.isInf=function(){return this.throwIfDisposed(),Xp(this)},ga().prototype.isNaN=function(){return this.throwIfDisposed(),Yp(this)},ga().prototype.leakyRelu=function(e){return this.throwIfDisposed(),Lu(this,e)},ga().prototype.lessEqual=function(e){return this.throwIfDisposed(),Oc(this,e)},ga().prototype.less=function(e){return this.throwIfDisposed(),Hc(this,e)},ga().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),Jp(this,e,t,n,s)},ga().prototype.logSigmoid=function(){return this.throwIfDisposed(),ed(this)},ga().prototype.logSoftmax=function(e){return this.throwIfDisposed(),td(this,e)},ga().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Bh(this,e,t)},ga().prototype.log=function(){return this.throwIfDisposed(),Dh(this)},ga().prototype.log1p=function(){return this.throwIfDisposed(),zh(this)},ga().prototype.logicalAnd=function(e){return this.throwIfDisposed(),jc(this,e)},ga().prototype.logicalNot=function(){return this.throwIfDisposed(),nd(this)},ga().prototype.logicalOr=function(e){return this.throwIfDisposed(),sd(this,e)},ga().prototype.logicalXor=function(e){return this.throwIfDisposed(),rd(this,e)},ga().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),Qu(this,e,t,n)},ga().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),ud(this,e,t,n,s)},ga().prototype.max=function(e,t){return this.throwIfDisposed(),uh(this,e,t)},ga().prototype.maximum=function(e){return this.throwIfDisposed(),pd(this,e)},ga().prototype.mean=function(e,t){return this.throwIfDisposed(),Nh(this,e,t)},ga().prototype.min=function(e,t){return this.throwIfDisposed(),ch(this,e,t)},ga().prototype.minimum=function(e){return this.throwIfDisposed(),qc(this,e)},ga().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),fd(this,e,t)},ga().prototype.mod=function(e){return this.throwIfDisposed(),md(this,e)},ga().prototype.mul=function(e){return this.throwIfDisposed(),Vl(this,e)},ga().prototype.neg=function(){return this.throwIfDisposed(),Kc(this)},ga().prototype.norm=function(e,t,n){return this.throwIfDisposed(),mh(this,e,t,n)},ga().prototype.notEqual=function(e){return this.throwIfDisposed(),Th(this,e)},ga().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),xd(this,e,t,n)},ga().prototype.onesLike=function(){return this.throwIfDisposed(),wd(this)},ga().prototype.pad=function(e,t){return this.throwIfDisposed(),kd(this,e,t)},ga().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),$d(this,e,t,n,s,r,a)},ga().prototype.pow=function(e){return this.throwIfDisposed(),hh(this,e)},ga().prototype.prelu=function(e){return this.throwIfDisposed(),zu(this,e)},ga().prototype.prod=function(e,t){return this.throwIfDisposed(),Ed(this,e,t)},ga().prototype.reciprocal=function(){return this.throwIfDisposed(),hf(this)},ga().prototype.relu=function(){return this.throwIfDisposed(),Pu(this)},ga().prototype.relu6=function(){return this.throwIfDisposed(),Bu(this)},ga().prototype.reshapeAs=function(e){return this.throwIfDisposed(),ql(this,e.shape)},ga().prototype.reshape=function(e){return this.throwIfDisposed(),ql(this,e)},ga().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Fc(this,e,t,n)},ga().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Dc(this,e,t,n)},ga().prototype.reverse=function(e){return this.throwIfDisposed(),tu(this,e)},ga().prototype.rfft=function(){return this.throwIfDisposed(),Ql(this)},ga().prototype.round=function(){return this.throwIfDisposed(),zc(this)},ga().prototype.rsqrt=function(){return this.throwIfDisposed(),gf(this)},ga().prototype.selu=function(){return this.throwIfDisposed(),yf(this)},ga().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),bf(this,e,t,n,s,r,a)},ga().prototype.sigmoid=function(){return this.throwIfDisposed(),Wu(this)},ga().prototype.sign=function(){return this.throwIfDisposed(),wf(this)},ga().prototype.sin=function(){return this.throwIfDisposed(),vf(this)},ga().prototype.sinh=function(){return this.throwIfDisposed(),kf(this)},ga().prototype.slice=function(e,t){return this.throwIfDisposed(),Kl(this,e,t)},ga().prototype.softmax=function(e){return this.throwIfDisposed(),Cf(this,e)},ga().prototype.softplus=function(){return this.throwIfDisposed(),Qp(this)},ga().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),Cd(this,e,t)},ga().prototype.split=function(e,t){return this.throwIfDisposed(),Xl(this,e,t)},ga().prototype.sqrt=function(){return this.throwIfDisposed(),ph(this)},ga().prototype.square=function(){return this.throwIfDisposed(),dh(this)},ga().prototype.squaredDifference=function(e){return this.throwIfDisposed(),Oh(this,e)},ga().prototype.squeeze=function(e){return this.throwIfDisposed(),gh(this,e)},ga().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ma?[this,e]:[this,...e];return Xc(n,t)},ga().prototype.step=function(e){return this.throwIfDisposed(),Vu(this,e)},ga().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),$f(this,e,t,n,s,r,a,i,o)},ga().prototype.sub=function(e){return this.throwIfDisposed(),Lc(this,e)},ga().prototype.sum=function(e,t){return this.throwIfDisposed(),Uu(this,e,t)},ga().prototype.tan=function(){return this.throwIfDisposed(),Ef(this)},ga().prototype.tanh=function(){return this.throwIfDisposed(),cp(this)},ga().prototype.tile=function(e){return this.throwIfDisposed(),dc(this,e)},ga().prototype.toBool=function(){return this.throwIfDisposed(),fl(this,"bool")},ga().prototype.toFloat=function(){return this.throwIfDisposed(),fl(this,"float32")},ga().prototype.toInt=function(){return this.throwIfDisposed(),fl(this,"int32")},ga().prototype.topk=function(e,t){return this.throwIfDisposed(),Pf(this,e,t)},ga().prototype.transpose=function(e){return this.throwIfDisposed(),vh(this,e)},ga().prototype.unique=function(e){return this.throwIfDisposed(),Wf(this,e)},ga().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Vf(this,e,t)},ga().prototype.unstack=function(e){return this.throwIfDisposed(),Yc(this,e)},ga().prototype.where=function(e,t){return this.throwIfDisposed(),Bc(e,this,t)},ga().prototype.zerosLike=function(){return this.throwIfDisposed(),Zl(this)};class ov{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class lv extends ov{constructor(){super(lv.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function uv(e){return new dv(e)}function cv(e){return new fv(e)}function hv(e,t){return new Nv(e,t)}lv.INITIAL_CAPACITY=32;class pv{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new vv(this,e)}filter(e){return new xv(this,e)}map(e){return new wv(this,e)}mapAsync(e){return new kv(this,e)}serialMapAsync(e){return new kv(this,e).serial()}flatmap(e){return new Sv(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new bv(this,e,t)}columnMajorBatch(e,t=!0,n=sv){return this.rowMajorBatch(e,t).map((e=>tv(e,n)))}concatenate(e,t){return new Nv(uv([this,e]),t)}take(e){return e<0||null==e?this:new yv(this,e)}skip(e){return e<0||null==e?this:new gv(this,e)}prefetch(e){return new Cv(this,e)}shuffle(e,t){return new $v(this,e,t)}serial(){return new mv(this)}}class dv extends pv{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:av(e),done:!1}}}class fv extends pv{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class mv extends pv{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class gv extends pv{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;Cl(e.value)}return this.upstream.next()}}class yv extends pv{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class bv extends pv{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class xv extends pv{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;Cl(e.value)}}}class wv extends pv{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ca.getTensorsInContainer(e.value),n=this.transform(e.value),s=Ca.getTensorsInContainer(n);for(const e of t)Ca.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class vv extends pv{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class kv extends pv{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=Ca.getTensorsInContainer(e.value),n=await this.transform(e.value),s=Ca.getTensorsInContainer(n);for(const e of t)Ca.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Iv extends pv{constructor(){super(),this.outputQueue=new lv,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Sv extends Iv{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=Ca.getTensorsInContainer(e.value),n=this.transform(e.value),s=Ca.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)Ca.isTensorInList(e,s)||e.dispose();return!0}}class Nv extends pv{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Tv;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Tv||(Tv={}));class Cv extends pv{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new ov(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class $v extends Cv{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=_d.alea(n||lr.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Ev{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return lr.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),Av((async()=>(await n.iterator()).columnMajorBatch(e,t,Rv)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,Av((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,Av((async()=>(await t.iterator()).filter((t=>Tl((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return Av((async()=>(await t.iterator()).map((t=>Tl((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return Av((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return Av((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,Av((async()=>hv(cv((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,Av((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=_d.alea(t||lr.now().toString());return Av((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,Av((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function Av(e,t=null){return new class extends Ev{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Rv(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof ma||lr.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ma?Xc(e):ai(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Ev.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Fv(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&lr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Dv(e){return(t,n,s)=>{const r=lr.getArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function _v(e,t,n){return Ov(e,Dv(t),n)}function Ov(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;Fv(i,e);const o=a,l=o.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Tg.fromUint8ToStringArray(l)}else u=l;const c=n||i.dtype,h=t(u,c,r);return o.makeTensorInfo(i.shape,c,h)}}const Mv=_v(Ct,(e=>e>=0?e:Math.exp(e)-1)),Lv={kernelName:Ct,backendName:"cpu",kernelFunc:Mv};function zv(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Pv={kernelName:Gt,backendName:"cpu",kernelFunc:zv};function Bv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;Fv([r],"leakyRelu");const i=lr.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=lr.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Wv={kernelName:Yt,backendName:"cpu",kernelFunc:Bv};function Vv(e){return(t,n,s,r,a)=>{const i=Tg.assertAndGetBroadcastShape(t,n),o=i.length,l=lr.computeStrides(i),u=lr.sizeFromShape(i),c=lr.getTypedArrayFromDType(a,u),h=t.length,p=n.length,d=lr.computeStrides(t),f=lr.computeStrides(n),m=Tg.getBroadcastDims(t,i),g=Tg.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<c.length;++t){const n=lr.indexToLoc(t,o,l),a=n.slice(-h);m.forEach((e=>a[e]=0));const i=lr.locToIndex(a,h,d),u=n.slice(-p);g.forEach((e=>u[e]=0));const y=lr.locToIndex(u,p,f);c[t]=e(s[i],r[y])}return[c,i]}}const Uv=Vv(((e,t)=>e<0?t*e:e));function Gv(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;Fv([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Uv(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const Hv={kernelName:Ln,backendName:"cpu",kernelFunc:Gv},jv=_v(Hn,(e=>Math.max(0,e))),qv={kernelName:Hn,backendName:"cpu",kernelFunc:jv},Kv=_v(Zn,(e=>Math.min(Math.max(0,e),6))),Xv={kernelName:Zn,backendName:"cpu",kernelFunc:Kv},Yv=Dv((e=>1/(1+Math.exp(-e)))),Zv=_v(cs,(e=>1/(1+Math.exp(-e)))),Jv={kernelName:cs,backendName:"cpu",kernelFunc:Zv};function Qv(e,t,n,s,r){if("linear"===n)return zv({inputs:{x:t},backend:e});if("relu"===n)return jv({inputs:{x:t},backend:e});if("elu"===n)return Mv({inputs:{x:t},backend:e});if("relu6"===n)return Kv({inputs:{x:t},backend:e});if("prelu"===n)return Gv({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Bv({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return Zv({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function ek(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const tk={kernelName:nt,backendName:"cpu",kernelFunc:ek};function nk(e,t,n="float32"){if("complex64"===n){return ek({inputs:{real:nk(e,t,"float32"),imag:nk(e,t,"float32")},backend:e})}const s=lr.makeZerosTypedArray(lr.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function sk(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const rk={kernelName:Un,backendName:"cpu",kernelFunc:sk};function ak(e,t,n,s){if("int32"===s){return[t,"int32",Int32Array.from(e)]}if("bool"===s){const s=lr.toTypedArray([0],n),[r,a]=Vv(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function ik(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return zv({inputs:{x:r},backend:n});const e=nk(n,r.shape,r.dtype),t=ik({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=ek({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=sk({inputs:{input:r},backend:n}),t=ik({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!lr.hasEncodingLoss(r.dtype,a)){const e=zv({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(r.dataId).values,[o,l,u]=ak(i,r.shape,r.dtype,a);return n.makeTensorInfo(o,l,u)}const ok={kernelName:Qe,backendName:"cpu",kernelFunc:ik};function lk(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;Fv([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?Tg.fromUint8ToStringArray(l):l,h="string"===a.dtype?Tg.fromUint8ToStringArray(u):u,p=s||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=ik({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=ik({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=ek({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function uk(e){return(t,n,s,r,a,i)=>{const o=Tg.assertAndGetBroadcastShape(t,n),l=lr.sizeFromShape(o),u=o.length,c=lr.computeStrides(o),h=lr.getTypedArrayFromDType("float32",l),p=lr.getTypedArrayFromDType("float32",l),d=Tg.getBroadcastDims(t,o),f=Tg.getBroadcastDims(n,o),m=Tg.mergeRealAndImagArrays(s,r),g=Tg.mergeRealAndImagArrays(a,i),y=t.length,b=lr.computeStrides(t),x=n.length,w=lr.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=lr.indexToLoc(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=lr.locToIndex(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=lr.locToIndex(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const ck=Vv(((e,t)=>e+t)),hk=uk(((e,t,n,s)=>({real:e+n,imag:t+s}))),pk=lk(Fe,ck,hk),dk={kernelName:Fe,backendName:"cpu",kernelFunc:pk};function fk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=lr.sizeFromShape(r.shape),o=lr.inferFromImplicitShape(a,i),l=lr.sizeFromShape(o);lr.assert(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const mk={kernelName:jn,backendName:"cpu",kernelFunc:fk};function gk(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;Fv([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=lr.sizeFromShape(f),y=lr.sizeFromShape(m),b=pu.assertAndGetBroadcastShape(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,d]);lr.assert(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=fk({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=fk({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],S=o?v.shape[1]:v.shape[2],N=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,$=lr.computeStrides(w.shape),E=lr.computeStrides(v.shape),[A,R,F]=i?[$[0],1,$[1]]:[$[0],$[1],1],[D,_,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*S,L=dl([N,I,S],w.dtype),z=L.values,P=n.blockSize;for(let e=0;e<N;e++){const t=e%g,n=e%y;for(let s=0;s<I;s+=P){const r=Math.min(s+P,I);for(let a=0;a<S;a+=P){const i=Math.min(a+P,S);for(let o=0;o<k;o+=P){const l=Math.min(o+P,k);for(let u=s;u<r;u++)for(let s=a;s<i;s++){let r=0;for(let e=o;e<l;e++){r+=T[t*A+u*R+e*F]*C[e*D+s*_+n*O]}z[e*M+(u*S+s)]+=r}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const yk={kernelName:qe,backendName:"cpu",kernelFunc:gk};const bk={kernelName:Gs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=gk({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=pk({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Qv(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function xk(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const wk={kernelName:Ee,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Fv(t,"abs");let s=new Float32Array(lr.sizeFromShape(t.shape));return s=xk(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},vk=_v(Ae,(e=>Math.acos(e))),kk={kernelName:Ae,backendName:"cpu",kernelFunc:vk},Ik=_v(Re,(e=>Math.acosh(e))),Sk={kernelName:Re,backendName:"cpu",kernelFunc:Ik};const Nk={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Fv(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=dl(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Tk(e,t,n,s,r){const a=t.length,i=lr.sizeFromShape(t),o=lr.computeStrides(t),l=lr.computeStrides(r),u=lr.getTypedArrayFromDType(n,lr.sizeFromShape(r));for(let t=0;t<i;++t){const n=lr.indexToLoc(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[lr.locToIndex(r,a,l)]=e[t]}return u}function Ck(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;Fv(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=Tk(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const $k={kernelName:Os,backendName:"cpu",kernelFunc:Ck};const Ek={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Fv(r,"all");const o=lr.parseAxisParam(a,r.shape);let l=o;const u=Tg.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ck({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tg.getInnerMostAxes(l.length,r.shape.length)),Tg.assertAxesAreInnerMostDims("all",l,c.shape.length);const[h,p]=Tg.computeOutAndReduceShapes(c.shape,l),d=lr.sizeFromShape(p),f=lr.makeZerosTypedArray(lr.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=fk({inputs:{x:g},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Ak={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Fv(r,"any");const o=lr.parseAxisParam(a,r.shape);let l=o;const u=Tg.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ck({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tg.getInnerMostAxes(l.length,r.shape.length)),Tg.assertAxesAreInnerMostDims("any",l,c.shape.length);const[h,p]=Tg.computeOutAndReduceShapes(c.shape,l),d=lr.sizeFromShape(p),f=lr.makeZerosTypedArray(lr.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=fk({inputs:{x:g},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Rk={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Fv(r,"argMax");let i=lr.parseAxisParam(a,r.shape);const o=Tg.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ck({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tg.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Tg.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,h]=Tg.computeOutAndReduceShapes(l.shape,i),p=lr.sizeFromShape(c),d=lr.makeZerosTypedArray(p,"int32"),f=lr.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const Fk={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Fv(r,"argMin");let i=lr.parseAxisParam(a,r.shape);const o=Tg.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ck({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tg.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Tg.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,h]=Tg.computeOutAndReduceShapes(l.shape,i),p=lr.sizeFromShape(c),d=lr.makeZerosTypedArray(p,"int32"),f=lr.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},Dk=_v(ze,(e=>Math.asin(e))),_k={kernelName:ze,backendName:"cpu",kernelFunc:Dk},Ok=_v(Pe,(e=>Math.asinh(e))),Mk={kernelName:Pe,backendName:"cpu",kernelFunc:Ok},Lk=_v(Be,(e=>Math.atan(e))),zk={kernelName:Be,backendName:"cpu",kernelFunc:Lk},Pk=Vv(((e,t)=>Math.atan2(e,t))),Bk=lk(Ve,Pk),Wk={kernelName:Ve,backendName:"cpu",kernelFunc:Bk},Vk=_v(We,(e=>Math.atanh(e))),Uk={kernelName:We,backendName:"cpu",kernelFunc:Vk};function Gk(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=dl(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function Hk(e,t,n,s,r=!1,a=!1){const i=dl(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=dl(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,v=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(v,e,n,o,t)}}return i}function jk(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=dl(r.outShape,n),w=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*v,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){const N=v*i-m;let T=N;for(;T<0;)T+=u;const C=Math.min(r.inDepth,p+N),$=n+v*k;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),v=$+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=v+n*S;let k=b,I=0,N=0;for(let n=T;n<C;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>k?k=r:"avg"===a&&(I+=r,N++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?I/Math.max(N,1):k}}}}return x}const qk={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Fv(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;lr.assert(Tg.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tg.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&lr.arraysEqual(u.inShape,u.outShape))c=zv({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=lr.computeStrides(r.shape),s=Gk(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Kk={kernelName:He,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Fv(r,"avgPool3d");const c=Tg.computePool3DInfo(r.shape,a,i,1,o,l,u),h=jk(n.data.get(r.dataId).values,r.shape,r.dtype,lr.computeStrides(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Xk={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Fv([r,a],"avgPool3DGrad");const c=Tg.computePool3DInfo(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,I=w-1-c.padInfo.front,S=k-1-c.padInfo.left,N=v-1-c.padInfo.top,T=dl(a.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-N,o=r-S;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<v;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<k;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,s,r,a,t)}}}T.set(l*C,e,n,s,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Yk={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;Fv([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Tg.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=dl(i.shape,"float32"),k=1/(d*f),I=n.data.get(r.dataId).values,S=dl(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=S.get(e,s,r,t)}}v.set(i*k,e,n,s,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const Zk={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;lr.assert(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),lr.assert(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),lr.assert(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Fv([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*d[k++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function Jk(e,t,n,s,r){const a=og.isSliceContinous(s,t,n),i=lr.sizeFromShape(n),o=lr.computeStrides(s);if(a){const n=og.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=dl(s,r,"string"===r?Tg.fromUint8ToStringArray(e):e),u=dl(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Tg.fromStringArrayToUint8(u.values):u.values}function Qk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;Fv(r,"slice");const[o,l]=og.parseSliceParams(r,a,i);og.assertParamsValid(r,o,l);const u=Jk(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const eI={kernelName:is,backendName:"cpu",kernelFunc:Qk};const tI={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Fv([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=Tg.getReshaped(r.shape,a,o),u=Tg.getPermuted(l.length,a.length),c=Tg.getReshapedPermuted(r.shape,a,o),h=Tg.getSliceBeginCoords(i,a.length),p=Tg.getSliceSize(c,i,a.length),d=fk({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Ck({inputs:{x:d},backend:n,attrs:{perm:u}}),m=fk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Qk({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function nI(e,t,n,s,r){const a=lr.sizeFromShape(s),i=lr.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function sI(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=dl([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const rI={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=nI(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},aI=Vv(((e,t)=>e&t)),iI=lk(Ye,aI),oI={kernelName:Ye,backendName:"cpu",kernelFunc:iI};const lI={kernelName:Je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=Tg.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},uI=Dv((e=>Math.ceil(e))),cI=Ov(et,uI),hI={kernelName:et,backendName:"cpu",kernelFunc:cI},pI=_v(tt,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),dI={kernelName:tt,backendName:"cpu",kernelFunc:pI},fI={kernelName:st,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(lr.sizeFromShape(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function mI(e,t,n,s){const r=lr.getArrayFromDType(n,lr.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=lr.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Tg.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function gI(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const yI={kernelName:jt,backendName:"cpu",kernelFunc:gI};function bI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=lr.parseAxisParam(r,t[0].shape)[0],i=t.map((e=>e.shape));Tg.assertParamsConsistent(i,a);let o=Tg.computeOutShape(t.map((e=>e.shape)),a);if(0===lr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>lr.sizeFromShape(e.shape)>0));if(1===l.length)return zv({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map((e=>sk({inputs:{input:e},backend:n}))),t=l.map((e=>gI({inputs:{input:e},backend:n}))),s=bI({inputs:e,backend:n,attrs:{axis:a}}),r=bI({inputs:t,backend:n,attrs:{axis:a}}),i=ek({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const u=l.map((e=>{const t=lr.sizeFromShape(e.shape.slice(a));return fk({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Tg.computeOutShape(u.map((e=>e.shape)),1);const h=1===u[0].shape[0],p=mI(c,o,t[0].dtype,h),d=Tg.computeOutShape(l.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,p);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const xI={kernelName:rt,backendName:"cpu",kernelFunc:bI};function wI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Fv([r,a],"conv2d");const h=Tg.convertConv2DDataFormat(l),p=Tg.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new ha(p.outShape,r.dtype),v=lr.computeStrides(r.shape),k=lr.computeStrides(a.shape),I=v[0],S=x?v[1]:v[2],N=x?v[2]:1,T=x?1:v[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const s=n+e*$,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*S;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*N;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*T];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const vI={kernelName:at,backendName:"cpu",kernelFunc:wI};const kI={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Fv([r,a],"conv2dBackpropFilter");const h=Tg.convertConv2DDataFormat(l),p=Tg.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new ha(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=new ha(r.shape,r.dtype,v),S=new ha(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*S.get(u,c,e,o):I.get(u,i,t,n)*S.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const II={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;Fv([r,a],"conv2dBackpropInput");const h=lr.computeStrides(a.shape),p=lr.computeStrides(r.shape);let d=Tg.convertConv2DDataFormat(u);const f=Tg.computeConv2DInfo(i,a.shape,o,1,l,c,!1,d),m=new ha(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=I-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){const s=n-D,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<C;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=B*e+W*n+V*s,i=x*(I-1-r)+w*(S-1-(s*F-o))+v*t;for(let e=0;e<$;++e){c+=y[a+U*e]*b[i+e]}}}g[M*e+L*n+z*i+P*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const SI={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;Fv([r,a],"conv3d");const u=Tg.computeConv3DInfo(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new ha(u.outShape,r.dtype),v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=w.values,S=lr.computeStrides(r.shape),N=lr.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*N[1],o=i+s*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*N[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const NI={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;Fv([r,a],"conv3dBackpropFilterV2");const u=lr.computeStrides(r.shape),c=lr.computeStrides(a.shape),h=Tg.computeConv3DInfo(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new ha(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,S=n.data.get(a.dataId).values,[N,T,C,$]=c,E=n.data.get(r.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*v+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*k+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*N;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*T+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*C+n;for(let e=l;e<u;++e){const t=e*$+i;g+=E[(s+e*f-O)*D+a+o]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const TI={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;Fv([r],"conv3dBackpropInputV2");const u=lr.computeStrides(r.shape),c=lr.computeStrides(a.shape),h=Tg.computeConv3DInfo(l,a.shape,o,1,i),p=new ha(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,v,k]=u,I=n.data.get(a.dataId).values,[S,N,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-U,r=Math.max(0,Math.ceil(s/B)),a=Math.min(L,(E+s)/B);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),$=Math.min(P,(R+h)/V);let F=0;for(let n=r;n<a;++n){const r=n*B-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<$;++i){const o=x*e+w*n+v*s+k*i,l=S*(E-1-r)+N*(A-1-a)+T*(R-1-(i*V-h))+C*t;for(let e=0;e<M;++e){F+=b[o+e]*I[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},CI=_v(ht,(e=>Math.cos(e))),$I={kernelName:ht,backendName:"cpu",kernelFunc:CI},EI=_v(pt,(e=>Math.cosh(e))),AI={kernelName:pt,backendName:"cpu",kernelFunc:EI};const RI={kernelName:mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=dl([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,v=lr.computeStrides(r.shape),k=lr.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*k[2]+t*k[1]+e*k[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*v[2]+n*v[1]+i*v[0];const u=w[a];a=s+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=s+h*v[2]+r*v[1]+i*v[0];const p=w[a];a=s+m*v[2]+r*v[1]+i*v[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*v[2]+l*v[1]+i*v[0],a=s+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const FI={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Fv(r,"cumprod");const l=Tg.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Ck({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Tg.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ea(u.dtype,"int32"),p=lr.makeOnesTypedArray(lr.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?1:d[n];else{const s=m(e,t-1);p[n]=i?d[s]*p[s]:d[n]*p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Ck({inputs:{x:g},backend:n,attrs:{perm:Tg.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const DI={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Fv(r,"cumsum");const l=Tg.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Ck({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Tg.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ea(u.dtype,"int32"),p=lr.makeZerosTypedArray(lr.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Ck({inputs:{x:g},backend:n,attrs:{perm:Tg.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const _I={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=nI(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=sI(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const OI={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;lr.assert("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function MI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;Fv([r,a],"depthwiseConv2DNative");const c=lr.computeStrides(r.shape),h=lr.computeStrides(a.shape);let p=l;null==p&&(p=[1,1]),lr.assert(Tg.eitherStridesOrDilationsAreOne(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Tg.computeConv2DInfo(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new ha(d.outShape,r.dtype),I=n.data.get(r.dataId).values,S=n.data.get(a.dataId).values,N=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*k.strides[1],r=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*k.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)N[l+e]+=t*S[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const LI={kernelName:bt,backendName:"cpu",kernelFunc:MI};const zI={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;Fv([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Tg.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new ha(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,v=new ha(r.shape,r.dtype,w),k=n.data.get(a.dataId).values,I=new ha(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=v.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const PI={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;Fv([r,a],"depthwiseConv2DNativeBackpropInput");const h=lr.computeStrides(r.shape),p=lr.computeStrides(a.shape),d=Tg.computeConv2DInfo(c,a.shape,i,o,l,u,!0),f=new ha(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[S,N,T]=p,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,P=E-1-d.padInfo.left,B=D/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(_,($+s)/M);for(let i=0;i<F;++i){const o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+v*n+k*s,i=S*($-1-r)+N*(E-1-(s*L-o))+T*t;for(let e=0;e<B;++e){c+=x[a+(t*B+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const BI={kernelName:vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=lr.sizeFromShape(s.shape),a=n.data.get(s.dataId).values,i=dl([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},WI={kernelName:kt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=Tg.computeDilation2DInfo(s.shape,r.shape,a,i,"NHWC",o),C=lr.sizeFromShape(T),$=T.length,E=lr.getArrayFromDType(s.dtype,C);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*N;if(d>=0&&d<m){const i=lr.locToIndex([e,a,d,o],c,lr.computeStrides(s.shape)),f=lr.locToIndex([t,n,o],p,lr.computeStrides(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[lr.locToIndex([e,t,a,o],$,lr.computeStrides(T))]=l}}}return{dataId:l.write(lr.toTypedArray(E,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},VI={kernelName:St,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=lr.toNestedArray(s.shape,u.data.get(s.dataId).values),h=lr.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Tg.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);lr.assert(a.rank===N.length,(()=>`Error in ${St}, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=lr.toNestedArray(N,u.data.get(a.dataId).values),C=lr.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}C[o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(lr.toTypedArray(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},UI={kernelName:It,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=lr.toNestedArray(s.shape,u.data.get(s.dataId).values),h=lr.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Tg.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);lr.assert(a.rank===N.length,(()=>`Error in ${It}, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=lr.toNestedArray(N,u.data.get(a.dataId).values),C=lr.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}C[e][o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(lr.toTypedArray(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},GI=Vv(((e,t)=>e*t)),HI=uk(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),jI=lk(Nn,GI,HI),qI={kernelName:Nn,backendName:"cpu",kernelFunc:jI};function KI(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;Fv(r,"sum"),o="bool"===r.dtype?ik({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):zv({inputs:{x:r},backend:n});const l=o.shape.length,u=lr.parseAxisParam(a,o.shape),c=Tg.getAxesPermutation(u,l);let h=u,p=o;null!=c&&(p=Ck({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Tg.getInnerMostAxes(h.length,l)),Tg.assertAxesAreInnerMostDims("sum",h,p.shape.length);const[d,f]=Tg.computeOutAndReduceShapes(p.shape,h);let m=nk(n,d,Tg.upcastType(p.dtype,"int32"));const g=lr.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=fk({inputs:{x:m},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const XI={kernelName:ds,backendName:"cpu",kernelFunc:KI};const YI={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Tg.decodeEinsumEquation(r,a.length);Tg.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Tg.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Tg.getEinsumPermutation(d,l[t]);let r;Tg.isIdentityPermutation(e)?r=a[t]:(r=Ck({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);lr.arraysEqual(r.shape,i)||(r=fk({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=jI({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=KI({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const ZI={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;Fv([s,r],"eluGrad");const a=new Float32Array(lr.sizeFromShape(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=0?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},JI=Vv(((e,t)=>e===t?1:0)),QI=lk(At,JI,null,"bool"),eS={kernelName:At,backendName:"cpu",kernelFunc:QI},tS=Tg.ERF_P,nS=Tg.ERF_A1,sS=Tg.ERF_A2,rS=Tg.ERF_A3,aS=Tg.ERF_A4,iS=Tg.ERF_A5,oS=_v(Et,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+tS*n);return t*(1-((((iS*s+aS)*s+rS)*s+sS)*s+nS)*s*Math.exp(-n*n))})),lS={kernelName:Et,backendName:"cpu",kernelFunc:oS},uS=Dv((e=>Math.exp(e))),cS=Ov(Rt,uS,"float32"),hS={kernelName:Rt,backendName:"cpu",kernelFunc:cS};function pS(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(lr.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),fk({inputs:{x:r},backend:n,attrs:{shape:o}})}const dS={kernelName:Ft,backendName:"cpu",kernelFunc:pS},fS=Dv((e=>Math.expm1(e))),mS=Ov(Dt,fS),gS={kernelName:Dt,backendName:"cpu",kernelFunc:mS},yS=Vv(((e,t)=>e/t)),bS=lk(Nt,yS),xS={kernelName:Nt,backendName:"cpu",kernelFunc:bS},wS=Vv(((e,t)=>e-t)),vS=uk(((e,t,n,s)=>({real:e-n,imag:t-s}))),kS=lk(Es,wS,vS),IS={kernelName:Es,backendName:"cpu",kernelFunc:kS};function SS(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=lr.sizeFromShape(u),h=lr.getTypedArrayFromDType("float32",c),p=lr.getTypedArrayFromDType("float32",c);for(let e=0;e<r;e++){const s=Qk({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=Qk({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=ek({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=NS(i,t,n),d=Tg.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=Tg.getComplexWithIndex(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=ek({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function NS(e,t,n){const s=lr.sizeFromShape(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=TS(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",lr.createScalarValue(s,"float32")),i=zv({inputs:{x:a},backend:n}),l=xS.kernelFunc({inputs:{a:e,b:a},backend:n}),u=xS.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Tg.exponent(r*s,t,n),l=Tg.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Tg.assignToTypedArray(s,a,i,r)}return s}(Tg.mergeRealAndImagArrays(a,i),s,t);return Tg.splitRealAndImagArrays(e)}var o}function TS(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Tg.mergeRealAndImagArrays(e,t),i=n/2,o=Tg.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=ek({inputs:{real:h,imag:p},backend:r}),f=Tg.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=ek({inputs:{real:b,imag:x},backend:r}),v=TS(l,u,i,s,r),k=v.real,I=v.imag,S=[k.length],N=r.makeTensorInfo(S,"float32",k),T=r.makeTensorInfo(S,"float32",I),C=ek({inputs:{real:N,imag:T},backend:r}),$=TS(m,g,i,s,r),E=$.real,A=$.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),D=r.makeTensorInfo(R,"float32",A),_=ek({inputs:{real:F,imag:D},backend:r}),O=Tg.exponents(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),P=ek({inputs:{real:L,imag:z},backend:r}),B=jI({inputs:{a:P,b:_},backend:r}),W=pk({inputs:{a:C,b:B},backend:r}),V=kS({inputs:{a:C,b:B},backend:r}),U=sk({inputs:{input:W},backend:r}),G=sk({inputs:{input:V},backend:r}),H=gI({inputs:{input:W},backend:r}),j=gI({inputs:{input:V},backend:r}),q=bI({inputs:[U,G],backend:r,attrs:{axis:0}}),K=bI({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const CS={kernelName:_t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=lr.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=fk({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=SS(i,!1,n),l=fk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function $S(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||lr.inferDtype(r),o=lr.getArrayFromDType(i,lr.sizeFromShape(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const ES={kernelName:Ot,backendName:"cpu",kernelFunc:$S};const AS={kernelName:Mt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=lr.getTypedArrayFromDType(s.dtype,lr.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const i=Math.round(l-e-1),o=t+n+s+r;let h=c[o];if(i>=0&&i<l){h=c[t+n+i*u+r]}a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},RS=Dv((e=>Math.floor(e))),FS=Ov(Lt,RS),DS={kernelName:Lt,backendName:"cpu",kernelFunc:FS},_S=Vv(((e,t)=>Math.floor(e/t))),OS=lk(zt,_S,null,"int32"),MS={kernelName:zt,backendName:"cpu",kernelFunc:OS};const LS={kernelName:Hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=wI({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=fk({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=pk({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=pk({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=fk({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Qv(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=Qv(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}};const zS={kernelName:js,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=MI({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=pk({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Qv(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function PS(e,t,n,s,r,a,i,o,l){const u=dl([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const BS={kernelName:Wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=lr.sizeFromShape(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Tg.prepareAndValidate(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=PS(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}};function WS(e,t,n){const s=dl(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const VS={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;Fv([r,a],"gatherV2");const l=lr.parseAxisParam(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];lr.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=lr.sizeFromShape(a.shape),d=Tg.segment_util.collectGatherOpShapeInfo(r,a,l,h),f=fk({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=fk({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=WS(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},US=Vv(((e,t)=>e>t?1:0)),GS=lk(Vt,US,null,"bool"),HS={kernelName:Vt,backendName:"cpu",kernelFunc:GS},jS=Vv(((e,t)=>e>=t?1:0)),qS=lk(Ut,jS,null,"bool"),KS={kernelName:Ut,backendName:"cpu",kernelFunc:qS};const XS={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=lr.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=fk({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=SS(i,!0,n),l=fk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},YS=_v(qt,(e=>Number.isFinite(e)?1:0),"bool"),ZS={kernelName:qt,backendName:"cpu",kernelFunc:YS},JS=_v(Kt,(e=>Math.abs(e)===1/0?1:0),"bool"),QS={kernelName:Kt,backendName:"cpu",kernelFunc:JS},eN=_v(Xt,(e=>Number.isNaN(e)?1:0),"bool"),tN={kernelName:Xt,backendName:"cpu",kernelFunc:eN},nN=Vv(((e,t)=>e<t?1:0)),sN=lk(Zt,nN,null,"bool"),rN={kernelName:Zt,backendName:"cpu",kernelFunc:sN},aN=Vv(((e,t)=>e<=t?1:0)),iN=lk(Jt,aN,null,"bool"),oN={kernelName:Jt,backendName:"cpu",kernelFunc:iN};function lN(e,t,n){const s=(t-e)/(n-1),r=lr.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const uN={kernelName:Qt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=lN(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},cN=Dv((e=>Math.log(e))),hN=Ov(en,cN),pN={kernelName:en,backendName:"cpu",kernelFunc:hN},dN=_v(tn,(e=>Math.log1p(e))),fN={kernelName:tn,backendName:"cpu",kernelFunc:dN},mN=Vv(((e,t)=>e&&t)),gN=lk(nn,mN,null,"bool"),yN={kernelName:nn,backendName:"cpu",kernelFunc:gN},bN=_v(sn,(e=>e?0:1),"bool"),xN={kernelName:sn,backendName:"cpu",kernelFunc:bN},wN=Vv(((e,t)=>e||t)),vN=lk(rn,wN,null,"bool"),kN={kernelName:rn,backendName:"cpu",kernelFunc:vN};const IN={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;Fv(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=lr.sizeFromShape(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}};const SN={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;Fv(i,"LRNGrad");const h=lr.sizeFromShape(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function NN(e,t,n,s){const r=lr.getTypedArrayFromDType(s,lr.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function TN(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=lr.parseAxisParam(a,l);let h=c;const p=Tg.getAxesPermutation(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=Tk(d,l,r.dtype,p,e),h=Tg.getInnerMostAxes(h.length,u),l=e}Fv(r,"max"),Tg.assertAxesAreInnerMostDims("max",h,u);const[f,m]=Tg.computeOutAndReduceShapes(l,h),g=NN(d,lr.sizeFromShape(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;if(i){b=Tg.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:r.dtype}}const CN={kernelName:pn,backendName:"cpu",kernelFunc:TN},$N=Vv(((e,t)=>Math.max(e,t))),EN=lk(dn,$N),AN={kernelName:dn,backendName:"cpu",kernelFunc:EN};const RN={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Fv(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;lr.assert(Tg.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tg.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&lr.arraysEqual(u.inShape,u.outShape))c=zv({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=lr.computeStrides(r.shape),s=Gk(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const FN={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Fv(r,"maxPool3d");const c=Tg.computePool3DInfo(r.shape,a,i,1,o,l,u),h=jk(n.data.get(r.dataId).values,r.shape,r.dtype,lr.computeStrides(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const DN={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Fv([r,a],"maxPool3DGrad");const c=Tg.computePool3DInfo(a.shape,i,o,1,l,u),h=function(e,t){const n=dl(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let k=d;for(;k<0;)k+=l;const I=Math.min(t.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=k;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=S&&(S=o,N=n*c*h+r*c+i)}}}n.set(N,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,I=x-1-c.padInfo.top,S=dl(a.shape,"float32"),N=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-v,i=s-I,o=r-k;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=N.get(e,s,a,u,t)*p}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const _N={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;Fv([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Tg.computePool2DInfo(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=dl(p.outShape,o.dtype,Hk(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,I=dl(o.shape,"float32"),S=n.data.get(r.dataId).values,N=dl(r.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-k,a=s-v;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=N.get(e,s,o,t)*l}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const ON={kernelName:bn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Fv(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Tg.computePool2DInfo(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=Gk(e,0,n,lr.computeStrides(t),r,"max"),i=Hk(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const MN={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=lr.parseAxisParam(a,r.shape),l=Tg.computeOutAndReduceShapes(r.shape,o)[1],u=lr.sizeFromShape(l),c=[],h=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(h);const p=ik({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});c.push(p);const d=bS({inputs:{a:p,b:h},backend:n});c.push(d);const f=KI({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const LN={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Fv(r,"min");const o=lr.parseAxisParam(a,r.shape);let l=o;const u=Tg.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ck({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tg.getInnerMostAxes(l.length,r.shape.length)),Tg.assertAxesAreInnerMostDims("min",l,c.shape.length);const[h,p]=Tg.computeOutAndReduceShapes(c.shape,l),d=lr.sizeFromShape(p),f=lr.makeZerosTypedArray(lr.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=fk({inputs:{x:g},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},zN=Vv(((e,t)=>Math.min(e,t))),PN=lk(vn,zN),BN={kernelName:vn,backendName:"cpu",kernelFunc:PN};const WN={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;Fv(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=lr.computeStrides(r.shape),f=lr.sizeFromShape(o),m=o.length,g=lr.computeStrides(o),y=lr.getTypedArrayFromDType(r.dtype,f);for(let e=0;e<f;e++){let t=lr.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=lr.locToIndex(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},VN=Vv(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),UN=lk(In,VN),GN={kernelName:In,backendName:"cpu",kernelFunc:UN};function HN(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=lr.parseAxisParam([o],r.shape),u=TN({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Tg.expandShapeToKeepDim(u.shape,l),h=fk({inputs:{x:u},backend:n,attrs:{shape:c}}),p=kS({inputs:{a:r,b:h},backend:n}),d=cS({inputs:{x:p},backend:n}),f=KI({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=fk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=bS({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const jN={kernelName:gs,backendName:"cpu",kernelFunc:HN};const qN={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;Fv(r,"multinomial");const l=o?r:HN({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=lr.makeZerosTypedArray(lr.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=_d.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function KN(e,t,n){const s=lr.createScalarValue(-1,n);return GI([],t,s,e,n)}const XN={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Fv(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=KN(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},YN=Gy.nonMaxSuppressionV3Impl;const ZN={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Fv(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=YN(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},JN=Gy.nonMaxSuppressionV4Impl;const QN={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Fv(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=JN(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},eT=Gy.nonMaxSuppressionV5Impl;const tT={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Fv(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=eT(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},nT=Vv(((e,t)=>e!==t?1:0)),sT=lk(Cn,nT,null,"bool"),rT={kernelName:Cn,backendName:"cpu",kernelFunc:sT};const aT={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s;Fv(r,"oneHot");const u=lr.sizeFromShape(r.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(r.dataId).values;for(let e=0;e<u;++e)h[e]>=0&&h[e]<i&&(c[e*i+h[e]]=o);return n.makeTensorInfo([...r.shape,i],a,c)}};function iT(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=sk({inputs:{input:s},backend:n}),t=iT({inputs:{x:e},backend:n}),r=gI({inputs:{input:s},backend:n}),a=iT({inputs:{x:r},backend:n}),i=ek({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return $S({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const oT={kernelName:Bs,backendName:"cpu",kernelFunc:iT};const lT={kernelName:Rn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=sk({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=gI({inputs:{input:r},backend:s}),i=iT({inputs:{x:a},backend:s}),o=ek({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return $S({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function uT(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return pS({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{lr.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),lr.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=bI({inputs:t.map((e=>{const t=pS({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const cT={kernelName:Dn,backendName:"cpu",kernelFunc:uT};const hT={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;Fv(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=lr.sizeFromShape(r.shape),h=r.shape.length,p=lr.computeStrides(r.shape),d=lr.sizeFromShape(o),f=o.length,m=lr.computeStrides(o),g=lr.getTypedArrayFromDType(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++){const t=lr.indexToLoc(e,h,p).map(((e,t)=>e+l[t]));g[lr.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},pT=Vv(((e,t)=>Math.pow(e,t))),dT=lk(Mn,pT),fT={kernelName:Mn,backendName:"cpu",kernelFunc:dT};function mT(e,t,n,s){const[r,a]=Tg.computeOutAndReduceShapes(e,s),i=Ea(t,"int32"),o=lr.makeZerosTypedArray(lr.sizeFromShape(r),i),l=lr.sizeFromShape(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const gT={kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Fv(r,"prod");const o=r.shape.length,l=lr.parseAxisParam(a,r.shape),u=Tg.getAxesPermutation(l,o);let c=l,h=r;const p=[];null!=u&&(h=Ck({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Tg.getInnerMostAxes(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=mT(h.shape,h.dtype,d,c);let y=m;return i&&(y=Tg.expandShapeToKeepDim(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function yT(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let s=0;s<e.length;++s){let i=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=o[r],t=e[e.length-1]-s[i];for(let e=i;e<l;++e)o[r].push(s[e+1]+t)}i=s[i],l=s[l]}l!==i&&(r.push([i,l]),a+=l-i)}return{outSplits:o,valueSlices:r,numValues:a}}function bT(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function xT(e,t,n,s,r){const a=t.slice();a[0]=r;const i=lr.getArrayFromDType(n,lr.sizeFromShape(a)),o=e.length;return function(e,t,n,s,r,a){const i=bT(t,2)[1],o=bT(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[l*o+t]=e[n*i+t];++l}}(e,t,s,0===o?0:o/t[0],i,a),[i,a]}function wT(e,t,n,s,r,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const r=lr.indexToLoc(s,t.length,lr.computeStrides(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(a,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=yT(a,i,e,l),p=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n].length,r=lr.getArrayFromDType("int32",s);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(u),d=xT(n,s,r,c,h);return[p,d[0],d[1]]}const vT={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[p,d,f]=wT(l,u,c,a.shape,a.dtype,h,i.shape),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},kT=2147483647;function IT(e,t,n,s,r,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,l=0===r.length,u=0===i.length,c=[];o||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],p=lr.getArrayFromDType("int32",h+1);p[0]=0;for(let t=0;t<h;++t){const n=o?e[0]:e[t],r=l?s[0]:s[t],i=u?a[0]:a[t];if(0===i)throw new Error("Requires delta != 0");let c;if(i>0&&r<n||i<0&&r>n)c=0;else if(c=Math.ceil(Math.abs((r-n)/i)),c>kT)throw new Error("Requires ((limit - start) / delta) <= 2147483647");p[t+1]=p[t]+c}const d=p[h],f=lr.getArrayFromDType(n,d);let m=0;for(let t=0;t<h;++t){const n=p[t+1]-p[t];let s=o?e[0]:e[t];const r=u?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=s,s+=r}return[p,f]}const ST={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=IT(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};var NT=Tg.RowPartitionType;class TT{constructor(e,t,n,s,r,a,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Tg.getRowPartitionTypesHelper(u),this.raggedRank=Tg.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===NT.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===NT.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case NT.VALUE_ROWIDS:return TT.getMaxWidthValueRowID(t);case NT.ROW_SPLITS:return TT.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${NT[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return $T(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;Tg.validateDefaultValueShape(n,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=Tg.combineRaggedTensorToTensorShapes(this.raggedRank,s,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let e=0;e<s;++e,a+=t)r.push(a);for(let t=s;t<e;++t)r.push(-1);return lr.assert(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)a.push(l),l+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case NT.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case NT.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${NT[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case NT.FIRST_DIM_SIZE:return e[0];case NT.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case NT.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${NT[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=$T(t,!1),r=lr.getArrayFromDType(this.valuesDType,lr.sizeFromShape(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let i=s.slice();i=i.slice(e+1);const o=lr.sizeFromShape(i),l=t.length;let u=this.defaultValue;if(u.length!==o&&1!==u.length){const e=this.defaultValueShape;Tl((()=>{const t=ql(u,e),n=Pc(t,i);u=n.dataSync()}))}let c=0,h=0,p=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==p){if(h<p){const e=r.subarray(c*o);CT(a.subarray(h*o),e,(p-h)*o)}if(e>=l){const e=n.length;s=Math.floor(e/o)}if(s>p)if(1===this.defaultValue.length)a.subarray(p*o,s*o).fill(this.defaultValue[0]),p=s;else for(;s>p;){CT(a.slice(p*o),u,o),++p}s<0?(c=e+1,h=p):(c=e,h=p,p=h+1)}else++p}}}function CT(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function $T(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function ET(e,t,n,s,r,a,i,o,l,u){return new TT(e,t,n,s,r,a,i,o,l,u).compute()}const AT={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),d=o.map((e=>e.shape)),[f,m]=ET(u,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,a.dtype,m)}};function RT(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return lr.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((t-e)/n)),a=lr.makeZerosTypedArray(r,s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const FT={kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=RT(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},DT=_v(Gn,(e=>1/e)),_T={kernelName:Gn,backendName:"cpu",kernelFunc:DT};const OT={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Fv(r,"resizeBilinear");const l=lr.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(lr.sizeFromShape([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const MT={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Fv([a,r],"resizeBilinearGrad");const o=lr.computeStrides(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],v=p*u,k=p*r,I=l*u,S=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const LT={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Fv(r,"resizeNearestNeighbor");const l=lr.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[v++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const zT={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Fv([a,r],"resizeNearestNeighborGrad");const o=lr.computeStrides(r.shape),l=lr.computeStrides(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,S=2*Math.ceil(k)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*v),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*k),y=Math.floor(u-S/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const PT={kernelName:Jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;Fv(r,"reverse");const i=r.shape.length,o=lr.parseAxisParam(a,r.shape);if(0===i)return zv({inputs:{x:r},backend:n});const l=new ha(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},BT={kernelName:Us,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=lr.getTypedArrayFromDType(s.dtype,lr.sizeFromShape(s.shape)),[u,c,h,p]=s.shape,[d,f]=Tg.getImageCenter(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[t+v*(h*p)+w*p+i]}l[t+n+r+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},WT=_v(Qn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),VT={kernelName:Qn,backendName:"cpu",kernelFunc:WT},UT=Dv((e=>1/Math.sqrt(e))),GT=Ov(es,UT),HT={kernelName:es,backendName:"cpu",kernelFunc:GT};function jT(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return dl(n,t.dtype);const d=l instanceof ha?l:dl(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const qT={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tg.calculateShapes(a,r,i),p=jT(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function KT(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function XT(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const YT={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=lr.getArrayFromDType("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?KT(n,t[e+l]):XT(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}};const ZT={kernelName:rs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;Fv([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=Ea(r.dtype,a.dtype),h=lr.makeZerosTypedArray(lr.sizeFromShape(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:lr.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},JT=Tg.SELU_SCALEALPHA,QT=Tg.SELU_SCALE,eC=_v(as,(e=>e>=0?QT*e:JT*(Math.exp(e)-1))),tC={kernelName:as,backendName:"cpu",kernelFunc:eC},nC=_v(us,(e=>e<0?-1:e>0?1:0)),sC={kernelName:us,backendName:"cpu",kernelFunc:nC},rC=_v(os,(e=>Math.sin(e))),aC={kernelName:os,backendName:"cpu",kernelFunc:rC},iC=_v(ls,(e=>Math.sinh(e))),oC={kernelName:ls,backendName:"cpu",kernelFunc:iC},lC=Math.log(1.1920928955078125e-7)+2,uC=_v(hs,(e=>{const t=e>-lC,n=e<lC,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),cC={kernelName:hs,backendName:"cpu",kernelFunc:uC};const hC={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Fv([r],"spaceToBatchND");const o=lr.sizeFromShape(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=hT.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Tg.getReshaped(u.shape,a,o,!1),h=Tg.getPermuted(c.length,a.length,!1),p=Tg.getReshapedPermuted(u.shape,a,o,!1),d=fk({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Ck({inputs:{x:d},backend:n,attrs:{perm:h}}),m=fk({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function pC(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Tg.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[lr.getArrayFromDType(n,0),[0,h],lr.getArrayFromDType(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(Tg.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(Tg.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=lr.getArrayFromDType(n,t*h),p=lr.getArrayFromDType(r,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,u,c]}}const dC={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=pC(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function fC(e,t,n,s,r){const a=lr.sizeFromShape(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(Tg.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Tg.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(Tg.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Tg.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[c]=e}if(lr.sizeFromShape(l)!==a)throw new Error(Tg.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=lr.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*p[s];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],l]}const mC={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=fC(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function gC(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error(Tg.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=c;const p=h.reduce(((e,t)=>e*t),1),d=lr.getArrayFromDType(n,p);if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error(Tg.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=r[f];for(;;){let t=0;if(m<o){if(t=r[m],y===t){++m;continue}if(y>=t)throw new Error(Tg.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Tg.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(i,g*u,y*u);for(let t=f;t<m;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(Tg.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const yC={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=gC(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const bC={kernelName:ws,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=gC(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const xC={kernelName:vs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Tg.calculateShapes(a,r,o),d=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=jT(f,n.bufferSync(a),o,p,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),d);break;case"float32":m=jT(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"int32":m=jT(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"string":m=jT(f,n.bufferSync(a),o,p,c,u,l,h,lr.decodeString(n.data.get(i.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}};const wC={kernelName:ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=lr.parseAxisParam(i,r.shape)[0],l=Tg.prepareSplitSize(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=Qk({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},vC=Dv((e=>Math.sqrt(e))),kC=_v(ps,(e=>Math.sqrt(e))),IC={kernelName:ps,backendName:"cpu",kernelFunc:kC},SC={kernelName:Is,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Fv(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},NC=Vv(((e,t)=>{const n=e-t;return n*n})),TC=lk(ks,NC),CC={kernelName:ks,backendName:"cpu",kernelFunc:TC},$C=Dv(((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)})),EC=Ov(Ss,$C),AC={kernelName:Ss,backendName:"cpu",kernelFunc:EC},RC=_v(Ws,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),FC={kernelName:Ws,backendName:"cpu",kernelFunc:RC};function DC(e,t,n,s){const r=dl(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const _C={kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;Fv(r,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=og.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=fk({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){lr.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=og.computeOutShape(b,x,w),t=Qk({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=fk({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=DC(d,n.bufferSync(r),w,b);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}};class OC{constructor(e,t,n,s,r,a){this.separator=lr.encodeString(e),this.nGramWidths=t,this.leftPad=lr.encodeString(n),this.rightPad=lr.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length;p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=lr.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,l=1;this.createNGrams(e,s,i,r,l,o)}}return[i,a]}}function MC(e,t,n,s,r,a,i,o){return new OC(n,s,r,a,i,o).compute(e,t)}const LC={kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=MC(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function zC(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function PC(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=r.length;zC(e[l],t,n,r);const u=r.length-s;o[l]=u,a+=u,i=Math.max(i,u)}const l=lr.getArrayFromDType("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const BC={kernelName:Cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=PC(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function WC(e,t){const n=lr.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=lr.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const VC={kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=WC(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},UC=_v(As,(e=>Math.tan(e))),GC={kernelName:As,backendName:"cpu",kernelFunc:UC},HC=_v(Rs,(e=>Math.tanh(e)));function jC(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=dl(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const qC=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function KC(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);KC(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(lr.swap(e,n,t),qC(e[s],r)>0&&lr.swap(e,n,s);a<i;){for(lr.swap(e,a,i),a++,i--;qC(e[a],r)<0;)a+=1;for(;qC(e[i],r)>0;)i-=1}0===qC(e[n],r)?lr.swap(e,n,i):(i+=1,lr.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function XC(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=lr.getTypedArrayFromDType(n,i*s),u=lr.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(KC(i,s),i=i.slice(0,s)),r&&i.sort(qC);const c=t*s,h=l.subarray(c,c+s),p=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[dl(c,n,l),dl(c,"int32",u)]}const YC={kernelName:_s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=lr.computeStrides(r.shape),b=y[0],x=y[1],w=y[2],v=lr.computeStrides(g),k=v[0],I=v[1],S=v[2],N=lr.getTypedArrayFromDType(r.dtype,lr.sizeFromShape(g));N.fill(l);const T=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<d;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=ZC(c,p,o),m=ZC(d,h,o);switch(i){case"nearest":a=QC(T,h,p,b,x,w,e,m,f,r,l);break;case"bilinear":a=e$(T,h,p,b,x,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[e*k+n*I+s*S+r]=a}return s.makeTensorInfo(g,r.dtype,N)}return{dataId:s.write(N,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function ZC(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return lr.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return lr.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return lr.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function JC(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function QC(e,t,n,s,r,a,i,o,l,u,c){return JC(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function e$(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*JC(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*JC(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*JC(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*JC(e,t,n,s,r,a,i,d,f,u,c))}function t$(e,t,n,s){const r=lr.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i=new Map,o=new Int32Array(n[r]),l=new ha(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}const s=i.get(n);if(null!=s)o[t]=s;else{const e=i.size;i.set(n,e),o[t]=e,u.push(t)}}const h=a.slice();h[1]=i.size;const p=new ha(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const n$=[bk,wk,kk,Sk,dk,Nk,Ek,Ak,Rk,Fk,_k,Mk,zk,Wk,Uk,qk,Kk,Xk,Yk,yk,Zk,tI,rI,oI,lI,ok,hI,dI,tk,fI,xI,vI,kI,II,SI,NI,TI,$I,AI,RI,FI,DI,_I,OI,LI,zI,PI,BI,WI,VI,UI,YI,Lv,ZI,eS,lS,hS,dS,gS,CS,ES,AS,DS,MS,LS,zS,BS,VS,HS,KS,Pv,XS,yI,ZS,QS,tN,Wv,rN,oN,uN,pN,fN,yN,xN,kN,IN,SN,CN,AN,RN,FN,DN,_N,ON,MN,LN,BN,WN,GN,qN,qI,XN,ZN,QN,tT,rT,aT,lT,cT,hT,fT,Hv,gT,vT,ST,AT,FT,rk,xS,_T,qv,Xv,mk,OT,MT,LT,zT,PT,BT,VT,HT,qT,YT,ZT,tC,Jv,sC,aC,oC,eI,jN,cC,hC,dC,mC,yC,bC,xC,wC,IC,SC,CC,AC,FC,_C,LC,BC,VC,IS,XI,GC,{kernelName:Rs,backendName:"cpu",kernelFunc:HC},{kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:l,strides:u,outputSize:c}=Tg.calculateShapes(a,r,s.shape),h=n.bufferSync(r),p=n.bufferSync(a),d=n.bufferSync(s),f=jT(h,p,s.shape,c,l,o,i,u,d,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}},{kernelName:Fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;Fv(r,"tile");const i=jC(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;Fv(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=XC(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},YC,$k,{kernelName:Ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Fv(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=t$(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=Qk({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=fk({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:zs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;Fv(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=pS({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=lr.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=QI({inputs:{a:s,b:c},backend:n}),i=ik({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=jI({inputs:{a:i,b:r},backend:n}),h=KI({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=uT({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},oT];for(const e of n$)nr(e);const s$=Gy.whereImpl;class r$ extends l{nextDataId(){return r$.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new o(this,Il())}write(e,t,n){this.firstUse&&(this.firstUse=!1,le().get("IS_NODE")&&Tg.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&lr.isString(n[0])){const r=n.map((e=>lr.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Tg.mergeRealAndImagArrays(e,t)}return lr.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>lr.decodeString(e)));return dl(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return dl(e.shape,e.dtype,t)}makeOutput(e,t,n){return Il().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=lr.now();e();return{kernelMs:lr.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Fv([e],"where");const t=this.readSync(e.dataId);return s$(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}r$.nextDataId=0;function a$(){let e,t,n,s,r,a,i,o,l,u;return 2===le().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o=le().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function i$(e,t,n="index"){const s=lr.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function o$(e,t,n="index"){const s=lr.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function l$(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function u$(e){const t=lr.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ml("cpu",(()=>new r$),1);const c$="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:h$}=Tg;function p$(e,t,n){const s=[];if(e.forEach((e=>{const t=lr.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=I$(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?f$(e,s):d$(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=h$(e.shapeInfo.logicalShape,t.logicalShape),l=k$(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===lr.sizeFromShape(e.shapeInfo.logicalShape),m=1===lr.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&lr.arraysEqual(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=k$(l),c=h$(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=a$(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${m$}\n    ${g$}\n    ${y$}\n  `}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return x$();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(lr.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return x$();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(lr.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${o$(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=i$(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${o$(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=i$(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=i$(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=i$(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=b$);return[h,l,c,r,u,a,n.userCode].join("\n")}function d$(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=w$(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${v$(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=w$(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&lr.arraysEqual(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=lr.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${d$(S$(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${N$(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${v$(e)}\n      }\n    `;const u=a[0],c=a[1],h=w$(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;return t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=lr.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${d$(S$(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${N$(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${v$(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=w$(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=lr.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${d$(S$(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${N$(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${v$(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=w$(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=lr.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${d$(S$(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${N$(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${v$(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=w$(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=lr.squeezeShape(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${d$(S$(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${N$(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${v$(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=w$(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function f$(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=a$();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=a$();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=a$();if(null!=a&&lr.arraysEqual(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${f$(S$(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${N$(a,s)});\n        }\n      `}const o=a$();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=a$();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const m$="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",g$="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",y$="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",b$="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function x$(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function w$(e){return`offset${e}`}function v$(e){const t=e.name,n=lr.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function k$(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function I$(e,t,n){const{newShape:s,keptDims:r}=lr.squeezeShape(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!lr.arraysEqual(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function S$(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function N$(e,t){return t.map((t=>e[t])).join(", ")}const T$={},C$={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function $$(e,t){if(!(e in T$)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(le().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete T$[e]}),!1),le().getBool("SOFTWARE_WEBGL_ENABLED")&&(C$.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",C$)||n.getContext("experimental-webgl",C$):n.getContext("webgl2",C$)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;T$[e]=n}const n=T$[e];return null==n||n.isContextLost()?(delete T$[e],$$(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),T$[e])}var E$,A$,R$;function F$(e,t){return[t,e]}function D$(e){const t=lr.sizeFromShape(e),n=Math.ceil(t/4);return lr.sizeToSquarishShape(n)}function _$(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function O$(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===le().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function M$(e,t){const n=t();return le().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(E$||(E$={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(A$||(A$={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(R$||(R$={}));function L$(e){return!!(le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function z$(e,t){return q$(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const P$=/ERROR: [0-9]+:([0-9]+):/g;function B$(e,t){const n=P$.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>lr.rightPad((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${lr.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function W$(e,t){if(M$(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function V$(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(M$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),M$(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),M$(e,(()=>e.enableVertexAttribArray(o))),!0)}function U$(e,t,n,s){M$(e,(()=>function(e,t,n){K$(e,n),M$(e,(()=>e.activeTexture(e.TEXTURE0+n))),M$(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),M$(e,(()=>e.uniform1i(n,s)))}function G$(e,t,n){M$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),M$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function H$(e,t){M$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),M$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function j$(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function q$(e,t,n){const s=M$(e,(()=>t()));if(null==s)throw new Error(n);return s}function K$(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function X$(e,t=2){return lr.sizeFromShape(e.slice(0,e.length-t))}function Y$(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function Z$(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[X$(e),...Y$(e)]),t}function J$(e){return e%2==0}function Q$(e,t){if(e=e.slice(-2),t=t.slice(-2),lr.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(J$(n)&&J$(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&J$(e[0])&&J$(t[0])}let eE,tE;function nE(e,t){return null!=e.getExtension(t)}function sE(e){try{if(null!=$$(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function rE(e){if(0===e)return!1;const t=$$(e);if(1!==e){if(nE(t,"EXT_color_buffer_float"))return aE(t);const e="EXT_color_buffer_half_float";if(nE(t,e)){const n=t.getExtension(e);return function(e,t){const n=O$(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!nE(t,"OES_texture_float"))return!1;if(!nE(t,"WEBGL_color_buffer_float"))return!1;return aE(t)}function aE(e){const t=O$(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function iE(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&lr.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function oE(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=p$(r,i,t),l=function(e,t){const n=q$(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(M$(e,(()=>e.shaderSource(n,t))),M$(e,(()=>e.compileShader(n))),le().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw B$(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return le().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},lE(e,t,u)))}function lE(e,t,n){const s=[],r=[];let a,i,o,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===le().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const r of t.variableNames){const a={name:r,uniform:e.getUniformLocation(n,r,c),offset:e.getUniformLocation(n,`offset${r}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${r}Shape`,c),a.texShape=e.getUniformLocation(n,`${r}TexShape`,c)),s.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const s of t.customUniforms)r.push(e.getUniformLocation(n,s.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function uE(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!lr.arraysEqual(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!lr.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function cE(e){return le().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class hE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Tg.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=cE(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function pE(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function dE(e,t){return 1===t?[e]:pE(e,t)}const fE="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class mE{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Tg.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=cE(r);let a="";if(s)if(0===r||1===lr.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${k$(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=dE("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function gE(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const yE={kernelName:Gt,backendName:"webgl",kernelFunc:gE};function bE(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=gE({inputs:{x:s},backend:n}),l=gE({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const xE={kernelName:nt,backendName:"webgl",kernelFunc:bE},wE="return (a < 0.) ? b * a : a;",vE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const kE={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",lr.createScalarValue(a,"float32")),o=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mE(vE,r.shape,i.shape):new hE(wE,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},IE="return (a < 0.) ? b * a : a;",SE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const NE={kernelName:Ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mE(SE,s.shape,r.shape):new hE(IE,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}};class TE{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const CE="return abs(x);";const $E="return x;";class EE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function AE({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new EE(i.shape,t):new TE(i.shape,e),o.runWebGLProgram(u,[i],l)}}function RE({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new hE(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],Ea(n.dtype,s.dtype))})),a=bE({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||Ea(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Tg.fromUint8ToStringArray(e):e,s="string"===l.dtype?Tg.fromUint8ToStringArray(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new mE(t,l.shape,u.shape,n):new hE(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function FE(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?SE:IE;if("leakyrelu"===e)return t?vE:wE;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class DE{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=cE(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const _E="return areal * breal - aimag * bimag;",OE="return areal * bimag + aimag * breal;";class ME{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Tg.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var LE={};n(LE,"simpleAbsImpl",(()=>xk)),n(LE,"addImpl",(()=>ck)),n(LE,"bincountImpl",(()=>nI)),n(LE,"bincountReduceImpl",(()=>sI)),n(LE,"bitwiseAndImpl",(()=>aI)),n(LE,"castImpl",(()=>ak)),n(LE,"ceilImpl",(()=>uI)),n(LE,"concatImpl",(()=>mI)),n(LE,"equalImpl",(()=>JI)),n(LE,"expImpl",(()=>uS)),n(LE,"expm1Impl",(()=>fS)),n(LE,"floorImpl",(()=>RS)),n(LE,"floorDivImpl",(()=>_S)),n(LE,"gatherNdImpl",(()=>PS)),n(LE,"gatherV2Impl",(()=>WS)),n(LE,"greaterImpl",(()=>US)),n(LE,"greaterEqualImpl",(()=>jS)),n(LE,"lessImpl",(()=>nN)),n(LE,"lessEqualImpl",(()=>aN)),n(LE,"linSpaceImpl",(()=>lN)),n(LE,"logImpl",(()=>cN)),n(LE,"maxImpl",(()=>NN)),n(LE,"maximumImpl",(()=>$N)),n(LE,"minimumImpl",(()=>zN)),n(LE,"multiplyImpl",(()=>GI)),n(LE,"negImpl",(()=>KN)),n(LE,"notEqualImpl",(()=>nT)),n(LE,"prodImpl",(()=>mT)),n(LE,"raggedGatherImpl",(()=>wT)),n(LE,"raggedRangeImpl",(()=>IT)),n(LE,"raggedTensorToTensorImpl",(()=>ET)),n(LE,"rangeImpl",(()=>RT)),n(LE,"rsqrtImpl",(()=>UT)),n(LE,"scatterImpl",(()=>jT)),n(LE,"sigmoidImpl",(()=>Yv)),n(LE,"sliceImpl",(()=>Jk)),n(LE,"sparseFillEmptyRowsImpl",(()=>pC)),n(LE,"sparseReshapeImpl",(()=>fC)),n(LE,"sparseSegmentReductionImpl",(()=>gC)),n(LE,"sqrtImpl",(()=>vC)),n(LE,"squaredDifferenceImpl",(()=>NC)),n(LE,"staticRegexReplaceImpl",(()=>$C)),n(LE,"stridedSliceImpl",(()=>DC)),n(LE,"stringNGramsImpl",(()=>MC)),n(LE,"stringSplitImpl",(()=>PC)),n(LE,"stringToHashBucketFastImpl",(()=>WC)),n(LE,"subImpl",(()=>wS)),n(LE,"tileImpl",(()=>jC)),n(LE,"topKImpl",(()=>XC)),n(LE,"transposeImpl",(()=>Tk)),n(LE,"uniqueImpl",(()=>t$));const{addImpl:zE,bincountImpl:PE,bincountReduceImpl:BE,castImpl:WE,ceilImpl:VE,concatImpl:UE,equalImpl:GE,expImpl:HE,expm1Impl:jE,floorImpl:qE,gatherNdImpl:KE,gatherV2Impl:XE,greaterImpl:YE,greaterEqualImpl:ZE,lessImpl:JE,lessEqualImpl:QE,linSpaceImpl:eA,logImpl:tA,maxImpl:nA,maximumImpl:sA,minimumImpl:rA,multiplyImpl:aA,negImpl:iA,notEqualImpl:oA,prodImpl:lA,raggedGatherImpl:uA,raggedRangeImpl:cA,raggedTensorToTensorImpl:hA,rangeImpl:pA,rsqrtImpl:dA,scatterImpl:fA,sigmoidImpl:mA,simpleAbsImpl:gA,sliceImpl:yA,sparseFillEmptyRowsImpl:bA,sparseReshapeImpl:xA,sparseSegmentReductionImpl:wA,sqrtImpl:vA,staticRegexReplaceImpl:kA,stridedSliceImpl:IA,stringNGramsImpl:SA,stringSplitImpl:NA,stringToHashBucketFastImpl:TA,subImpl:CA,tileImpl:$A,topKImpl:EA,transposeImpl:AA,uniqueImpl:RA}=LE,FA="return a * b;";function DA(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Tg.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new ME(_E,s.shape,r.shape),i=new ME(OE,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=bE({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=aA(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mE(FA,s.shape,r.shape):new hE(FA,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const _A={kernelName:Nn,backendName:"webgl",kernelFunc:DA};class OA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?l$(["r","c","d"],"inputShape"):i$(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":u$(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function MA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=lr.sizeFromShape(r.shape),l=lr.inferFromImplicitShape(a,o),u=lr.sizeFromShape(l);lr.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||Q$(r.shape,l)||null!==c.texture&&Q$(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[X$(e.shape),...Y$(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[X$(t),...Y$(t)],i=new OA(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const LA={kernelName:jn,backendName:"webgl",kernelFunc:MA};class zA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${lr.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class PA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function BA(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Tg.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new zA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new zA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new PA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class WA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=k$(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class VA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=k$(this.rank),r=pE("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function UA(e,t,n){const s=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new VA(e.shape,t):new WA(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function GA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=lr.parseAxisParam(r,e.shape);let o=i;const l=Tg.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=UA(e,l,s),o=Tg.getInnerMostAxes(o.length,a)),Tg.assertAxesAreInnerMostDims("sum",o,a);const[h,p]=Tg.computeOutAndReduceShapes(c.shape,o);let d=h;n&&(d=Tg.expandShapeToKeepDim(h,i));const f=lr.sizeFromShape(p),m=MA({inputs:{x:c},attrs:{shape:[lr.sizeFromShape(e.shape)/f,f]},backend:s}),g=BA(m,Aa(e.dtype),"sum",s),y=MA({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const HA={kernelName:ds,backendName:"webgl",kernelFunc:GA};function jA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=AA(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=UA(r,a,i);return u}const qA={kernelName:Os,backendName:"webgl",kernelFunc:jA};function KA({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=lr.sizeFromShape(m),b=lr.sizeFromShape(g),x=pu.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);lr.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],v=s?[b,f,p]:[b,p,f],k=MA({inputs:{x:e},backend:r,attrs:{shape:w}}),I=MA({inputs:{x:t},backend:r,attrs:{shape:v}}),S=[k,I],N=Math.max(y,b),T=n?k.shape[1]:k.shape[2],C=null!=a,$=null!=i,E="leakyrelu"===l,A=null!=l?FE(l,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(C||$||E||null!=A)){let e=k,t=I;n&&(e=jA({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=jA({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let i=e;1!==f&&(i=MA({inputs:{x:e},backend:r,attrs:{shape:[N,T,1]}}),S.push(i));const o=1===f?2:1;let l=t;a&&(l=MA({inputs:{x:t},backend:r,attrs:{shape:[N,1,T]}}),S.push(l));const u=DA({inputs:{a:i,b:l},backend:r});R=GA({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const l=Ea(e.dtype,t.dtype),u=new DE(w,v,[N,d,f],n,s,C,A,$,E),c=[k,I];if(null!=a&&c.push(a),$&&c.push(i),E){const e=r.makeTensorInfo([],"float32",lr.createScalarValue(o,"float32"));c.push(e),S.push(e)}R=r.runWebGLProgram(u,c,l)}const F=MA({inputs:{x:R},backend:r,attrs:{shape:x}});S.push(R);for(const e of S)r.disposeIntermediateTensorInfo(e);return F}const XA={kernelName:Gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return KA({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},YA="return abs(x);";const ZA={kernelName:Ee,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=gA(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new EE(s.shape,YA):new TE(s.shape,YA),n.runWebGLProgram(r,[s],s.dtype)}},JA=AE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),QA={kernelName:Ae,backendName:"webgl",kernelFunc:JA},eR=AE({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),tR={kernelName:Re,backendName:"webgl",kernelFunc:eR},nR="return a + b;",sR=RE({opSnippet:nR,packedOpSnippet:nR,supportsComplex:!0,cpuKernelImpl:zE}),rR={kernelName:Fe,backendName:"webgl",kernelFunc:sR};class aR{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class iR{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const oR={kernelName:De,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return gE({inputs:{x:r[0]},backend:s});if(r.length>le().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>Ea(e,t))),i=r.map((e=>e.shape)),o=le().getBool("WEBGL_PACK")?new iR(r[0].shape,i):new aR(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const lR={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=lr.parseAxisParam(a,r.shape);let u=l;const c=Tg.getAxesPermutation(u,o);let h=r;null!=c&&(h=jA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tg.getInnerMostAxes(u.length,o)),Tg.assertAxesAreInnerMostDims("all",u,o);const[p,d]=Tg.computeOutAndReduceShapes(h.shape,u),f=MA({inputs:{x:h},backend:n,attrs:{shape:[-1,lr.sizeFromShape(d)]}}),m=BA(f,f.dtype,"all",n);let g;if(i){g=MA({inputs:{x:m},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(p,l)}})}else g=MA({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const uR={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=lr.parseAxisParam(a,r.shape);let u=l;const c=Tg.getAxesPermutation(u,o);let h=r;null!=c&&(h=jA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tg.getInnerMostAxes(u.length,o)),Tg.assertAxesAreInnerMostDims("any",u,o);const[p,d]=Tg.computeOutAndReduceShapes(h.shape,u),f=MA({inputs:{x:h},backend:n,attrs:{shape:[-1,lr.sizeFromShape(d)]}}),m=BA(f,f.dtype,"any",n);let g;if(i){g=MA({inputs:{x:m},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(p,l)}})}else g=MA({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class cR{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class hR{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,lr.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=k$(o),u=dE("coords",o);let c,h;if(1===a){h=o+1;const e=k$(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=dE("sourceLocR",h-1).concat("inIdx.r"),g=dE("sourceLocG",h-1).concat("inIdx.g"),y=dE("sourceLocB",h-1).concat("inIdx.b"),b=dE("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function pR(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Tg.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new cR(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=pR(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function dR(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=r[r.length-1],i=Tg.computeOptimalWindowSize(a),o=new hR(r,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=dR(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function fR(e,t,n,s){const r=[n];if(Tg.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!le().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=Tg.computeOutAndReduceShapes(i.shape,r),u=lr.sizeFromShape(l),c=MA({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=pR(e,c,s);n.push(h);const p=MA({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return dR(e,t,s)}const mR={kernelName:Me,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=lr.parseAxisParam(a,r.shape);const o=Tg.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=jA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tg.getInnerMostAxes(i.length,l.shape.length)),Tg.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=fR(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const gR={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=lr.parseAxisParam(a,r.shape);const o=Tg.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=jA({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tg.getInnerMostAxes(i.length,l.shape.length)),Tg.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=fR(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},yR=AE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),bR={kernelName:ze,backendName:"webgl",kernelFunc:yR},xR=AE({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),wR={kernelName:Pe,backendName:"webgl",kernelFunc:xR},vR=AE({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),kR={kernelName:Be,backendName:"webgl",kernelFunc:vR},IR=RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),SR={kernelName:Ve,backendName:"webgl",kernelFunc:IR},NR=AE({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),TR={kernelName:We,backendName:"webgl",kernelFunc:NR};class CR{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class $R{constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${w});\n      }\n    `}}const ER={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;iE(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;lr.assert(Tg.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tg.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&lr.arraysEqual(u.inShape,u.outShape))return gE({inputs:{x:r},backend:n});const c=new CR(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const AR={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Tg.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),h=new $R(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class RR{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class FR{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const DR={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Tg.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new FR(h);return n.runWebGLProgram(p,[r],i.dtype)}};const _R={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;iE([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Tg.computePool2DInfo(i.shape,o,l,1,u),h=new RR(c);return n.runWebGLProgram(h,[r],i.dtype)}};const OR={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return KA({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class MR{constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Tg.assertAndGetBroadcastShape(e,t),Tg.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(Tg.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Tg.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class LR{constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Tg.assertAndGetBroadcastShape(e,t),Tg.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(Tg.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Tg.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const zR={kernelName:Pt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;lr.assert(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),lr.assert(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),lr.assert(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=le().getBool("WEBGL_PACK_NORMALIZATION")?new LR(s.shape,r.shape,a.shape,c,h,l):new MR(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class PR{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=k$(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return BR.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${BR[t]} = start[${t}] + coords.${BR[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const BR=["x","y","z","w","u","v"];class WR{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=k$(this.rank),n=dE("coords",this.rank),s=dE("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function VR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=og.parseSliceParams(r,a,i);if(og.assertParamsValid(r,o,l),0===lr.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=yA(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=og.isSliceContinous(r.shape,o,l);if(u||!c){const e=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new WR(l):new PR(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=og.computeFlatOffset(t,lr.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const UR={kernelName:is,backendName:"webgl",kernelFunc:VR},GR={kernelName:Ke,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;lr.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=Tg.getReshaped(r.shape,a,o),u=Tg.getPermuted(l.length,a.length),c=Tg.getReshapedPermuted(r.shape,a,o),h=Tg.getSliceBeginCoords(i,a.length),p=Tg.getSliceSize(c,i,a.length),d=[],f=MA({inputs:{x:r},backend:n,attrs:{shape:l}}),m=jA({inputs:{x:f},backend:n,attrs:{perm:u}}),g=MA({inputs:{x:m},backend:n,attrs:{shape:c}}),y=VR({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const HR={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=PE(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const jR={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=Tg.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},qR=RE({opSnippet:"return float(a != b);",cpuKernelImpl:oA,dtype:"bool"}),KR={kernelName:Cn,backendName:"webgl",kernelFunc:qR};function XR(e){const{inputs:t,backend:n}=e,{input:s}=t;return gE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const YR={kernelName:Un,backendName:"webgl",kernelFunc:XR};const ZR={kernelName:Qe,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return gE({inputs:{x:a},backend:s});const t=Yl(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=bE({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=XR({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!lr.hasEncodingLoss(a.dtype,i)){const e=gE({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=WE(e,a.shape,a.dtype,i);return s.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new TE(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",lr.getTypedArrayFromDType("bool",1)),t=qR({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},JR="return ceil(x);",QR=AE({opSnippet:JR,packedOpSnippet:JR,cpuKernelImpl:VE}),eF={kernelName:et,backendName:"webgl",kernelFunc:QR};class tF{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class nF{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const sF={kernelName:tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=le().getBool("WEBGL_PACK_CLIP")?new nF(r.shape):new tF(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class rF{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function aF(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const iF={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new rF(s.shape),i=[aF(s,r.complexTensorInfos.real),aF(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class oF{constructor(e){this.outputShape=[],this.outputShape=Tg.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class lF{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Tg.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=k$(s),a=dE("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${uF(i,l,t)}),\n            vec2(${uF(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${uF(i,l,d)}),\n          vec2(${uF(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function uF(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function cF(e){const{inputs:t,backend:n}=e,{input:s}=t;return gE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const hF={kernelName:jt,backendName:"webgl",kernelFunc:cF};function pF(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>XR({inputs:{input:e},backend:n}))),r=e.map((e=>cF({inputs:{input:e},backend:n}))),a=pF(s,t,n),i=pF(r,t,n),o=bE({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=lr.sizeFromShape(e.shape.slice(t));return MA({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Tg.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=UE(a,i,s,o),u=Tg.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>lr.sizeFromShape(e.shape)>0)),i=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new TE(e[0].shape,$E):new EE(e[0].shape,$E);return n.runWebGLProgram(t,e,s)}const o=le().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let s=0;s<a.length;s+=o){const r=a.slice(s,s+o);e.push(pF(r,t,n))}const s=pF(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(i){const e=new lF(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=Tg.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>MA({inputs:{x:e},attrs:{shape:[-1,lr.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}(a,t,n),c=new oF(l.map((e=>e.shape))),h=n.runWebGLProgram(c,l,s);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const p=MA({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),p}function dF(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=lr.parseAxisParam(r,t[0].shape)[0],i=t.map((e=>e.shape));Tg.assertParamsConsistent(i,a);const o=Tg.computeOutShape(t.map((e=>e.shape)),a);if(0===lr.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>lr.sizeFromShape(e.shape)>0));return 1===l.length?gE({inputs:{x:l[0]},backend:n}):pF(l,a,n)}const fF={kernelName:rt,backendName:"webgl",kernelFunc:dF};class mF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class gF{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class yF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cE(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*o};\n           `,1===i){if(n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?lr.nearestLargerEven(o):o;o%2==0&&a%2==1||o%2!=0&&a%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let p="",d="";n&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class bF{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length);const{dataFormat:n}=t,s=a$(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function xF(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function wF({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=xF(a.shape,d);null!=e&&(a=MA({inputs:{x:a},backend:s,attrs:{shape:e}}),m.push(a))}if(null!=r){const e=xF(r.shape,d);null!=e&&(r=MA({inputs:{x:r},backend:s,attrs:{shape:e}}),m.push(r))}if(!((1===h||1===p)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&lr.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,lr.assert(Q$(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const d=MA({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=KA({a:h,b:d,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=s.texData.get(g.dataId);lr.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,y.shape=n.outShape,f=gE({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=MA({inputs:{x:e},backend:s,attrs:{shape:d?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=MA({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=KA({a:d?u:c,b:d?c:u,transposeA:!d,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=MA({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function vF({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[n.batchSize,m,g],b=[];if(null!=a){const e=xF(a.shape,f);null!=e&&(a=MA({inputs:{x:a},backend:s,attrs:{shape:e}}),b.push(a))}if(null!=r){const e=xF(r.shape,f);null!=e&&(r=MA({inputs:{x:r},backend:s,attrs:{shape:e}}),b.push(r))}const x=MA({inputs:{x:t},backend:s,attrs:{shape:[1,m,lr.sizeFromShape(t.shape)/m]}});b.push(x);const w=new bF(y,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],k=s.runWebGLProgram(w,[e],"float32",v),I=MA({inputs:{x:k},backend:s,attrs:{shape:y}});b.push(k),b.push(I);const S=null!=r,N=null!=a,T="leakyrelu"===o,C=o?FE(o,!0):null,$=new DE(f?I.shape:x.shape,f?x.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,C,N,T),E=f?[I,x]:[x,I];if(r&&E.push(r),N&&E.push(a),T){const e=s.makeTensorInfo([],"float32",lr.createScalarValue(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram($,E,"float32"),R=MA({inputs:{x:A},backend:s,attrs:{shape:n.outShape}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const kF={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Tg.convertConv2DDataFormat(l),p=Tg.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===h&&le().getBool("WEBGL_EXP_CONV")){const e=new yF(p),t=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];d=n.runWebGLProgram(e,[r,a],"float32",t)}else if(le().getBool("WEBGL_CONV_IM2COL"))d=vF({x:r,filter:a,convInfo:p,backend:n});else{const e=new mF(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=wF({x:r,filter:a,convInfo:p,backend:n});const f=MA({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class IF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class SF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class TF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const CF={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Tg.convertConv2DDataFormat(l),p=Tg.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),d=new IF(p);return n.runWebGLProgram(d,[r,a],"float32")}};class $F{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=cE(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const EF={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Tg.convertConv2DDataFormat(u),p=Tg.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h);if(le().getBool("WEBGL_PACK")&&"channelsLast"===h){const e=[[p.strideHeight,p.strideWidth]],t=new $F(p);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new SF(p);return n.runWebGLProgram(e,[r,a],"float32")}}};const AF={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Tg.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new gF(u);return n.runWebGLProgram(c,[r,a],"float32")}};const RF={kernelName:ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Tg.computeConv3DInfo(r.shape,l,i,1,o),c=new NF(u);return n.runWebGLProgram(c,[r,a],"float32")}};const FF={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Tg.computeConv3DInfo(l,a.shape,o,1,i),c=new TF(u);return n.runWebGLProgram(c,[r,a],"float32")}},DF=AE({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${fE}\n  return result;\n`}),_F={kernelName:ht,backendName:"webgl",kernelFunc:DF},OF=AE({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),MF={kernelName:pt,backendName:"webgl",kernelFunc:OF};class LF{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const zF={kernelName:mt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new LF(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var PF;!function(e){e.Prod="*",e.Sum="+"}(PF||(PF={}));class BF{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===PF.Prod?"1.0":"0.0",i=n?a:`getX(${WF(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${k$(r)} coords = getOutputCoords();\n        int end = ${VF(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${VF(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${WF(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function WF(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function VF(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function UF(e,t,n,s,r,a){const i=t.shape.length,o=Tg.getAxesPermutation([s],i);let l=t;null!=o&&(l=jA({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=Tg.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=gE({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new BF(e,l.shape,!1,a),r=[[t]],i=h;h=n.runWebGLProgram(s,[h],h.dtype,r),n.disposeIntermediateTensorInfo(i)}if(r){const t=new BF(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=jA({inputs:{x:h},backend:n,attrs:{perm:Tg.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const GF={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return UF(PF.Prod,r,n,a,i,o)}};const HF={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return UF(PF.Sum,r,n,a,i,o)}};const jF={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=PE(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=BE(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class qF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const KF={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new qF("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class XF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cE(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class YF{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=cE(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?lr.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,p+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const ZF={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),lr.assert(Tg.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Tg.computeConv2DInfo(r.shape,a.shape,i,c,o,u,!0);let p;p=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new YF(h):new XF(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",d)}};class JF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class QF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eD={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Tg.computeConv2DInfo(r.shape,c,i,o,l,u,!0),p=new JF(h);return n.runWebGLProgram(p,[r,a],"float32")}};const tD={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Tg.computeConv2DInfo(c,a.shape,i,o,l,u,!0),p=new QF(h);return n.runWebGLProgram(p,[r,a],"float32")}};class nD{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const sD={kernelName:vt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=lr.sizeFromShape(s.shape),i=MA({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new nD(a),l=n.runWebGLProgram(o,[i],i.dtype),u=MA({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class rD{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const aD={kernelName:kt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Tg.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new rD(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=MA({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const iD={kernelName:Tt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Tg.decodeEinsumEquation(r,a.length);Tg.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Tg.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Tg.getEinsumPermutation(d,l[t]);let r;Tg.isIdentityPermutation(e)?r=a[t]:(r=jA({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);lr.arraysEqual(r.shape,i)||(r=MA({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=DA({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=GA({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},oD=AE({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),lD={kernelName:Ct,backendName:"webgl",kernelFunc:oD},uD={kernelName:$t,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=le().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new mE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new hE("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},cD=RE({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:GE}),hD={kernelName:At,backendName:"webgl",kernelFunc:cD},pD=AE({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Tg.ERF_P};\n  float a1 = ${Tg.ERF_A1};\n  float a2 = ${Tg.ERF_A2};\n  float a3 = ${Tg.ERF_A3};\n  float a4 = ${Tg.ERF_A4};\n  float a5 = ${Tg.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),dD={kernelName:Et,backendName:"webgl",kernelFunc:pD},fD=AE({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:HE,dtype:"float32"}),mD={kernelName:Rt,backendName:"webgl",kernelFunc:fD};function gD(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(lr.assert(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),MA({inputs:{x:a},backend:s,attrs:{shape:o}})}const yD={kernelName:Ft,backendName:"webgl",kernelFunc:gD},bD="return exp(x) - 1.0;",xD=AE({opSnippet:bD,packedOpSnippet:bD,cpuKernelImpl:jE}),wD={kernelName:Dt,backendName:"webgl",kernelFunc:xD};class vD{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function kD(e,t,n){const s=n.texData.get(e.dataId),r=lr.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=MA({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new vD("real",o,t),u=new vD("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=bE({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=MA({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const ID={kernelName:_t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return kD(s,!1,n)}};class SD{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function ND(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||lr.inferDtype(r),"string"===a){const e=lr.getArrayFromDType(a,lr.sizeFromShape(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new SD(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const TD={kernelName:Ot,backendName:"webgl",kernelFunc:ND};class CD{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const $D={kernelName:Mt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new CD(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},ED="return floor(x);",AD=AE({opSnippet:ED,packedOpSnippet:ED,cpuKernelImpl:qE}),RD={kernelName:Lt,backendName:"webgl",kernelFunc:AD},FD=RE({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),DD={kernelName:zt,backendName:"webgl",kernelFunc:FD};class _D{constructor(e){this.variableNames=["A"];const t=a$(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class OD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=a$(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const MD={kernelName:Vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(o||i){const e=le().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=LD&&e===zD||(zD=e,LD=document.createElement("canvas").getContext("2d",{willReadFrequently:zD})),LD.canvas.width=l,LD.canvas.height=u,LD.drawImage(r,0,0,l,u),r=LD.canvas}const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=A$.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=le().getBool("WEBGL_PACK")?new OD(h):new _D(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let LD,zD=le().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const PD={kernelName:Hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Tg.convertConv2DDataFormat(c),g=Tg.computeConv2DInfo(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[],x=null!=i,w=null!=o,v="leakyrelu"===d,k=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=MA({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(i,c)),w&&e.push(t(o,c)),v){const t=n.makeTensorInfo([],"float32",lr.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&le().getBool("WEBGL_EXP_CONV")){const e=d?FE(d,!0):null,t=new yF(g,x,e,w,v),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=k();y=n.runWebGLProgram(t,r,"float32",s)}else if(le().getBool("WEBGL_CONV_IM2COL"))y=vF({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=d?FE(d,!1):null,t=new mF(g,x,e,w,v),s=k();y=n.runWebGLProgram(t,s,"float32")}else y=wF({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const I=MA({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const BD={kernelName:js,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),lr.assert(Tg.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Tg.computeConv2DInfo(r.shape,a.shape,l,m,u,h,!0),y=le().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?FE(p,y):null,x=[r,a],w=null!=i,v=null!=o,k="leakyrelu"===p;if(w&&x.push(i),v&&x.push(o),k){const e=n.makeTensorInfo([],"float32",lr.createScalarValue(d,"float32"));x.push(e),f.push(e)}let I;I=y?new YF(g,w,b,v,k):new XF(g,w,b,v,k);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],N=n.runWebGLProgram(I,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class WD{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=k$(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const VD={kernelName:Wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=lr.sizeFromShape(s.shape),[l,u,c,h]=Tg.prepareAndValidate(s,r),p=MA({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),d=MA({inputs:{x:s},backend:n,attrs:{shape:[lr.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=KE(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new WD(i,h,[u,c],s.shape),m=n.runWebGLProgram(f,[d,p],d.dtype),g=MA({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class UD{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=k$(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function GD(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=lr.parseAxisParam(i,r.shape)[0];if(le().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];lr.assert(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=Tg.segment_util.collectGatherOpShapeInfo(r,a,l,o),c=lr.sizeFromShape(a.shape),h=[],p=MA({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=MA({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(p),h.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=XE(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new UD(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=MA({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const HD={kernelName:Bt,backendName:"webgl",kernelFunc:GD},jD=RE({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:YE,dtype:"bool"}),qD={kernelName:Vt,backendName:"webgl",kernelFunc:jD},KD=RE({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:ZE}),XD={kernelName:Ut,backendName:"webgl",kernelFunc:KD};const YD={kernelName:Ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return kD(s,!0,n)}},ZD=AE({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),JD={kernelName:qt,backendName:"webgl",kernelFunc:ZD},QD=AE({opSnippet:"return float(isinf(x));",dtype:"bool"}),e_={kernelName:Kt,backendName:"webgl",kernelFunc:QD},t_=AE({opSnippet:"return float(isnan(x));",dtype:"bool"}),n_={kernelName:Xt,backendName:"webgl",kernelFunc:t_},s_=RE({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:JE,dtype:"bool"}),r_={kernelName:Zt,backendName:"webgl",kernelFunc:s_},a_=RE({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:QE,dtype:"bool"}),i_={kernelName:Jt,backendName:"webgl",kernelFunc:a_};const o_={kernelName:Qt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=eA(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},l_=AE({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:tA}),u_={kernelName:en,backendName:"webgl",kernelFunc:l_},c_=AE({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),h_={kernelName:tn,backendName:"webgl",kernelFunc:c_},p_=RE({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),d_={kernelName:nn,backendName:"webgl",kernelFunc:p_},f_=AE({opSnippet:"return float(!(x >= 1.0));"}),m_={kernelName:sn,backendName:"webgl",kernelFunc:f_},g_=RE({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),y_={kernelName:rn,backendName:"webgl",kernelFunc:g_};class b_{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class x_{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const w_={kernelName:un,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=le().getBool("WEBGL_PACK_NORMALIZATION")?new x_(r.shape,a,i,o,l):new b_(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class v_{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const k_={kernelName:cn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new v_(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function I_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=lr.parseAxisParam(a,r.shape);let u=l;const c=Tg.getAxesPermutation(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=AA(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype);n.texData.get(d.dataId).values=s}else d=UA(r,c,n);u=Tg.getInnerMostAxes(u.length,o)}Tg.assertAxesAreInnerMostDims("max",u,o);const[f,m]=Tg.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(i&&(y=Tg.expandShapeToKeepDim(f,l)),p){const e=n.texData.get(d.dataId).values,t=nA(e,lr.sizeFromShape(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=lr.sizeFromShape(t),a=MA({inputs:{x:e},attrs:{shape:[lr.sizeFromShape(e.shape)/r,r]},backend:s}),i=BA(a,e.dtype,"max",s),o=MA({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const S_={kernelName:pn,backendName:"webgl",kernelFunc:I_},N_=RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:sA}),T_={kernelName:dn,backendName:"webgl",kernelFunc:N_};const C_={kernelName:fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;iE(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;lr.assert(Tg.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tg.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&lr.arraysEqual(u.inShape,u.outShape))return gE({inputs:{x:r},backend:n});const c=new CR(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const $_={kernelName:gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Tg.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),h=new $R(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class E_{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class A_{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const R_={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Tg.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new $R(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new A_(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const F_={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;iE([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Tg.computePool2DInfo(o.shape,l,u,1,c,h),d=new CR(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new E_(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const D_={kernelName:bn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;lr.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];lr.assert(Tg.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Tg.computePool2DInfo(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new CR(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new CR(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}};const __={kernelName:xn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=lr.parseAxisParam(a,s.shape);let u=l;const c=Tg.getAxesPermutation(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=AA(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype);i.texData.get(f.dataId).values=n}else f=UA(s,c,i);d.push(f),u=Tg.getInnerMostAxes(u.length,o)}Tg.assertAxesAreInnerMostDims("sum",u,o);const[m,g]=Tg.computeOutAndReduceShapes(f.shape,u);let y=m;r&&(y=Tg.expandShapeToKeepDim(m,l));const b=function(e,t,n,s){const r=lr.sizeFromShape(t),a=MA({inputs:{x:e},attrs:{shape:[lr.sizeFromShape(e.shape)/r,r]},backend:s}),i=BA(a,"float32","mean",s),o=MA({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};const O_={kernelName:wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=lr.parseAxisParam(a,r.shape);let u=l;const c=Tg.getAxesPermutation(u,o);let h=r;null!=c&&(h=jA({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tg.getInnerMostAxes(u.length,r.shape.length)),Tg.assertAxesAreInnerMostDims("min",u,o);const[p,d]=Tg.computeOutAndReduceShapes(h.shape,u),f=MA({inputs:{x:h},backend:n,attrs:{shape:[-1,lr.sizeFromShape(d)]}}),m=BA(f,f.dtype,"min",n);let g;if(i){g=MA({inputs:{x:m},backend:n,attrs:{shape:Tg.expandShapeToKeepDim(p,l)}})}else g=MA({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},M_=RE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:rA}),L_={kernelName:vn,backendName:"webgl",kernelFunc:M_};class z_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=k$(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class P_{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=k$(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=dE("rc",s),l=dE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const B_={kernelName:kn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new P_(s.shape,r,a):new z_(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},W_=RE({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),V_={kernelName:In,backendName:"webgl",kernelFunc:W_};class U_{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const G_=RE({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),H_={kernelName:Nt,backendName:"webgl",kernelFunc:G_},j_="return a - b;",q_=RE({opSnippet:j_,packedOpSnippet:j_,supportsComplex:!0,cpuKernelImpl:CA}),K_={kernelName:Es,backendName:"webgl",kernelFunc:q_};function X_(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=lr.parseAxisParam([a],r.shape),o=I_({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Tg.expandShapeToKeepDim(o.shape,i),u=MA({inputs:{x:o},backend:n,attrs:{shape:l}}),c=q_({inputs:{a:r,b:u},backend:n}),h=fD({inputs:{x:c},backend:n}),p=GA({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=MA({inputs:{x:p},backend:n,attrs:{shape:l}}),f=G_({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const Y_={kernelName:gs,backendName:"webgl",kernelFunc:X_};const Z_={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:X_({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new U_(u,c,a),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}};const J_={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=iA(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=le().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new EE(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new TE(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(r,[s],s.dtype)}},Q_=Gy.nonMaxSuppressionV3Impl;const eO={kernelName:$n,backendName:"webgl",kernelFunc:function(e){Tg.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=Q_(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},tO=Gy.nonMaxSuppressionV4Impl;const nO={kernelName:En,backendName:"webgl",kernelFunc:function(e){Tg.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=tO(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},sO=Gy.nonMaxSuppressionV5Impl;const rO={kernelName:An,backendName:"webgl",kernelFunc:function(e){Tg.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=sO(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class aO{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const iO={kernelName:Fn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s,u=lr.sizeFromShape(r.shape),c=new aO(u,i,o,l),h=MA({inputs:{x:r},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const d=MA({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function oO(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=XR({inputs:{input:s},backend:n}),t=oO({inputs:{x:e},backend:n}),r=cF({inputs:{input:s},backend:n}),a=oO({inputs:{x:r},backend:n}),i=bE({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return ND({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const lO={kernelName:Bs,backendName:"webgl",kernelFunc:oO};const uO={kernelName:Rn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=XR({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=cF({inputs:{input:r},backend:s}),i=oO({inputs:{x:a},backend:s}),o=bE({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return ND({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const cO={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return gD({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{lr.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),lr.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=dF({inputs:t.map((e=>{const t=gD({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class hO{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=k$(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class pO{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=k$(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=dE("rc",s),l=dE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const dO=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===lr.sizeFromShape(r.shape)){return ND({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const o=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pO(r.shape,a,i):new hO(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},fO={kernelName:_n,backendName:"webgl",kernelFunc:dO},mO=RE({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),gO={kernelName:Mn,backendName:"webgl",kernelFunc:mO};const yO={kernelName:zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=lr.parseAxisParam(a,r.shape);let c=u;const h=Tg.getAxesPermutation(c,o);let p,d=r;if(null!=h&&(d=jA({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Tg.getInnerMostAxes(c.length,o),l.push(d)),Tg.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=lA(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Tg.computeOutAndReduceShapes(d.shape,c),s=lr.sizeFromShape(t),a=MA({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=BA(a,Aa(r.dtype),"prod",n);p=MA({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Tg.expandShapeToKeepDim(p.shape,u);p=MA({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}};const bO={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[p,d,f]=uA(l,u,c,a.shape,a.dtype,h,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const xO={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=cA(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const wO={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),d=o.map((e=>e.shape)),[f,m]=hA(u,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,a.dtype,m)}},vO=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=pA(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},kO={kernelName:Vn,backendName:"webgl",kernelFunc:vO},IO=AE({opSnippet:"return 1.0 / x;"}),SO={kernelName:Gn,backendName:"webgl",kernelFunc:IO},NO=AE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),TO={kernelName:Hn,backendName:"webgl",kernelFunc:NO},CO=AE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),$O={kernelName:Zn,backendName:"webgl",kernelFunc:CO};class EO{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class AO{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const RO={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new AO(r.shape,l,u,a,i):new EO(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class FO{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const DO={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new FO(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class _O{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class OO{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const MO={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=le().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new OO(r.shape,l,u,a,i):new _O(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class LO{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const zO={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new LO(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class PO{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=k$(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class BO{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=dE("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=k$(n);var o;function l(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const WO={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=lr.parseAxisParam(a,r.shape);if(0===i)return gE({inputs:{x:r},backend:n});const l=le().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new BO(r.shape,o):new PO(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class VO{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const UO={kernelName:Us,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new VO(s.shape,a),[u,c]=Tg.getImageCenter(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},GO=AE({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),HO={kernelName:Qn,backendName:"webgl",kernelFunc:GO},jO=AE({opSnippet:"return inversesqrt(x);",cpuKernelImpl:dA}),qO={kernelName:es,backendName:"webgl",kernelFunc:jO};class KO{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=k$(r.length),u=k$(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let p="";1===s?p="i":2===s&&(p="i, coords[1]");const d=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class XO{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=k$(r.length),u=k$(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let p="";1===s?p="i":2===s&&(p="i, coords[1]");const d=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",y=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${y};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${d};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const YO={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tg.calculateShapes(a,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=MA({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=MA({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=le().getBool("WEBGL_PACK")?new XO(l,o,d.shape.length,f.shape.length,c,p):new KO(l,o,d.shape.length,f.shape.length,c,p);const y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=MA({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class ZO{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===le().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const JO={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new ZO(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class QO{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=k$(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const eM={kernelName:rs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new QO(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],Ea(r.dtype,a.dtype))}},tM=AE({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Tg.SELU_SCALEALPHA};\n  float scale = ${Tg.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),nM={kernelName:as,backendName:"webgl",kernelFunc:tM},sM=AE({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:mA}),rM={kernelName:cs,backendName:"webgl",kernelFunc:sM},aM=AE({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),iM={kernelName:us,backendName:"webgl",kernelFunc:aM},oM=AE({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${fE}\n  return result;\n`}),lM={kernelName:os,backendName:"webgl",kernelFunc:oM},uM=AE({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),cM={kernelName:ls,backendName:"webgl",kernelFunc:uM},hM=AE({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),pM={kernelName:hs,backendName:"webgl",kernelFunc:hM},dM={kernelName:fs,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;lr.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=dO({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=Tg.getReshaped(c.shape,a,o,!1),p=Tg.getPermuted(h.length,a.length,!1),d=Tg.getReshapedPermuted(c.shape,a,o,!1),f=MA({inputs:{x:c},backend:n,attrs:{shape:h}}),m=jA({inputs:{x:f},backend:n,attrs:{perm:p}}),g=MA({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const fM={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=bA(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const mM={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=xA(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const gM={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=wA(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const yM={kernelName:ws,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=wA(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const bM={kernelName:vs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Tg.calculateShapes(a,r,o);if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=lr.decodeString(n.readSync(i.dataId)[0]),d=fA(e,t,o,p,c,u,l,h,s,false);return n.makeTensorInfo(o,d.dtype,d.values)}const d=new KO(u,l,r.shape.length,a.shape.length,h,[p,1],false),f=n.runWebGLProgram(d,[a,r,i],a.dtype),m=MA({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}};const xM={kernelName:ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=lr.parseAxisParam(i,r.shape)[0],l=Tg.prepareSplitSize(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=VR({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},wM="return sqrt(x);",vM=AE({opSnippet:wM,packedOpSnippet:wM,cpuKernelImpl:vA}),kM={kernelName:ps,backendName:"webgl",kernelFunc:vM},IM=AE({opSnippet:"return x * x;"}),SM={kernelName:Is,backendName:"webgl",kernelFunc:IM},NM="return (a - b) * (a - b);",TM=RE({opSnippet:NM,packedOpSnippet:NM}),CM={kernelName:ks,backendName:"webgl",kernelFunc:TM};const $M={kernelName:Ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=n.readSync(r.dataId),i=Tg.fromUint8ToStringArray(a),o=kA(i,"string",s);return n.makeTensorInfo(r.shape,"string",o)}};const EM={kernelName:Ws,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new TE(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class AM{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=k$(n.length),a=k$(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const RM={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=og.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=MA({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){lr.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=og.computeOutShape(b,x,w),t=VR({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=MA({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=dl(r.shape,r.dtype,e),s=IA(d,t,w,b);v=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new AM(b,w,d);v=n.runWebGLProgram(e,[r],r.dtype)}}const k=MA({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}};const FM={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=SA(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const DM={kernelName:Cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=NA(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const _M={kernelName:$s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=TA(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},OM=AE({opSnippet:"return tan(x);"}),MM={kernelName:As,backendName:"webgl",kernelFunc:OM},LM=AE({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),zM={kernelName:Rs,backendName:"webgl",kernelFunc:LM};const PM={kernelName:ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:i}=t,{}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tg.calculateShapes(i,a,r.shape),p=[h/u,u];if(0===h)return n.makeTensorInfo(r.shape,a.dtype);const d=MA({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=MA({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),m=MA({inputs:{x:r},backend:n,attrs:{shape:p}}),g=new KO(l,o,d.shape.length,f.shape.length,c,p,!1,!0),y=n.runWebGLProgram(g,[f,d,m],m.dtype),b=MA({inputs:{x:y},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class BM{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=k$(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function WM(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>lr.decodeString(e))):e,s=dl(r.shape,r.dtype,t),i=$A(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new BM(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const VM={kernelName:Fs,backendName:"webgl",kernelFunc:WM};class UM{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class GM{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function HM(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function jM(e){let t=1;for(;t<e;)t*=2;return t}const qM={kernelName:Ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=le().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=le().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=EA(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,ND({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=lr.sizeFromShape(u)/c,m=MA({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&HM(n,d);const g=jM(a),y=jM(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const r=x(),a=new UM(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,r,"int32",i),HM(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),s=new GM([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),HM(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let v=b;b=VR({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),HM(n,v);let k=GD({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});HM(n,m);const I=u.slice(0,-1);I.push(a),v=b,b=MA({inputs:{x:b},attrs:{shape:I},backend:n}),HM(n,v);const S=k;return k=MA({inputs:{x:k},attrs:{shape:I},backend:n}),HM(n,S),[k,b]}};class KM{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const XM={kernelName:_s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new KM(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const YM={kernelName:Ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;iE(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=RA(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const ZM={kernelName:Ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=VR({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=MA({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class JM{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const QM=[XA,ZA,QA,tR,rR,oR,lR,uR,mR,gR,bR,wR,kR,SR,TR,ER,AR,DR,_R,OR,zR,GR,HR,jR,ZR,eF,sF,xE,iF,fF,kF,CF,EF,AF,RF,FF,_F,MF,zF,GF,HF,jF,KF,ZF,eD,tD,sD,aD,iD,lD,uD,hD,dD,mD,yD,wD,ID,TD,$D,RD,DD,MD,PD,BD,VD,HD,qD,XD,yE,YD,hF,JD,e_,n_,kE,r_,i_,o_,u_,h_,d_,m_,y_,w_,k_,S_,T_,C_,$_,R_,F_,D_,__,O_,L_,B_,V_,Z_,_A,J_,eO,nO,rO,KR,iO,uO,cO,fO,gO,NE,yO,bO,xO,wO,kO,YR,H_,SO,TO,$O,LA,RO,DO,MO,zO,WO,UO,HO,qO,YO,JO,eM,nM,rM,iM,lM,cM,UR,Y_,pM,dM,fM,mM,gM,yM,bM,xM,kM,SM,CM,$M,EM,RM,FM,DM,_M,K_,HA,MM,zM,PM,VM,qM,XM,qA,YM,ZM,{kernelName:zs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Tg.getAxesPermutation([u],o);let h=r;null!=c&&(h=jA({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Tg.getInnerMostAxes(1,o)[0]);const p=Tg.segment_util.computeOutShape(h.shape,u,i),d=lr.sizeFromShape([h.shape[u]]),f=MA({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=Aa(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Tg.segment_util.segOpComputeOptimalWindowSize(o,a),c=new JM({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=vO({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=WM({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return g(h,t,d,r,a)},y=MA({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Tg.getUndoAxesPermutation(c);b=jA({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},lO];for(const e of QM)nr(e);const eL=le();eL.registerFlag("HAS_WEBGL",(()=>eL.getNumber("WEBGL_VERSION")>0)),eL.registerFlag("WEBGL_VERSION",(()=>sE(2)?2:sE(1)?1:0)),eL.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),eL.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===eL.get("WEBGL_VERSION"))),eL.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),eL.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),eL.registerFlag("WEBGL_PACK",(()=>eL.getBool("HAS_WEBGL"))),eL.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_CLIP",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_PACK_REDUCE",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_LAZILY_UNPACK",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_CONV_IM2COL",(()=>eL.getBool("WEBGL_PACK"))),eL.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==eE){const t=$$(e);eE=t.getParameter(t.MAX_TEXTURE_SIZE)}return eE}(eL.getNumber("WEBGL_VERSION")))),eL.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==tE){const t=$$(e);tE=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,tE)}(eL.getNumber("WEBGL_VERSION")))),eL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=eL.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=$$(e);return t=nE(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:nE(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),eL.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>eL.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ga.isMobile())),eL.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=$$(e);if(1===e){if(!nE(t,"OES_texture_float"))return!1}else if(!nE(t,"EXT_color_buffer_float"))return!1;return aE(t)}(eL.getNumber("WEBGL_VERSION")))),eL.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!eL.getBool("WEBGL_FORCE_F16_TEXTURES")&&eL.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),eL.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>rE(eL.getNumber("WEBGL_VERSION")))),eL.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=eL.getNumber("WEBGL_VERSION"))&&null!=$$(e).fenceSync;var e})),eL.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>eL.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),eL.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),eL.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ga.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),eL.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),eL.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),eL.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),eL.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),eL.registerFlag("WEBGL_EXP_CONV",(()=>!1)),eL.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>eL.getBool("IS_TEST"))),eL.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),eL.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),eL.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),eL.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));class tL{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=E$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=a$();this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?o$(["r","c","d"],e):i$(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class nL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=E$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=a$();this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?o$(["r","c","d"],e):i$(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class sL{constructor(e){this.variableNames=["A"],this.outTexUsage=A$.DOWNLOAD;const t=a$();this.outputShape=e,this.userCode=`\n      ${c$}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class rL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=A$.DOWNLOAD;const t=a$();this.outputShape=e,this.userCode=`\n      ${c$}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const aL={R:0,G:1,B:2,A:3};class iL{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=a$();this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${aL[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":u$(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class oL{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=a$();this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":u$(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function lL(e){const t=a$();return function(e,t){const n=q$(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(M$(e,(()=>e.shaderSource(n,t))),M$(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function uL(e){return function(e,t){const n=q$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return M$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),M$(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function cL(e){return function(e,t){const n=q$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return M$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),M$(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function hL(e,t,n,s,r,a){!function(e,t){const n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return q$(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return M$(e,(()=>e.bindTexture(o,i))),M$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),M$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),M$(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),M$(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===le().getNumber("WEBGL_VERSION")?M$(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):M$(e,(()=>e.texStorage2D(o,1,s,t,n))),M$(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function pL(e){return e.internalFormatFloat}function dL(e){return e.internalFormatHalfFloat}function fL(e){return e.downloadTextureFormat}function mL(e){return e.internalFormatPackedFloat}function gL(e){return e.internalFormatPackedHalfFloat}function yL(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=_$(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class bL{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=le().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){T$[e]=t}(t,e)):this.gl=$$(t),e=this.gl,2===le().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>M$(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>M$(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>M$(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>M$(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>M$(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>M$(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>M$(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>M$(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===le().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=z$(this.gl,e),nE(this.gl,t))this.textureHalfFloatExtension=z$(this.gl,t);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),nE(this.gl,s))this.colorBufferHalfFloatExtension=z$(this.gl,s);else if(le().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",nE(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!nE(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=uL(this.gl),this.indexBuffer=cL(this.gl),this.framebuffer=function(e){return q$(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=O$(this.gl,this.textureHalfFloatExtension)}get debug(){return le().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;M$(e,(()=>e.finish())),M$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),M$(e,(()=>e.deleteFramebuffer(this.framebuffer))),M$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),M$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),M$(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=F$(t,n);return hL(e,r,a,pL(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=F$(t,n);return hL(e,r,a,dL(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=F$(t,n);return hL(e,r,a,fL(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){M$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===le().getNumber("WEBGL_VERSION")?M$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):M$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===le().getNumber("WEBGL_VERSION")?M$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):M$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),M$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;M$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===le().getNumber("WEBGL_VERSION")?M$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):M$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),M$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=_$(t,n);return hL(e,r,a,gL(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=_$(t,n);return hL(e,r,a,mL(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(H$(this.gl,this.framebuffer),this.outputTexture=null),M$(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=F$(t,n),i=new Uint8Array(t*n*4);return M$(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return yL(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();M$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return M$(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),M$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),M$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(le().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return M$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=lL(t));const n=function(e){return q$(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);M$(t,(()=>t.attachShader(n,this.vertexShader))),M$(t,(()=>t.attachShader(n,e))),function(e,t){if(M$(e,(()=>e.linkProgram(t))),!le().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&W$(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;M$(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){M$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),V$(e,t,"clipSpacePos",n,3,20,0)&&V$(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(M$(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&W$(this.gl,this.program),M$(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return q$(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),M$(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),U$(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=_$(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&W$(this.gl,this.program),j$(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}M$(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),M$(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=z$(this.gl,2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await lr.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in le().platform&&(n=le().platform.setTimeoutCustom.bind(le().platform)),lr.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),G$(this.gl,e,this.framebuffer),this.debug&&j$(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(G$(this.gl,this.outputTexture,this.framebuffer),this.debug&&j$(this.gl)):H$(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;G$(s,e,this.framebuffer),this.debug&&j$(s),this.outputTexture=e,M$(s,(()=>s.viewport(0,0,t,n))),M$(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),M$(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class xL{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=cE(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=dE("rc",this.rank),t=k$(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class wL{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=kL(t,n),r=IL(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=vL(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let i;return s===R$.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===R$.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===R$.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===R$.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===R$.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=kL(n,s),a=IL(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=vL(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=le().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function vL(e,t,n,s,r){const a=function(e,t){switch(e){case R$.PACKED_2X2_FLOAT32:return mL(t);case R$.PACKED_2X2_FLOAT16:return gL(t);case R$.UNPACKED_FLOAT32:return pL(t);case R$.UNPACKED_FLOAT16:return dL(t);case R$.PACKED_4X1_UNSIGNED_BYTE:return fL(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=_$(e[0],e[1]);i=t*n}else{const[t,n]=F$(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function kL(e,t){if(e===A$.UPLOAD)return R$.PACKED_2X2_FLOAT32;if(e===A$.RENDER||null==e)return function(e){return le().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?R$.PACKED_2X2_FLOAT32:R$.UNPACKED_FLOAT32:e?R$.PACKED_2X2_FLOAT16:R$.UNPACKED_FLOAT16}(t);if(e===A$.DOWNLOAD||e===A$.PIXELS)return R$.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function IL(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class SL{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=cE(this.outputShape.length);const t=e.length,n=dE("rc",t),s=k$(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const NL=Gy.whereImpl,TL={};const CL=le().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class $L extends l{nextDataId(){return $L.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!le().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof bL)t=e;else{const n=$$(le().getNumber("WEBGL_VERSION"),e);t=new bL(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=$$(le().getNumber("WEBGL_VERSION"));t=new bL(e),this.binaryCache=((n=le().getNumber("WEBGL_VERSION"))in TL||(TL[n]={}),TL[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new wL(this.gpgpu),this.numMBBeforeWarning=null==le().global.screen?1024:le().global.screen.height*le().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new o(this,Il())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const l=Z$(t),u=new iL(l,!1,a),c=this.runWebGLProgram(u,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if((le().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||le().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:A$.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(le().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:A$.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new EE(i,$E):new TE(i,$E);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=lr.now()),"complex64"===s){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);c=Tg.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=lr.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new EE(s,$E):new TE(s,$E);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(le().getBool("DEBUG")&&!le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===le().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&le().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...D$(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=Tg.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=lr.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;M$(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Il().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new EE(r,$E):new TE(r,$E);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=Il().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>lr.decodeString(e)));return dl(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return dl(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!L$(n)){if(le().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=lr.sizeFromShape(t);if(le().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...D$(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=le().getBool("WEBGL_PACK")&&!0===s,i=a?Z$(t):t,o=a?new rL(i):new sL(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=lr.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=lr.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=lr.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:lr.now(),endMs:null}}endTimer(e){return le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=lr.now(),e)}async getQueryTime(e){if(le().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=CL){return le().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&lr.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Tg.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return NL(e.shape,t)}packedUnaryOp(e,t,n){const s=new EE(e.shape,t),r=this.compileAndRun(s,[e],n);return Il().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=gA(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(le().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,CE,e.dtype);const t=new TE(e.shape,CE),n=this.compileAndRun(t,[e]);return Il().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&lr.isString(n[0])){const r=n.map((e=>lr.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return Il().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new SL(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new xL(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[X$(e.shape),...Y$(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[X$(t),...Y$(t)],a=new OA(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){const e=lr.sizeFromShape(r),n=t[0]*t[1]*4;lr.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=Z$(r);let o;o=s?new nL(i):new tL(i);const l=[null!=t?t:D$(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===E$.DENSE){const t=null!=a?a:D$(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===lr.sizeFromShape(i.shape))return o.values=lr.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&lr.sizeFromShape(t.shape)<=le().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!Q$(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=I$(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=lr.computeStrides(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&lr.arraysEqual(t.shape,a),f=1===lr.sizeFromShape(t.shape),m=Tg.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&lr.arraysEqual(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${g}_${i?l:""}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${le().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(h,(()=>oE(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),le().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(uE(t.inShapeInfos,n),uE([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===le().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let s=0;s<n.length;++s){const r=n[s],{uniform:a,offset:i,shape:o,texShape:l}=t.variablesLocations[s];if(o){const{uniformShape:n}=I$(t.program.packedInputs,r.shape,r.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(o,new Int32Array(n));break;case 2:e.gl.uniform2iv(o,new Int32Array(n));break;case 3:e.gl.uniform3iv(o,new Int32Array(n));break;case 4:e.gl.uniform4iv(o,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,r.texData.texShape[0],r.texData.texShape[1]),null!=a)if(r.isUniform)if(lr.sizeFromShape(r.shape)<2)e.gl.uniform1f(a,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=r.texData.slice&&null!=i&&e.gl.uniform1i(i,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,a,s)}const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=lr.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let n=0;n<t.program.customUniforms.length;++n){const s=t.program.customUniforms[n],a=t.customUniformLocations[n],i=r[n];if("float"===s.type)e.gl.uniform1fv(a,i);else if("vec2"===s.type)e.gl.uniform2fv(a,i);else if("vec3"===s.type)e.gl.uniform3fv(a,i);else if("vec4"===s.type)e.gl.uniform4fv(a,i);else if("int"===s.type)e.gl.uniform1iv(a,i);else if("ivec2"===s.type)e.gl.uniform2iv(a,i);else if("ivec3"===s.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==s.type)throw Error(`uniform type ${s.type} is not supported yet.`);e.gl.uniform4iv(a,i)}}e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=le().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=lr.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!le().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!le().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Tl((()=>{if(!le().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=le().getBool("DEBUG");le().set("DEBUG",!1);const t=this.abs(nu(1e-8)).dataSync()[0];if(le().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=lr.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=le().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=le().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&le().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?lr.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=lr.squeezeShape(e);e=t.newShape}let r=lr.sizeFromShape(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=X$(e);let n=2,s=2;e.length&&([n,s]=Y$(e)),r=t*(n/2)*(s/2),a=lr.sizeToSquarishShape(r).map((e=>2*e))}else a=lr.sizeToSquarishShape(r);return a}(n,o),t.texShape=c),null!=r){const e=Z$(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,h]=_$(c[0],c[1])),a=o?new oL(e,p):new iL(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?A$.PIXELS:A$.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,le().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=lr.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*lr.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Xy(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw B$(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=lE(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:i}=e,o=Il().backend;if(!o.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=o.writeTexture(s,t,n,r,a,i);return Il().makeTensorFromDataId(l,t,n,o)}}$L.nextDataId=0;Ga.isBrowser()&&Ml("webgl",(()=>new $L),2);class EL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,EL.prototype)}}class AL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,AL.prototype)}}class RL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,RL.prototype)}}class FL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,FL.prototype)}}class DL extends Error{constructor(e){super(e),Object.setPrototypeOf(this,DL.prototype)}}Error;class _L{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function OL(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function ML(e,t){if(!e)throw new DL(t)}function LL(e,t){let n=0;for(const s of e)s===t&&n++;return n}function zL(e){return 1===e.length?e[0]:e}function PL(e){return Array.isArray(e)?e:[e]}function BL(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function WL(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let VL={};function UL(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function GL(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>GL(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?GL(t):e[n]=t.value)}}}function HL(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in VL)a=VL[r];else if(a=t[r],null==a)throw new RL(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new RL(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in VL?[o,l]=VL.className:i in t&&([o,l]=t[i]),null==o)throw new RL(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(VL))e[t]=VL[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},VL);for(const e of Object.keys(n))VL[e]=n[e];GL(a.config);const s=l(o,a.config,n,r);return VL=Object.assign({},t),s}{const e=Object.assign({},VL);for(const e of Object.keys(n))VL[e]=n[e];const t=new o(a.config);return VL=Object.assign({},e),t}}}function jL(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function qL(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function KL(e){if(null==e)throw new RL(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function XL(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new RL(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function YL(e,t,n=0,s=1/0){return ML(n>=0),ML(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function ZL(e,t){Array.isArray(e)?(lr.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>ZL(e,`element ${n+1} of ${t}`)))):lr.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${JL(e)}.`))}function JL(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>JL(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function QL(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let ez=0;function tz(){return ez++}const nz={};function sz(e=""){return e in nz||(nz[e]=0),nz[e]+=1,e+nz[e].toString()}const rz=["channelsFirst","channelsLast"],az=["nearest","bilinear"],iz=["valid","same","causal"],oz=["max","avg"],lz=["sum","mul","concat","ave"],uz=new Map;function cz(e){XL(rz,"DataFormat",e)}function hz(e){XL(iz,"PaddingMode",e)}function pz(e){XL(oz,"PoolMode",e)}const dz=[];function fz(e,t){dz.push(e);try{const e=t();return dz.pop(),e}catch(e){throw dz.pop(),e}}function mz(e){if(!bz(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===dz.length?"":dz.join("/")+"/")+e}function gz(e){if(!bz(e))throw new Error("Not a valid tensor name: '"+e+"'");uz.has(e)||uz.set(e,0);const t=uz.get(e);if(uz.set(e,uz.get(e)+1),t>0){const n=`${e}_${t}`;return uz.set(n,1),n}return e}const yz=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function bz(e){return!!e.match(yz)}function xz(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function wz(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function vz(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function kz(e,t){if(t<e)throw new RL(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let Iz;function Sz(){return null==Iz&&(Iz=Ll().epsilon()),Iz}function Nz(e,t){return fl(e,t)}function Tz(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),ql(e,n)}function Cz(e,t,n){return Tl((()=>{switch(e.rank){case 1:return If(e,t,n);case 2:return Sf(e,[t,0],[n,e.shape[1]]);case 3:return Nf(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Tf(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return Kl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return Kl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new RL(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function $z(e,t,n){return Tl((()=>{switch(e.rank){case 1:return If(e,t,n);case 2:return Sf(e,[0,t],[e.shape[0],n]);case 3:return Nf(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Tf(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new RL(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Ez(e,t,n,s){return Tl((()=>{switch(e.rank){case 1:return If(e,t,n);case 2:switch(s){case 1:return Cz(e,t,n);case 2:return $z(e,t,n);default:throw new RL(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Cz(e,t,n);case 2:return Nf(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return $z(e,t,n);default:throw new RL(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Cz(e,t,n);case 2:return Tf(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Tf(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return $z(e,t,n);default:throw new RL(`The axis is not within the rank of the tensor ${s}`)}default:throw new RL(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Az(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Gl(e,t)}function Rz(e,t){switch(e.rank){case 1:return vp([e,t]);case 2:return kp([e,t],0);case 3:return Ip([e,t],0);case 4:return Sp([e,t],0);default:throw new RL(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function Fz(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new RL(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return dc(e,t)}function Dz(e,t=0,n=1,s,r){return of(e,t,n,s,r)}function _z(e,t,n,s){if(e.rank<2||t.rank<2)throw new FL(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new FL(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const r=!1,a=!1;return ru.matMul({a:e,b:t,transposeA:r,transposeB:a,bias:s?Lz(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=ql(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=ql(vh(t,c),[l,-1]);const h=[...r,...u],p=!1,d=!1;return ql(ru.matMul({a:e,b:t,transposeA:p,transposeB:d,bias:s?Lz(e.rank,s,"channelsLast"):null,activation:n}),h)}}function Oz(e,t,n){return Tl((()=>(t=Array.isArray(t)?nc(t,"int32"):fl(t,"int32"),qp(e,t,n))))}function Mz(e){return Vl(e,e)}function Lz(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new RL(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?ql(t,[1,s[0],1,1,1]):ql(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?ql(t,[1,1,1,1,s[0]]):ql(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?ql(t,[1,s[0],1,1]):ql(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?ql(t,[1,1,1,s[0]]):ql(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?ql(t,[1,s[0],1]):ql(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?ql(t,[1,1,s[0]]):ql(t,[1].concat(s))}else if(e<3)return t;throw new RL(`Unsupported input rank by biasAdd: ${t.rank}`)}function zz(e,t,n){return Tl((()=>(null==n&&(n="channelsLast"),cz(n),Pl(e,Lz(e.rank,t,n)))))}function Pz(e,t,n,s){return Tl((()=>rm(e,t,n,s)))}function Bz(e,t,n=!1){return n?e():t()}const Wz=["fanIn","fanOut","fanAvg"],Vz=["normal","uniform","truncatedNormal"];class Uz extends fm.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Gz extends Uz{apply(e,t){return Yl(e,t)}}Gz.className="Zeros",fm.registerClass(Gz);class Hz extends Uz{apply(e,t){return Ch(e,t)}}Hz.className="Ones",fm.registerClass(Hz);class jz extends Uz{constructor(e){if(super(),"object"!=typeof e)throw new RL(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new RL(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return Tl((()=>Vl(nu(this.value),Ch(e,t))))}getConfig(){return{value:this.value}}}jz.className="Constant",fm.registerClass(jz);class qz extends Uz{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return uf(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}qz.className="RandomUniform",fm.registerClass(qz);class Kz extends Uz{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FL(`randomNormal does not support dType ${t}.`);return Dz(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Kz.className="RandomNormal",fm.registerClass(Kz);class Xz extends Uz{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FL(`truncatedNormal does not support dType ${t}.`);return Bf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}Xz.className="TruncatedNormal",fm.registerClass(Xz);class Yz extends Uz{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return Tl((()=>{if(2!==e.length||e[0]!==e[1])throw new RL("Identity matrix initializer can only be used for 2D square matrices.");return Vl(this.gain,xh(e[0]))}))}getConfig(){return{gain:this.gain}}}Yz.className="Identity",fm.registerClass(Yz);class Zz extends Uz{constructor(e){if(super(),e.scale<0)throw new RL(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,XL(Wz,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){XL(Vz,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(cz(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=xz(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=xz(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=xz(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new FL(`${this.getClassName()} does not support dType ${t}.`);return Bf(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return uf(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}Zz.className="VarianceScaling",fm.registerClass(Zz);class Jz extends Zz{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}Jz.className="GlorotUniform",fm.registerClass(Jz);class Qz extends Zz{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}Qz.className="GlorotNormal",fm.registerClass(Qz);class eP extends Zz{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}eP.className="HeNormal",fm.registerClass(eP);class tP extends Zz{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}tP.className="HeUniform",fm.registerClass(tP);class nP extends Zz{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}nP.className="LeCunNormal",fm.registerClass(nP);class sP extends Zz{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Zz.className}}sP.className="LeCunUniform",fm.registerClass(sP);class rP extends Uz{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return Tl((()=>{if(e.length<2)throw new FL("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=lr.sizeFromShape(e.slice(0,-1)),s=e[e.length-1],r=n*s;r>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);const a=Dz([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),i=cm.qr(a,!1);let o=i[0];const l=i[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return o=Vl(o,l.sign()),n<s&&(o=o.transpose()),Vl(nu(this.gain),o.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}rP.className="Orthogonal",fm.registerClass(rP);const aP={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function iP(e,t={}){return HL(e,fm.SerializationMap.getMap().classNameMap,t,"initializer")}function oP(e){return UL(e)}function lP(e){if("string"==typeof e){const t=e in aP?aP[e]:e;if("GlorotNormal"===t)return new Qz;if("GlorotUniform"===t)return new Jz;if("HeNormal"===t)return new eP;if("HeUniform"===t)return new tP;if("LeCunNormal"===t)return new nP;if("LeCunUniform"===t)return new sP;{const e={};return e.className=t,e.config={},iP(e)}}return e instanceof Uz?e:iP(e)}function uP(e){return Array.isArray(e)&&Array.isArray(e[0])}function cP(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function hP(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new RL(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function pP(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new RL(`Expected exactly 1 Shape; got ${e.length}`)}return e}function dP(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const fP="Variable";class mP{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=tz(),n=null==n?fP:n,this.originalName=mz(n),this.name=gz(this.originalName),this.trainable_=s,this.constraint=r,this.val=Gf(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function gP(e){return e.map((e=>e.read()))}function yP(e){e.forEach((e=>{e[0].write(e[1])}))}class bP{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class xP{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=tz(),null!=a&&(this.originalName=mz(a),this.name=gz(this.originalName)),this.rank=t.length}}let wP=0;class vP{constructor(e,t){this.callArgs=t,this.id=wP++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let kP=0;class IP extends fm.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=kP++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=BL(e)+"_"+sz(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new AL(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new RL(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return zL(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return zL(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new EL(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new EL(`Layer ${this.name} is not connected, no input to return.`);return zL(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new EL(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new EL(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return zL(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=PL(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=PL(this.inputSpec);if(e.length!==t.length)throw new RL(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new RL(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new RL(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new RL(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new RL(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new RL(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new RL(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=PL(e);let s=!0;for(const e of n)if(!(e instanceof xP)){s=!1;break}let r=!0;for(const e of n)if(e instanceof xP){r=!1;break}if(s===r)throw new RL("Arguments to apply() must be all SymbolicTensors or all Tensors");return fz(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of PL(e))t.push(n.shape);this.build(zL(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=PL(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=zL(a),null!=this.activityRegularizer)throw new FL("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=PL(e);const t=[];for(const n of e)t.push(n.shape);return zL(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new xP(a,n,this,PL(e),t,this.name,s))):new xP(a,s,this,PL(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new FL("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new EL(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new EL(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new AL(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return dP(this.weights)}build(e){this.built=!0}getWeights(e=!1){return gP(e?this.trainableWeights:this.weights)}setWeights(e){Tl((()=>{const t=this.weights;if(t.length!==e.length)throw new RL(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=gP(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!lr.arraysEqual(a.shape,o.shape))throw new RL(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}yP(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new RL(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():lP("zeros"));const l=s.apply(t,n),u=new mP(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=PL(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=PL(e);t=PL(t),n=PL(n),s=PL(s),r=cP(r),a=cP(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new vP({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function SP(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=SP(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class NP extends IP{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:sz("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new RL("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new RL("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new RL("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new xP(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new vP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new RL(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function TP(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new RL("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new NP({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}NP.className="InputLayer",fm.registerClass(NP);class CP{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof CP)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new RL(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return fl(t,e.dtype)}catch(n){throw new RL(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof xP){if(null==this.id2Value[e.id])throw new RL(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new RL(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof xP){if(null==this.id2Value[e.id])throw new RL(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new RL(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&Cl(this.id2Mask)}}const $P=new _L,EP=new _L;function AP(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,p=$P.get(c);if(null==p){const e=function(e,t){lr.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=FP(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=FP(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:RP(s)}}(i,t);p=e.sorted,h=e.recipientCounts,$P.put(c,p),EP.put(c,h)}h={},r||Object.assign(h,EP.get(c));const d=new CP(t);for(let e=0;e<p.length;++e){if(null!=s){const e=Sl().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof NP)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=PL(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=DP(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||Cl(f)}return d.disposeMasks(),a?l:l[0]}function RP(e){const t={};for(const n in e)t[n]=e[n].size;return t}function FP(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function DP(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function _P(e,t){return Tl((()=>ph(Uu(Vl(e,e),t,!0))))}le().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=$P&&$P.setMaxEntries(e),null!=EP&&EP.setMaxEntries(e)}));class OP extends fm.Serializable{getConfig(){return{}}}class MP extends OP{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tl((()=>{const t=_P(e,this.axis),n=wp(t,0,this.maxValue);return Vl(e,Wl(n,Pl(Sz(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}MP.className="MaxNorm",fm.registerClass(MP);class LP extends OP{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tl((()=>Wl(e,Pl(Sz(),_P(e,this.axis)))))}getConfig(){return{axis:this.axis}}}LP.className="UnitNorm",fm.registerClass(LP);class zP extends OP{apply(e){return Pu(e)}}zP.className="NonNeg",fm.registerClass(zP);class PP extends OP{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return Tl((()=>{const t=_P(e,this.axis),n=Pl(Vl(this.rate,wp(t,this.minValue,this.maxValue)),Vl(1-this.rate,t));return Vl(e,Wl(n,Pl(Sz(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}PP.className="MinMaxNorm",fm.registerClass(PP);const BP={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function WP(e){return UL(e)}function VP(e,t={}){return HL(e,fm.SerializationMap.getMap().classNameMap,t,"constraint")}function UP(e){if(null==e)return null;if("string"==typeof e){return VP({className:e in BP?BP[e]:e,config:{}})}return e instanceof OP?e:VP(e)}async function GP(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];Cl(s)}}function HP(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var jP;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(jP||(jP={}));class qP{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class KP{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class XP extends qP{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=Tl((()=>Pl(this.totals[e],Vl(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:Tl((()=>{const n=Vl(Wl(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),$l(t[e])})))}}class YP extends qP{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class ZP extends qP{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Xy,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");lr.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():lr.now();return(...a)=>{const i=null!=n?n():lr.now();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await GP(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await GP(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await GP(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await GP(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await GP(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):lr.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await GP(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await GP(e),await this.trainEnd(e))}}function JP(e,t){if(null==e&&(e={}),e instanceof qP)return[e];if(Array.isArray(e)&&e[0]instanceof qP)return e;return PL(e).map((e=>new ZP(e,t)))}class QP{constructor(){}static registerCallbackConstructor(e,t){lr.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),QP.checkForDuplicate(t),null==QP.constructors[e]&&(QP.constructors[e]=[]),QP.constructors[e].push(t)}static checkForDuplicate(e){for(const t in QP.constructors){QP.constructors[+t].forEach((t=>{if(t===e)throw new RL("Duplicate callback constructor.")}))}}static clear(){QP.constructors={}}static createCallbacks(e){const t=[];for(const n in QP.constructors){const s=+n;e>=s&&t.push(...QP.constructors[s])}return t.map((e=>new e))}}function eB(e,t,n,s,r,a,i,o,l){const u=new YP,c=[new XP,...QP.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new KP(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function tB(e,t={},n=!1){return HL(e,fm.SerializationMap.getMap().classNameMap,t,"layer",n)}function nB(e,t){return Tl((()=>{"float32"!==e.dtype&&(e=fl(e,"float32"));const n=Uu(Mz(e),t,!0),s=oc(n.shape,Sz()),r=ph(pd(n,s));return Wl(e,r)}))}function sB(e,t){return Tl((()=>Nh(Mz(Lc(t,e)),-1)))}function rB(e,t){return Tl((()=>Nh(Qc(Lc(t,e)),-1)))}function aB(e,t){return Tl((()=>{const n=Lc(e,t),s=wp(Qc(e),Sz(),Number.MAX_VALUE),r=Qc(Wl(n,s));return Vl(100,Nh(r,-1))}))}function iB(e,t){return Tl((()=>{const n=wp(t,Sz(),Number.MAX_VALUE),s=Dh(Pl(1,n)),r=wp(e,Sz(),Number.MAX_VALUE),a=Dh(Pl(1,r));return Nh(Mz(Lc(s,a)),-1)}))}function oB(e,t,n=!1){return Tl((()=>{if(n)t=Cf(t);else{const e=Uu(t,t.shape.length-1,!0);t=Wl(t,e)}return t=wp(t,Sz(),1-Sz()),Kc(Uu(Vl(fl(e,"float32"),Dh(t)),t.shape.length-1))}))}function lB(e,t,n=!1){return Tl((()=>{const s=fl(jp(function(e){const t=[xz(e.shape)];return ql(e,t)}(e)),"int32"),r=(t=wp(t,Sz(),1-Sz())).shape;return oB(ql(xd(s,r[r.length-1]),r),t,n)}))}function uB(e,t){return Tl((()=>{let n;return n=wp(t,Sz(),1-Sz()),n=Dh(Wl(n,Lc(1,n))),Nh(function(e,t){if(!lr.arraysEqual(e.shape,t.shape))throw new RL(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return Tl((()=>{const n=Pu(t),s=Kc(Qc(t));return Pl(Lc(n,Vl(t,e)),zh(Lh(s)))}))}(e,n),-1)}))}function cB(e,t){return Tl((()=>{const n=wp(e,Sz(),1),s=wp(t,Sz(),1);return Uu(Vl(e,Dh(Wl(n,s))),-1)}))}function hB(e,t){return Tl((()=>{const n=nB(e,-1),s=nB(t,-1),r=Vl(n,s);return Kc(Uu(r,-1))}))}QP.constructors={};const pB={meanSquaredError:sB,meanAbsoluteError:rB,meanAbsolutePercentageError:aB,meanSquaredLogarithmicError:iB,squaredHinge:function(e,t){return Tl((()=>{const n=pd(0,Lc(1,Vl(e,t)));return Nh(Mz(n),-1)}))},hinge:function(e,t){return Tl((()=>{const n=pd(0,Lc(1,Vl(e,t)));return Nh(n,-1)}))},categoricalHinge:function(e,t){return Tl((()=>{const n=Uu(Vl(e,t),-1),s=uh(Vl(Lc(1,e),t),-1);return pd(0,Pl(1,Lc(s,n)))}))},logcosh:function(e,t){return Tl((()=>{const n=Math.log(2),s=Lc(t,e),r=Lc(Pl(s,Qp(Vl(-2,s))),n);return Nh(r,-1)}))},categoricalCrossentropy:oB,sparseCategoricalCrossentropy:lB,binaryCrossentropy:uB,kullbackLeiblerDivergence:cB,poisson:function(e,t){return Tl((()=>{const n=Dh(Pl(Sz(),t));return Nh(Lc(t,Vl(e,n)),-1)}))},cosineProximity:hB};function dB(e){if("string"==typeof e){if(e in pB)return pB[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new RL(t)}return e}function fB(e,t){return Tl((()=>{const n=Vl(.5,wd(t)),s=Nz(Mc(t,n),e.dtype);return Nh(zp(e,s),-1)}))}function mB(e,t){return Tl((()=>Nz(zp(tp(e,-1),tp(t,-1)),"float32")))}function gB(e,t){return Tl((()=>fl(Uu(jc(zp(e,1),zp(t,1))),"float32")))}function yB(e,t){return Tl((()=>{const n=gB(e,t),s=function(e,t){return Tl((()=>fl(Uu(jc(zp(e,0),zp(t,1))),"float32")))}(e,t),r=Pl(n,s);return fl(Bc(Mc(r,0),Wl(n,r),0),"float32")}))}function bB(e,t){return uB(e,t)}function xB(e,t){return e.rank===t.rank&&(e=gh(e,[e.rank-1])),(t=tp(t,-1)).dtype!==e.dtype&&(t=fl(t,e.dtype)),fl(zp(e,t),"float32")}const wB=oB,vB=lB,kB={binaryAccuracy:fB,categoricalAccuracy:mB,precision:yB,categoricalCrossentropy:wB,sparseCategoricalCrossentropy:vB,mse:sB,MSE:sB,mae:rB,MAE:rB,mape:aB,MAPE:aB,cosine:hB};function IB(e){if("string"==typeof e&&e in kB)return kB[e];if("string"!=typeof e&&null!=e)return e;throw new RL(`Unknown metric ${e}`)}function SB(e){if(ML(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(pB))if(pB[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(kB))if(kB[n]===e){t=n;break}return void 0!==t?t:e.name}}const NB=1048576;function TB(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!CB(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>NB&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function CB(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!CB(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!CB(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function $B(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),EB(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?AB(o[e],n,s):RB(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?dP(e.collectedTrainableWeights):dP(e.trainableWeights);return t}(e),u=dP(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function EB(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function AB(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}EB([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function RB(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];i.push(`${n}[${s}][${r}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];EB([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let e=1;e<i.length;++e)EB(["","","","",i[e]],t,s)}function FB(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function DB(e,t){if(null===e)return null;if("string"==typeof e)return WL(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];FB(t,r,s)?n.push(s):n.push(DB(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=WL(n);t[e]=DB(s,e)}}return t}}function _B(e,t){if(null==e)return null;if("string"==typeof e)return BL(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];FB(t,r,s)?n.push(s):n.push(_B(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=BL(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?_B(s,n):s}return t}}
/** @license See the LICENSE file. */class OB extends IP{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=sz(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],qL(this.inputs).length!==this.inputs.length)throw new RL(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);qL(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;ML(0===n,"input layer has >1 nodes"),ML(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof NP))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new AL(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(OB.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(jL);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof OB&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(jL);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new AL(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new AL(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new vP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new RL("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new RL(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new RL(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new RL(`${e.length} of ${s} weights are not set: ${e}`)}yP(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.5.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=_B(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return Tl((()=>{e=PL(e);const n=new CP;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return AP(this.outputs,n,t)}))}computeMask(e,t){return Tl((()=>{let n;return e=PL(e),n=null==t?OL(null,e.length):PL(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=cP(e);if(t.length!==this.inputLayers.length)throw new RL(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(jL);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=cP(t.computeOutputShape(zL(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];ML(t in n),r.push(n[t])}return zL(r)}runInternalGraph(e,t){null==t&&(t=OL(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(jL);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=PL(t.call(e,u)),l=PL(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=PL(t.call(s,u)),l=PL(t.computeMask(s,i));if(t.activityRegularizer)throw new FL("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){ML(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof OB?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=OB.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new RL(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new RL("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new RL(`No such layer: ${e}`)}calculateLosses(){return Tl((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=OB.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=OB.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[OB.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=OB.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=OB.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(zL(n),s)}function l(e){const n=e.name,a=tB(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new RL(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!KL(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];ML(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];ML(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new RL("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){Tl((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function MB(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function LB(e,t){return MB(e,t,"classWeight")}async function zB(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=Tl((()=>{if(1===e.shape.length)return ml(e);if(2===e.shape.length){if(e.shape[1]>1){return tp(e,1)}if(1===e.shape[1])return ql(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());Cl(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),nc(r,"float32")}return null}function PB(e,t){return Vl(e,t)}function BB(e,t){let n,s;const r=t;n=r.xs,s=r.ys,lr.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=WB("input",e.inputNames,n),i=WB("output",e.outputNames,s),o=a[0].shape[0];lr.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),lr.assert(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)lr.assert(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)lr.assert(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function WB(e,t,n){if(n instanceof ma)return[n];if(Array.isArray(n))return lr.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new RL(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function VB(e,t,n){const s=null!=n.batchesPerEpoch;if(lr.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),lr.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),lr.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),lr.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),lr.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(UB(n.validationData))lr.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new FL("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=JP(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=eB(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=BB(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=LB(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await zB(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);Cl(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,$l(n)}await p.onBatchEnd(h,a),HP(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=UB(n.validationData)?PL(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):PL(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function UB(e){return"function"==typeof e.iterator}function GB(e){lr.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function HB(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Cz(e,t,n-t))):Cz(e,t,n-t)}function jB(e,t){return Tl((()=>null==e?null:Array.isArray(e)?e.map((e=>jB(e,t))):Oz(e,"int32"===t.dtype?t:fl(t,"int32"))))}function qB(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function KB(e){const t=[];e instanceof ma&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Tz(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function XB(e,t){if(null==e)return;const n=[];if(t instanceof ma)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof ma)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function YB(e){return Array.isArray(e)}function ZB(e){return!function(e){return e instanceof ma}(e)&&!YB(e)}function JB(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(YB(e)&&e.length>0)t=!0;else if(ZB(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new RL(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(ZB(e)){a=[];for(const n of t){if(null==e[n])throw new RL(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(YB(e)){if(e.length!==t.length)throw new RL(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new RL(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=KB(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new RL(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new RL(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function QB(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new RL(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new RL(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new RL(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new RL(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class eW extends OB{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new RL("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");$B(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>qy.adagrad(.01),Adadelta:()=>qy.adadelta(1,.95,Sz()),Adam:()=>qy.adam(.001,.9,.999,Sz()),Adamax:()=>qy.adamax(.002,.9,.999,Sz(),0),RMSProp:()=>qy.rmsprop(.001,.9,0,Sz()),SGD:()=>qy.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new RL(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof bm))throw new RL("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new RL(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>dB(e)))}else{const n=dB(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new RL(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(dB(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],fz("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};fz("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===uB?-1!==["accuracy","acc"].indexOf(i)?s=fB:-1!==["crossentropy","ce"].indexOf(i)&&(s=bB):this.lossFunctions[e]===lB?-1!==["accuracy","acc"].indexOf(i)?s=xB:-1!==["crossentropy","ce"].indexOf(i)&&(s=vB):-1!==["accuracy","acc"].indexOf(i)?s=mB:-1!==["crossentropy","ce"].indexOf(i)&&(s=wB),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=IB(i);a=e,n=""+SB(i)}let t;fz(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;GB(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return zL(this.testLoop(i,a,s,n.verbose,n.steps))}finally{XB(r[0],e),XB(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new FL("Verbose mode is not implemented yet.");lr.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=Tl((()=>{if(t.value){const{xs:n,ys:s}=BB(e,t.value),i=n.concat(s),u=Tl((()=>r(i)));if(Cl(i),0===l)for(let e=0;e<u.length;++e)a.push(nu(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=Tl((()=>Pl(a[e],Vl(c,t)))),l>0&&Cl(n)}Cl(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=Wl(a[e],o),Cl(t)}return zL(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new RL(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new RL(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new RL("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new CP;if(e instanceof ma&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new RL(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new RL(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=AP(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=OL(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new RL(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return Tl((()=>{const s=this.checkNumSamples(e);if(n)throw new FL("Verbose predictLoop() is not implemented yet.");const r=qB(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){Tl((()=>{const n=r[t][0],s=r[t][1],a=HB(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new CP(i);return AP(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return zL(a.map((e=>Gl(e,0))))}))}predict(e,t={}){const n=KB(e);QB(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return GB(s),this.predictLoop(n,s)}finally{XB(n,e)}}predictOnBatch(e){QB(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new AL("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===lB?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=qL(e.map((e=>e.shape[0])));s.sort();const r=qL(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new RL(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new RL(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!lr.arraysEqual(s,r))throw new RL(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=JB(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=JB(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[sB,uB,oB];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===oB&&1===a.shape[a.shape.length-1])throw new RL(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new RL(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new RL(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=LB(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await zB(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return Tl((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new FL("Verbose mode is not implemented yet.");if(null!=r)throw new FL("steps mode in testLoop() is not implemented yet");{const s=qB(a,n),r=nc(kz(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=Cz(r,a,o-a),u=jB(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(nu(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=Pl(i[e],Vl(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=Wl(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(LL(e,s)>1){r+=`_${LL(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new CP(e),o=AP(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=PB(n,r[e]));const a=Nh(n);t.push(a),l=0===e?n:Pl(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Nh(t(s[r],o[r]))}$l(n),a.push(n)}return l=Nh(l),this.calculateLosses().forEach((e=>{l=Pl(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>Tl((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new CP(a),o=AP(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Nh(s(r[e],o[e]));n=0===e?a:Pl(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Nh(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,r,a,i,o,l,u,c,h;this.isTraining=!0;try{const p=null==n.batchSize?32:n.batchSize;GB(p);const d=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,d,p);s=f[0],r=f[1],h=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new FL("validationData including sample weights is not supported yet."):new RL(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);o=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(o,l,null,null,e,p);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=HB(s,e,t),a=s,s=HB(s,0,e),c=HB(r,e,t),i=r,r=HB(r,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const y=s.concat(r).concat(h);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const k=JP(n.callbacks,n.yieldEvery);return await this.fitLoop(b,y,x,p,n.epochs,n.verbose,k,w,m,n.shuffle,v,n.initialEpoch,null,null)}finally{this.isTraining=!1,XB(s,e),XB(r,t),XB(a,e),XB(i,t),XB(u,o),XB(c,l),null!=h&&Cl(h)}}async fitLoop(e,t,n,s,r,a,i,o,l,u,c,h,p,d){null==s&&(s=32),null==r&&(r=1),null==u&&(u=!0),null==h&&(h=0);let f=!1;if(null!=o&&null!=l&&(f=!0),null!=d&&(f=!0,null==p))throw new RL("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,p,"steps_per_epoch");let g;null!=m&&(g=kz(0,m)),null==a&&(a=1);const{callbackList:y,history:b}=eB(i,a,r,h,m,p,s,f,c);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let a=h;a<r;++a){await y.onEpochBegin(a);const r={};if(null!=p)throw new FL("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new FL("batch shuffling is not implemneted yet");u&&lr.shuffle(g);const a=nc(g),i=qB(m,s);for(let u=0;u<i.length;++u){const c={};if(await y.onBatchBegin(u,c),Tl((()=>{const h=i[u][0],p=i[u][1],d=Cz(a,h,p-h);c.batch=u,c.size=p-h;const m=jB(t,d),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],s=g[e];c[t]=s,$l(s)}if(u===i.length-1&&f){const e=this.testLoop(o,l,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];$l(a),r["val_"+s]=a}}})),await y.onBatchEnd(u,c),HP(c),this.stopTraining_)break}a.dispose()}if(await y.onEpochEnd(a,r),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return VB(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return Cl(a),XB(n[0],e),XB(n[1],t),zL(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=Sl().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-Sl().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=BL(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>BL(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=BL(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[BL(SB(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>BL(SB(e))));{const e={};for(const t in this.metrics)e[t]=BL(SB(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=tB(DB(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=WL(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>WL(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=WL(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>WL(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=WL(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=$m.getSaveHandlers(e);if(0===t.length)throw new RL(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new RL(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new RL("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await $m.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.5.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await $m.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=$m.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;TB(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){TB(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}eW.className="Model",fm.registerClass(eW);class tW extends eW{}async function nW(e,t){if(null==t&&(t={}),"string"==typeof e){const n=$m.getLoadHandlers(e,t);if(0===n.length)n.push($m.browserHTTPRequest(e,t));else if(n.length>1)throw new RL(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return async function(e,t,n){null==n&&(n={});if(null==e.load)throw new RL("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const s=await e.load();let r=s.modelTopology;null!=r.model_config&&(r=r.model_config);const a=null==n.strict||n.strict,i=null!=s.weightData&&null!=s.weightSpecs&&a,o=tB(DB(r),t,i),l=s.trainingConfig;null!=l&&o.loadTrainingConfig(l);null!=s.userDefinedMetadata&&o.setUserDefinedMetadata(s.userDefinedMetadata);if(null!=s.weightData){if(null==s.weightSpecs)throw new RL("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");const{modelWeights:e,optimizerWeights:t}=function(e,t){const n=$m.decodeWeights(e,t),s={},r=[];return t.forEach((e=>{"optimizer"===e.group?r.push({name:e.name,tensor:n[e.name]}):s[e.name]=n[e.name]})),{modelWeights:s,optimizerWeights:r}}(s.weightData,s.weightSpecs);o.loadWeights(e,a),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),Cl(e),Cl(t.map((e=>e.tensor)))}return o}(e,void 0,t)}tW.className="Functional",fm.registerClass(tW);class sW extends eW{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:sz("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new RL(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof sW||e instanceof eW;let n;if(t){if(n=e,1!==n.outputs.length)throw new RL("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new RL("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new RL("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=TP({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new RL(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new RL("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=SP(this.outputs[0])}this.inboundNodes=[],new vP({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:OL(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(pP(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new eW({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new AL("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new AL("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new AL("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new AL("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new RL("Legacy serialization format not supported yet.");r=t}else lr.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof sW))throw new FL(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=tB(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new RL("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new RL("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}sW.className="Sequential",fm.registerClass(sW);class rW extends fm.Serializable{getConfig(){return{}}}class aW extends rW{apply(e,t=1){return function(e,t=1){if(1!==t)throw new FL(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Mu(e)}(e,t)}}aW.className="elu",fm.registerClass(aW);class iW extends rW{apply(e){return yf(e)}}iW.className="selu",fm.registerClass(iW);class oW extends rW{apply(e){return Pu(e)}}oW.className="relu",fm.registerClass(oW);class lW extends rW{apply(e){return Tl((()=>qc(6,Pu(e))))}}lW.className="relu6",fm.registerClass(lW);class uW extends rW{apply(e){return e}}uW.className="linear",fm.registerClass(uW);class cW extends rW{apply(e){return Wu(e)}}cW.className="sigmoid",fm.registerClass(cW);class hW extends rW{apply(e){return function(e){return Tl((()=>{const t=Pl(.5,Vl(.2,e));return wp(t,0,1)}))}(e)}}hW.className="hardSigmoid",fm.registerClass(hW);class pW extends rW{apply(e){return Qp(e)}}pW.className="softplus",fm.registerClass(pW);class dW extends rW{apply(e){return function(e){return Tl((()=>Wl(e,Pl(Qc(e),1))))}(e)}}dW.className="softsign",fm.registerClass(dW);class fW extends rW{apply(e){return cp(e)}}fW.className="tanh",fm.registerClass(fW);class mW extends rW{apply(e,t=-1){return Cf(e,t)}}mW.className="softmax",fm.registerClass(mW);class gW extends rW{apply(e,t=-1){return td(e,t)}}gW.className="logSoftmax",fm.registerClass(gW);class yW extends rW{apply(e,t=1){return Tl((()=>Vl(Wu(Vl(e,t)),e)))}}yW.className="swish",fm.registerClass(yW);class bW extends rW{apply(e){return Tl((()=>Vl(e,cp(Qp(e)))))}}function xW(e){return e.getClassName()}function wW(e,t={}){return HL(e,fm.SerializationMap.getMap().classNameMap,t,"activation")}function vW(e){if(null==e){const e={className:"linear",config:{}};return wW(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},wW(t)}return e instanceof rW?e:wW(e)}function kW(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}bW.className="mish",fm.registerClass(bW);class IW extends fm.Serializable{}class SW extends IW{constructor(e){super(),kW(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return Tl((()=>{let t=Yl([1]);return this.hasL1&&(t=Pl(t,Uu(Vl(this.l1,Qc(e))))),this.hasL2&&(t=Pl(t,Uu(Vl(this.l2,Mz(e))))),ql(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}SW.className="L1L2",fm.registerClass(SW);const NW={l1l2:"L1L2"};function TW(e){return UL(e)}function CW(e,t={}){return HL(e,fm.SerializationMap.getMap().classNameMap,t,"regularizer")}function $W(e){if(null==e)return null;if("string"==typeof e){return CW({className:e in NW?NW[e]:e,config:{}})}return e instanceof IW?e:CW(e)}class EW extends IP{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=hP(e);let n=Pu(e);return null!=this.maxValue&&(n=wp(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}EW.className="ReLU",fm.registerClass(EW);class AW extends IP{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=hP(e);return Lu(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}AW.className="LeakyReLU",fm.registerClass(AW);class RW extends IP{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=lP(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=$W(e.alphaRegularizer),this.alphaConstraint=UP(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new RL(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=pP(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new bP({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=hP(e),zu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:oP(this.alphaInitializer),alphaRegularizer:TW(this.alphaRegularizer),alphaConstraint:WP(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}RW.className="PReLU",fm.registerClass(RW);class FW extends IP{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new FL(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=hP(e);return Mu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}FW.className="ELU",fm.registerClass(FW);class DW extends IP{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=hP(e);return Vl(n,fl(Mc(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}DW.className="ThresholdedReLU",fm.registerClass(DW);class _W extends IP{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new mW).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=hP(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function OW(e,t,n){if("number"==typeof e)return OL(e,t);if(e.length!==t)throw new RL(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new RL(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function MW(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function LW(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+vz([n-t,0]);else{if("same"!==s)throw new RL(`Unsupport padding mode: ${s}.`);e*=t}return e}function zW(e,t){return Tl((()=>(cz(t),"channelsFirst"===t?vh(e,[0,2,3,1]):e)))}function PW(e,t){return Tl((()=>(cz(t),"channelsFirst"===t?vh(e,[0,2,3,4,1]):e)))}function BW(e,t,n,s=1,r="valid",a,i=1){return Tl((()=>{if(null==a&&(a="channelsLast"),cz(a),3!==e.shape.length)throw new RL(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new RL(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new RL(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=vh(e,[0,2,1])),"causal"===r)throw new FL("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Np(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=zz(o,n)),o}))}function WW(e,t,n,s=[1,1],r="valid",a,i,o=null){return Tl((()=>{if(null==a&&(a="channelsLast"),cz(a),3!==e.rank&&4!==e.rank)throw new RL(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new RL(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=zW(e,a);if("causal"===r)throw new FL("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ru.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=vh(l,[0,3,1,2])),l}))}function VW(e,t,n,s=[1,1,1],r="valid",a,i){return Tl((()=>{if(null==a&&(a="channelsLast"),cz(a),4!==e.rank&&5!==e.rank)throw new RL(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new RL(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=PW(e,a);if("causal"===r)throw new FL("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Cp(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=zz(o,n)),"channelsFirst"===a&&(o=vh(o,[0,4,1,2,3])),o}))}_W.className="Softmax",fm.registerClass(_W);class UW extends IP{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",UW.verifyArgs(t),this.rank=e,ZL(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new FL(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=OW(t.kernelSize,e,"kernelSize"),this.strides=OW(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,hz(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,cz(this.dataFormat),this.activation=vW(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=lP(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=UP(t.biasConstraint),this.biasRegularizer=$W(t.biasRegularizer),this.activityRegularizer=$W(t.activityRegularizer),this.dilationRate=OW(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new RL(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new RL(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new RL(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(ML("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!YL(e.kernelSize,"number",1,3))throw new RL(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:xW(this.activation),useBias:this.useBias,biasInitializer:oP(this.biasInitializer),biasRegularizer:TW(this.biasRegularizer),activityRegularizer:TW(this.activityRegularizer),biasConstraint:WP(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class GW extends UW{constructor(e,t){super(e,t),this.kernel=null,GW.verifyArgs(t),this.filters=t.filters,ZL(this.filters,"filters"),this.kernelInitializer=lP(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=UP(t.kernelConstraint),this.kernelRegularizer=$W(t.kernelRegularizer)}build(e){e=pP(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RL(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return Tl((()=>{let t;e=hP(e);const n=null==this.bias?null:this.bias.read(),s=QL(this.activation.getClassName());if(null!=s&&2===this.rank)t=WW(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=BW(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=WW(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new FL("convolutions greater than 3D are not implemented yet.");t=VW(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=pP(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=MW(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:oP(this.kernelInitializer),kernelRegularizer:TW(this.kernelRegularizer),kernelConstraint:WP(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new RL(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class HW extends GW{constructor(e){super(2,e),HW.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!YL(e.kernelSize,"number",1,2))throw new RL(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}HW.className="Conv2D",fm.registerClass(HW);class jW extends GW{constructor(e){super(3,e),jW.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new RL(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}jW.className="Conv3D",fm.registerClass(jW);class qW extends HW{constructor(e){if(super(e),this.inputSpec=[new bP({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new RL(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=pP(e)).length)throw new RL("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RL("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bP({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return Tl((()=>{let t=hP(e);if(4!==t.shape.length)throw new RL(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,LW(i,c,l,this.padding),LW(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=vh(t,[0,2,3,1]));let d=Tp(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=vh(d,[0,3,1,2])),null!=this.bias&&(d=zz(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=pP(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=LW(t[s],o,a,this.padding),t[r]=LW(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}qW.className="Conv2DTranspose",fm.registerClass(qW);class KW extends jW{constructor(e){if(super(e),this.inputSpec=[new bP({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new RL(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=pP(e)).length)throw new RL("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new RL("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new bP({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return Tl((()=>{let t=hP(e);if(5!==t.shape.length)throw new RL(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,LW(o,d,c,this.padding),LW(l,f,h,this.padding),LW(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=vh(t,[0,2,3,4,1]));let y=Ep(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=vh(y,[0,4,1,2,3])),null!==this.bias&&(y=zz(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=pP(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=LW(t[s],u,i,this.padding),t[r]=LW(t[r],c,o,this.padding),t[a]=LW(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}KW.className="Conv3DTranspose",fm.registerClass(KW);class XW extends GW{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new RL("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new RL("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new RL(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=lP(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=$W(t.depthwiseRegularizer),this.depthwiseConstraint=UP(t.depthwiseConstraint),this.pointwiseInitializer=lP(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=$W(t.pointwiseRegularizer),this.pointwiseConstraint=UP(t.pointwiseConstraint)}build(e){if((e=pP(e)).length<this.rank+2)throw new RL(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new RL(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new bP({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return Tl((()=>{let t;if(e=hP(e),1===this.rank)throw new FL("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=vh(e,[0,2,3,1])),t=bf(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=zz(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=vh(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=oP(this.depthwiseInitializer),e.pointwiseInitializer=oP(this.pointwiseInitializer),e.depthwiseRegularizer=TW(this.depthwiseRegularizer),e.pointwiseRegularizer=TW(this.pointwiseRegularizer),e.depthwiseConstraint=WP(this.depthwiseConstraint),e.pointwiseConstraint=WP(this.pointwiseConstraint),e}}XW.className="SeparableConv";class YW extends XW{constructor(e){super(2,e)}}YW.className="SeparableConv2D",fm.registerClass(YW);class ZW extends GW{constructor(e){super(1,e),ZW.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!YL(e.kernelSize,"number",1,1))throw new RL(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}ZW.className="Conv1D",fm.registerClass(ZW);class JW extends IP{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return Tl((()=>{if(e=hP(e),"channelsLast"===this.dataFormat){const t=Ez(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Ez(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Ez(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Ez(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}JW.className="Cropping2D",fm.registerClass(JW);class QW extends IP{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cz(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,XL(az,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return Tl((()=>{let t=hP(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=vh(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?um.resizeNearestNeighbor(t,[e,s]):um.resizeBilinear(t,[e,s]);return vh(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?um.resizeNearestNeighbor(t,[e,s]):um.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}QW.className="UpSampling2D",fm.registerClass(QW);class eV extends UW{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=lP(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=UP(e.depthwiseConstraint),this.depthwiseRegularizer=$W(e.depthwiseRegularizer)}build(e){if((e=pP(e)).length<4)throw new RL(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new RL(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tl((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return Tl((()=>{null==r&&(r="channelsLast"),cz(r);let i=zW(e,r);if(4!==e.rank)throw new RL(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new RL(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=Xu(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=vh(i,[0,3,1,2])),i}))}(e=hP(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=zz(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=pP(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=MW(t,this.kernelSize[0],this.padding,this.strides[0]),a=MW(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=oP(this.depthwiseInitializer),e.depthwiseRegularizer=TW(this.depthwiseRegularizer),e.depthwiseConstraint=WP(this.depthwiseRegularizer),e}}eV.className="DepthwiseConv2D",fm.registerClass(eV);var tV={};function nV(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new RL("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function sV(e,t,n,s=!1,r,a,i=!1,o=!1){return Tl((()=>{const l=t.shape.length;if(l<3)throw new RL(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(kz(2,l));if(t=vh(t,u),null!=a)throw new FL("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=fl(fl(r,"bool"),"float32")).rank===l-1&&(r=bh(r,-1)),r=vh(r,u)),s&&(t=tu(t,0),null!=r&&(r=tu(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=Yc(t);let m,g;null!=r&&(m=Yc(r));for(let t=0;t<d;++t){const n=f[t],s=Tl((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=Tl((()=>{const e=m[t],n=Lc(wd(e),e);return{output:Pl(Vl(s[0],e),Vl(p[0],n)),newStates:p.map(((t,r)=>Pl(Vl(s[1][r],e),Vl(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=Xc(c,1)}return[h,g,p]}))}n(tV,"ConvLSTM2DCell",(()=>gV),(e=>gV=e)),n(tV,"ConvLSTM2D",(()=>yV),(e=>yV=e));class rV extends IP{constructor(e){let t;if(super(e),null==e.cell)throw new RL("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new pV({cells:e.cell}):e.cell,null==t.stateSize)throw new RL("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new bP({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return kz(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){uP(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return Tl((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new FL("Constants support is not implemented in RNN yet.");uP(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new bP({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!lr.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new RL(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new bP({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){Tl((()=>{if(!this.stateful)throw new EL("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new RL("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Yl([n,e]))):this.states_=[Yl([n,this.cell.stateSize])];else if(null==e)Cl(this.states_),null!=this.keptStates&&(Cl(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Yl([n,e]))):this.states_[0]=Yl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new RL(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):Cl(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!lr.arraysEqual(s.shape,a))throw new RL(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>$l(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=nV(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new bP({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof xP){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Tl((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=hP(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new RL(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=sV(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return Tl((()=>{let t=Yl(e.shape);return t=Uu(t,[1,2]),t=Tz(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?Fz(t,[1,e]):t)):this.cell.stateSize>1?[Fz(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===rV.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=tB(t.cell,n);return new e(Object.assign(t,{cell:s}))}}rV.className="RNN",fm.registerClass(rV);class aV extends IP{}class iV extends aV{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ZL(this.units,"units"),this.activation=vW(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=$W(e.kernelRegularizer),this.recurrentRegularizer=$W(e.recurrentRegularizer),this.biasRegularizer=$W(e.biasRegularizer),this.kernelConstraint=UP(e.kernelConstraint),this.recurrentConstraint=UP(e.recurrentConstraint),this.biasConstraint=UP(e.biasConstraint),this.dropout=wz([1,vz([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wz([1,vz([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=pP(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tl((()=>{if(2!==e.length)throw new RL(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dV({ones:()=>wd(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dV({ones:()=>wd(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=_z(null!=a?Vl(e,a):e,this.kernel.read()),null!=this.bias&&(r=zz(r,this.bias.read())),null!=i&&(n=Vl(n,i));let o=Pl(r,_z(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xW(this.activation),useBias:this.useBias,kernelInitializer:oP(this.kernelInitializer),recurrentInitializer:oP(this.recurrentInitializer),biasInitializer:oP(this.biasInitializer),kernelRegularizer:TW(this.kernelRegularizer),recurrentRegularizer:TW(this.recurrentRegularizer),biasRegularizer:TW(this.biasRegularizer),activityRegularizer:TW(this.activityRegularizer),kernelConstraint:WP(this.kernelConstraint),recurrentConstraint:WP(this.recurrentConstraint),biasConstraint:WP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}iV.className="SimpleRNNCell",fm.registerClass(iV);class oV extends rV{constructor(e){e.cell=new iV(e),super(e)}call(e,t){return Tl((()=>{null!=this.cell.dropoutMask&&(Cl(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cl(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}oV.className="SimpleRNN",fm.registerClass(oV);class lV extends aV{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new RL("GRUCell does not support reset_after parameter set to true.");this.units=e.units,ZL(this.units,"units"),this.activation=vW(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=vW(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=$W(e.kernelRegularizer),this.recurrentRegularizer=$W(e.recurrentRegularizer),this.biasRegularizer=$W(e.biasRegularizer),this.kernelConstraint=UP(e.kernelConstraint),this.recurrentConstraint=UP(e.recurrentConstraint),this.biasConstraint=UP(e.biasConstraint),this.dropout=wz([1,vz([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wz([1,vz([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=pP(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return Tl((()=>{if(2!==e.length)throw new RL(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dV({ones:()=>wd(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dV({ones:()=>wd(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=Vl(e,r[0]));let u=_z(e,this.kernel.read());this.useBias&&(u=zz(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Vl(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=Xl(c,[2*this.units,this.units],c.rank-1),d=_z(s,h),[f,m,g]=Xl(u,3,u.rank-1),[y,b]=Xl(d,2,d.rank-1);i=this.recurrentActivation.apply(Pl(f,y)),o=this.recurrentActivation.apply(Pl(m,b));const x=_z(Vl(o,s),p);l=this.activation.apply(Pl(g,x));const w=Pl(Vl(i,s),Vl(Pl(1,Kc(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xW(this.activation),recurrentActivation:xW(this.recurrentActivation),useBias:this.useBias,kernelInitializer:oP(this.kernelInitializer),recurrentInitializer:oP(this.recurrentInitializer),biasInitializer:oP(this.biasInitializer),kernelRegularizer:TW(this.kernelRegularizer),recurrentRegularizer:TW(this.recurrentRegularizer),biasRegularizer:TW(this.biasRegularizer),activityRegularizer:TW(this.activityRegularizer),kernelConstraint:WP(this.kernelConstraint),recurrentConstraint:WP(this.recurrentConstraint),biasConstraint:WP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}lV.className="GRUCell",fm.registerClass(lV);class uV extends rV{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new lV(e),super(e)}call(e,t){return Tl((()=>{null!=this.cell.dropoutMask&&(Cl(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cl(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}uV.className="GRU",fm.registerClass(uV);class cV extends aV{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,ZL(this.units,"units"),this.activation=vW(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=vW(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=lP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=lP(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=lP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=$W(e.kernelRegularizer),this.recurrentRegularizer=$W(e.recurrentRegularizer),this.biasRegularizer=$W(e.biasRegularizer),this.kernelConstraint=UP(e.kernelConstraint),this.recurrentConstraint=UP(e.recurrentConstraint),this.biasConstraint=UP(e.biasConstraint),this.dropout=wz([1,vz([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=wz([1,vz([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=pP(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Uz{apply(t,s){const r=e.apply([n]),a=(new Hz).apply([n]),i=e.apply([2*n]);return Rz(Rz(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return Tl((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new RL(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dV({ones:()=>wd(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dV({ones:()=>wd(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=Vl(e,a[0]));let h=_z(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=Vl(s,i[0])),h=Pl(h,_z(s,this.recurrentKernel.read())),this.useBias&&(h=zz(h,this.bias.read()));const[p,d,f,m]=Xl(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=Pl(Vl(l,r),Vl(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=Vl(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:xW(this.activation),recurrentActivation:xW(this.recurrentActivation),useBias:this.useBias,kernelInitializer:oP(this.kernelInitializer),recurrentInitializer:oP(this.recurrentInitializer),biasInitializer:oP(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:TW(this.kernelRegularizer),recurrentRegularizer:TW(this.recurrentRegularizer),biasRegularizer:TW(this.biasRegularizer),activityRegularizer:TW(this.activityRegularizer),kernelConstraint:WP(this.kernelConstraint),recurrentConstraint:WP(this.recurrentConstraint),biasConstraint:WP(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}cV.className="LSTMCell",fm.registerClass(cV);class hV extends rV{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new cV(e),super(e)}call(e,t){return Tl((()=>{null!=this.cell.dropoutMask&&(Cl(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cl(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}hV.className="LSTM",fm.registerClass(hV);class pV extends aV{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return Tl((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;uP(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{fz(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(tB(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return gP(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}yP(t)}}function dV(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):Pz(t(),n),o=()=>Bz(i,t,s);if(!r||r<=1)return $l(o().clone());return Array(r).fill(void 0).map(o).map((e=>$l(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */pV.className="StackedRNNCells",fm.registerClass(pV);var fV=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class mV extends rV{constructor(e){if(e.unroll)throw new FL("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new FL("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new bP({ndim:5})]}call(e,t){return Tl((()=>{if(null!=this.cell.dropoutMask&&(Cl(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Cl(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new RL("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return Tl((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=Yl([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){Tl((()=>{if(!this.stateful)throw new EL("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new RL("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Yl(r))):this.states_=[Yl(r)];else if(null==e)Cl(this.states_),null!=this.keptStates&&(Cl(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Yl(r))):this.states_[0]=Yl(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new RL(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):Cl(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!lr.arraysEqual(n.shape,s))throw new RL(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>$l(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=MW(l,s[0],r,a[0],i[0]),h=MW(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}mV.className="ConvRNN2D";class gV extends cV{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,ZL(this.filters,"filters"),this.kernelSize=OW(n,2,"kernelSize"),this.kernelSize.forEach((e=>ZL(e,"kernelSize"))),this.strides=OW(s||1,2,"strides"),this.strides.forEach((e=>ZL(e,"strides"))),this.padding=r||"valid",hz(this.padding),this.dataFormat=a||"channelsLast",cz(this.dataFormat),this.dilationRate=OW(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>ZL(e,"dilationRate")))}build(e){var t;e=pP(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new RL(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Uz{apply(e,t){return Az([n.apply([s]),Ch([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return Tl((()=>{if(3!==e.length)throw new RL(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=dV({ones:()=>wd(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?Vl(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=dV({ones:()=>wd(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=Xl(this.kernel.read(),4,3),[v,k,I,S]=this.useBias?Xl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,S,this.padding);const[N,T,C,$]=Xl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(Pl(l,d)),A=this.recurrentActivation.apply(Pl(u,f)),R=Pl(Vl(A,a),Vl(E,this.activation.apply(Pl(c,m)))),F=Vl(this.recurrentActivation.apply(Pl(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=fV(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=Fu(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?zz(r,n,this.dataFormat):r}recurrentConv(e,t){return Fu(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}gV.className="ConvLSTM2DCell",fm.registerClass(gV);class yV extends mV{constructor(e){const t=new gV(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}yV.className="ConvLSTM2D",fm.registerClass(yV);class bV extends IP{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return Bz((()=>Pz(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}bV.className="Dropout",fm.registerClass(bV);class xV extends bV{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}xV.className="SpatialDropout1D",fm.registerClass(xV);class wV extends IP{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,ZL(this.units,"units"),this.activation=vW(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=lP(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=lP(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=UP(e.kernelConstraint),this.biasConstraint=UP(e.biasConstraint),this.kernelRegularizer=$W(e.kernelRegularizer),this.biasRegularizer=$W(e.biasRegularizer),this.activityRegularizer=$W(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=pP(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=pP(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e),s=QL(this.activation.getClassName());let r;return null!=s?r=_z(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=_z(n,this.kernel.read()),null!=this.bias&&(r=zz(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:xW(this.activation),useBias:this.useBias,kernelInitializer:oP(this.kernelInitializer),biasInitializer:oP(this.biasInitializer),kernelRegularizer:TW(this.kernelRegularizer),biasRegularizer:TW(this.biasRegularizer),activityRegularizer:TW(this.activityRegularizer),kernelConstraint:WP(this.kernelConstraint),biasConstraint:WP(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}wV.className="Dense",fm.registerClass(wV);class vV extends IP{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=pP(e);for(const t of e.slice(1))if(null==t)throw new RL(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],xz(e,1)]}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);let n=hP(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=vh(n,e)}return function(e){if(e.rank<=1)throw new RL(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],xz(e.shape,1)];return ql(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}vV.className="Flatten",fm.registerClass(vV);class kV extends IP{constructor(e){super(e),this.supportsMasking=!0,this.activation=vW(e.activation)}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e);return this.activation.apply(n)}))}getConfig(){const e={activation:xW(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}kV.className="Activation",fm.registerClass(kV);class IV extends IP{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return Tl((()=>{return e=hP(e),t=e,n=this.n,Tl((()=>{if(2!==t.shape.length)throw new RL(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Fz(Tz(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}IV.className="RepeatVector",fm.registerClass(IV);class SV extends IP{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new RL("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=xz(e);if(null!==a){if(0===r||i%r!=0)throw new RL(n);s[a]=i/r}else if(i!==r)throw new RL(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return ql(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}SV.className="Reshape",fm.registerClass(SV);class NV extends IP{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=kz(1,e.dims.length+1);if(!lr.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new bP({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=pP(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return vh(hP(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}NV.className="Permute",fm.registerClass(NV);class TV extends IP{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=hP(e);return ep(Th(n,this.maskValue),-1)}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e),s=ep(Th(n,this.maskValue),-1,!0);return Vl(n,fl(s,n.dtype))}))}}TV.className="Masking",fm.registerClass(TV);class CV extends IP{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(PL(e.inputLength))}this.inputDim=e.inputDim,ZL(this.inputDim,"inputDim"),this.outputDim=e.outputDim,ZL(this.outputDim,"outputDim"),this.embeddingsInitializer=lP(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=$W(e.embeddingsRegularizer),this.activityRegularizer=$W(e.activityRegularizer),this.embeddingsConstraint=UP(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return Tl((()=>this.maskZero?(e=hP(e),Th(e,Zl(e))):null))}computeOutputShape(e){if(e=pP(e),null==this.inputLength)return[...e,this.outputDim];const t=PL(this.inputLength);if(t.length!==e.length-1)throw new RL(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new RL(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);let n=hP(e);"int32"!==n.dtype&&(n=Nz(n,"int32"));const s=Oz(this.embeddings.read(),ql(n,[n.size]));return ql(s,pP(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:oP(this.embeddingsInitializer),embeddingsRegularizer:TW(this.embeddingsRegularizer),activityRegularizer:TW(this.activityRegularizer),embeddingsConstraint:WP(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}CV.className="Embedding",fm.registerClass(CV);class $V extends IP{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new FL}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new RL("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[pP(e)]),e.length<2)throw new RL(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=qL(t),t.length>1)throw new RL(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===qL(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return Tl((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=vz(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Tz(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=ql(s,[r].concat(xz(e.slice(1))));i=vh(i,[1,0]),i=ql(i,a),t.push(i),n=!0}else if(e>1){const r=kz(1,e).concat([0]);t.push(vh(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=ql(vh(ql(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(kz(0,r-1));s=vh(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=qL(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return Tl((()=>{if(null==t)return null;if(!Array.isArray(t))throw new RL("`mask` should be an Array");if(!Array.isArray(e))throw new RL("`inputs` should be an Array");if(t.length!==e.length)throw new RL(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:bh(e,0))))[0];for(let e=1;e<t.length-1;++e)n=jc(n,t[e]);return n}))}}class EV extends $V{constructor(e){super(e)}mergeFunction(e){return Tl((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Pl(t,e[n]);return t}))}}EV.className="Add",fm.registerClass(EV);class AV extends $V{constructor(e){super(e)}mergeFunction(e){return Tl((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Vl(t,e[n]);return t}))}}AV.className="Multiply",fm.registerClass(AV);class RV extends $V{constructor(e){super(e)}mergeFunction(e){return Tl((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=Pl(t,e[n]);return Vl(1/e.length,t)}))}}RV.className="Average",fm.registerClass(RV);class FV extends $V{constructor(e){super(e)}mergeFunction(e){return Tl((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=pd(t,e[n]);return t}))}}FV.className="Maximum",fm.registerClass(FV);class DV extends $V{constructor(e){super(e)}mergeFunction(e){return Tl((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=qc(t,e[n]);return t}))}}DV.className="Minimum",fm.registerClass(DV);class _V extends $V{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new RL("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(lr.arraysEqual(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new RL("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return Tl((()=>Az(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new RL("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new RL("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new RL("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new RL(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return Tl((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(fl(wd(e[n]),"bool")):t[n].rank<e[n].rank?s.push(bh(t[n],-1)):s.push(t[n]);const r=Gl(s,this.axis);return Qh(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function OV(e,t){for(;e<0;)e+=t;return e}_V.className="Concatenate",fm.registerClass(_V);class MV extends $V{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){lr.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new FL("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new RL(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new RL(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>OV(t,e[n].shape.length))):[OV(this.axes,n.shape.length),OV(this.axes,s.shape.length)],this.normalize&&(n=nB(n,t[0]),s=nB(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new FL("batchDot is not implemented for tensors of 4D or higher rank yet");if(lr.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),lr.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new FL("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return Tl((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=ql(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=ql(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?Uu(Vl(e,t),a[0]):Uu(Vl(vh(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=Qu(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=gh(i,t)}return 1===i.shape.length&&(i=bh(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[OV(this.axes,e.length),OV(this.axes,t.length)],n}computeOutputShape(e){lr.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new FL("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}MV.className="Dot",fm.registerClass(MV);class LV extends IP{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e);return Bz((()=>Pl(Dz(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}LV.className="GaussianNoise",fm.registerClass(LV);class zV extends IP{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Tl((()=>{this.invokeCallHook(e,t);const n=hP(e);if(this.rate>0&&this.rate<1){return Bz((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return Vl(n,Dz(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}zV.className="GaussianDropout",fm.registerClass(zV);class PV extends IP{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||hP(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return Tl((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return Bz((()=>{const t=hP(e),s=-1.7580993408473766;let r=Gc(uf(n),this.rate);r=Nz(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=Pl(Vl(t,r),Vl(Pl(r,-1),s));return Pl(Vl(o,a),i)}),(()=>hP(e)),t.training||!1)}return e}))}}function BV(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=fp(e,t,n,s,r,a);else if(3===e.rank)i=mp(e,t,n,s,r,a);else{if(4!==e.rank)throw new FL(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=gp(e,t,n,s,r,a)}return i}function WV(e,t,n,s,r=.001){return lr.arraysEqual(s.slice().sort(),kz(0,e.rank-1))?function(e,t,n,s,r=.001){return Tl((()=>{const a=gd(e,s),i=a.mean,o=a.variance;return[BV(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return Tl((()=>{const a=gd(e,s),i=a.mean,o=a.variance,l=[];for(const t of kz(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=ql(i,l),c=ql(o,l),h=null==t?null:ql(t,l),p=null==n?null:ql(n,l);return[BV(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}PV.className="AlphaDropout",fm.registerClass(PV);class VV extends IP{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lP(e.betaInitializer||"zeros"),this.gammaInitializer=lP(e.gammaInitializer||"ones"),this.movingMeanInitializer=lP(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=lP(e.movingVarianceInitializer||"ones"),this.betaConstraint=UP(e.betaConstraint),this.gammaConstraint=UP(e.gammaConstraint),this.betaRegularizer=$W(e.betaRegularizer),this.gammaRegularizer=$W(e.gammaRegularizer)}build(e){e=pP(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new RL(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new bP({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return Tl((()=>{const n=null!=t.training&&t.training,s=hP(e),r=s.shape,a=r.length,i=kz(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=OL(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!lr.arraysEqual(u,kz(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=ql(this.movingMean.read(),l),t=ql(this.movingVariance.read(),l),n=this.center?ql(this.beta.read(),l):null,r=this.scale?ql(this.gamma.read(),l):null;return BV(s,e,t,n,r,this.epsilon)}return BV(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=WV(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{Tl((()=>{const s=1-n,r=e.read(),a=Vl(Lc(r,t),s);e.write(Lc(r,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:oP(this.betaInitializer),gammaInitializer:oP(this.gammaInitializer),movingMeanInitializer:oP(this.movingMeanInitializer),movingVarianceInitializer:oP(this.movingVarianceInitializer),betaRegularizer:TW(this.betaRegularizer),gammaRegularizer:TW(this.gammaRegularizer),betaConstraint:WP(this.betaConstraint),gammaConstraint:WP(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}VV.className="BatchNormalization",fm.registerClass(VV);class UV extends IP{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=lP(e.betaInitializer||"zeros"),this.gammaInitializer=lP(e.gammaInitializer||"ones"),this.betaRegularizer=$W(e.betaRegularizer),this.gammaRegularizer=$W(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=pP(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==qL(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=hP(e),s=n.shape,r=s.length;return Tl((()=>{let{mean:e,variance:t}=gd(n,this.axis,!0);const a=OL(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r?ql(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=dc(e,u),t=dc(t,u),null!=o&&(o=dc(o,c)),null!=l&&(l=dc(l,c)),BV(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:oP(this.betaInitializer),gammaInitializer:oP(this.gammaInitializer),betaRegularizer:TW(this.betaRegularizer),gammaRegularizer:TW(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}UV.className="LayerNormalization",fm.registerClass(UV);class GV extends IP{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new RL(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new RL(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new RL(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new bP({ndim:4})]}computeOutputShape(e){let t,n;return e=pP(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return Tl((()=>{return t=hP(e),n=this.padding,s=this.dataFormat,Tl((()=>{if(4!==t.rank)throw new RL(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new RL("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new RL(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],kd(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function HV(e,t,n,s,r,a){return Tl((()=>{let i;cz(r),pz(a),hz(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=zW(e,r);const o="same"===s?"same":"valid";return i="max"===a?ud(e,t,n,o):lp(e,t,n,o),"channelsFirst"===r&&(i=vh(i,[0,3,1,2])),i}))}function jV(e,t,n,s,r,a){return Tl((()=>{let i;cz(r),pz(a),hz(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=PW(e,r);const o="same"===s?"same":"valid";return i="max"===a?cd(e,t,n,o):up(e,t,n,o),"channelsFirst"===r&&(i=vh(i,[0,4,1,2,3])),i}))}GV.className="ZeroPadding2D",fm.registerClass(GV);class qV extends IP{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new RL(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(ZL(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new RL(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}ZL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,hz(this.padding),this.inputSpec=[new bP({ndim:3})]}computeOutputShape(e){const t=MW((e=pP(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return Tl((()=>{this.invokeCallHook(e,t),e=Tz(hP(e),2);const n=this.poolingFunction(hP(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return gh(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class KV extends qV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),HV(e,t,n,s,r,"max")}}KV.className="MaxPooling1D",fm.registerClass(KV);class XV extends qV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),HV(e,t,n,s,r,"avg")}}XV.className="AveragePooling1D",fm.registerClass(XV);class YV extends IP{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new RL(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];ZL(this.poolSize,"poolSize"),ZL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cz(this.dataFormat),hz(this.padding),this.inputSpec=[new bP({ndim:4})]}computeOutputShape(e){e=pP(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=MW(t,this.poolSize[0],this.padding,this.strides[0]),n=MW(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return Tl((()=>(this.invokeCallHook(e,t),this.poolingFunction(hP(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class ZV extends YV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),HV(e,t,n,s,r,"max")}}ZV.className="MaxPooling2D",fm.registerClass(ZV);class JV extends YV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),HV(e,t,n,s,r,"avg")}}JV.className="AveragePooling2D",fm.registerClass(JV);class QV extends IP{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new RL(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];ZL(this.poolSize,"poolSize"),ZL(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cz(this.dataFormat),hz(this.padding),this.inputSpec=[new bP({ndim:5})]}computeOutputShape(e){e=pP(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=MW(t,this.poolSize[0],this.padding,this.strides[0]),n=MW(n,this.poolSize[1],this.padding,this.strides[1]),s=MW(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return Tl((()=>(this.invokeCallHook(e,t),this.poolingFunction(hP(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class eU extends QV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),jV(e,t,n,s,r,"max")}}eU.className="MaxPooling3D",fm.registerClass(eU);class tU extends QV{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return cz(r),hz(s),jV(e,t,n,s,r,"avg")}}tU.className="AveragePooling3D",fm.registerClass(tU);class nU extends IP{constructor(e){super(e),this.inputSpec=[new bP({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new FL}}class sU extends nU{constructor(e){super(e||{})}call(e,t){return Tl((()=>{const t=hP(e);return Nh(t,1)}))}}sU.className="GlobalAveragePooling1D",fm.registerClass(sU);class rU extends nU{constructor(e){super(e||{})}call(e,t){return Tl((()=>{const t=hP(e);return uh(t,1)}))}}rU.className="GlobalMaxPooling1D",fm.registerClass(rU);class aU extends IP{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,cz(this.dataFormat),this.inputSpec=[new bP({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new FL}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class iU extends aU{call(e,t){return Tl((()=>{const t=hP(e);return"channelsLast"===this.dataFormat?Nh(t,[1,2]):Nh(t,[2,3])}))}}iU.className="GlobalAveragePooling2D",fm.registerClass(iU);class oU extends aU{call(e,t){return Tl((()=>{const t=hP(e);return"channelsLast"===this.dataFormat?uh(t,[1,2]):uh(t,[2,3])}))}}oU.className="GlobalMaxPooling2D",fm.registerClass(oU);class lU extends IP{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=tB(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class uU extends lU{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=pP(e)).length<3)throw new RL(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=pP(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return Tl((()=>sV(((e,n)=>[hP(this.layer.call(e,t)),[]]),e=hP(e),[],!1,null,null,!1,!0)[1]))}}uU.className="TimeDistributed",fm.registerClass(uU);class cU extends lU{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=tB(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=tB(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,XL(lz,"BidirectionalMergeMode",r),e.weights)throw new FL("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):zL(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=nV(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new RL("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new bP({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new FL("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof xP;for(const e of a)if(e instanceof xP!==o)throw new RL("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return Tl((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=tu(r,1)),"concat"===this.mergeMode?i=Az([s,r]):"sum"===this.mergeMode?i=Pl(s,r):"ave"===this.mergeMode?i=Vl(.5,Pl(s,r)):"mul"===this.mergeMode?i=Vl(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){fz(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),fz(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=tB(t.layer);if(delete t.layer,null!=t.numConstants)throw new FL("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}cU.className="Bidirectional",fm.registerClass(cU);class hU extends IP{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Tl((()=>("float32"!==(e=hP(e)).dtype&&(e=Nz(e,"float32")),Pl(Vl(e,this.scale),this.offset))))}}hU.className="Rescaling",fm.registerClass(hU);const{resizeBilinear:pU,cropAndResize:dU}=um;class fU extends IP{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,i,o){return Tl((()=>{let l,u=!1;const c=[t/a,n/i,(s+t)/a,(r+n)/i],h=[];3===e.rank?(u=!0,l=Xc([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const p=ai(h,[h.length,4]),d=Wc(0,h.length,1,"int32"),f=dU(l,p,d,[s,r],"nearest");return Nz(u?hP(Yc(f)):f,o)}))}upsize(e,t,n,s){return Tl((()=>Nz(pU(e,[t,n]),s)))}call(e,t){return Tl((()=>{const t=hP(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=pP(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}fU.className="CenterCrop",fm.registerClass(fU);class mU extends IP{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=pP(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return Tl((()=>{let n;if("int32"!==(e=hP(e)).dtype&&(e=Nz(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new RL(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=hP(t.countWeights)}const s=uh(e),r=ch(e),a=Mc(this.numTokens,s).bufferSync().get(0),i=Gc(r,0).bufferSync().get(0);if(!a||!i)throw new RL(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=hP(e);if("int32"!==r.dtype&&(r=Nz(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=bh(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=bh(r,-1)),r.rank>2)throw new RL(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t);let o;if(o=_p(r,void 0!==s&&"count"===t?s:[],n,i),"tfIdf"!==t)return o;if(s)return Vl(o,s);throw new RL("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}mU.className="CategoryEncoding",fm.registerClass(mU);const gU=new Set(["bilinear","nearest"]);class yU extends IP{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!gU.has(e.interpolation))throw new RL(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=pP(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return Tl((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return um.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return um.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...gU]} are supported`)}))}}yU.className="Resizing",fm.registerClass(yU);class bU{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}bU.className="RandomSeed";class xU extends IP{constructor(e){super(e),this.randomGenerator=new bU(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}xU.className="BaseRandomLayer";const wU=new Set(["bilinear","nearest"]);class vU extends xU{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new RL(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new RL(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new RL(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!wU.has(n))throw new RL(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=pP(e))[2];return[this.imgHeight,-1,t]}call(e,t){return Tl((()=>{const t=hP(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=uf([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return um.resizeBilinear(e,r);case"nearest":return um.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...wU]} are supported`)}}))}}vU.className="RandomWidth",fm.registerClass(vU);chrome.runtime.onInstalled.addListener((()=>{chrome.contextMenus.create({id:"contextMenu0",title:"Анализировать изображение",contexts:["image"]})})),chrome.contextMenus.onClicked.addListener((function(e,t){const n={action:"IMAGE_CLICKED",url:e.srcUrl};chrome.tabs.sendMessage(t.id,n,(n=>{if(!n.rawImageData)return void console.error("Failed to get image data. The image might be too small or failed to load. See console logs for errors.");const s=new ImageData(Uint8ClampedArray.from(n.rawImageData),n.width,n.height);SU.analyzeImage(s,e.srcUrl,t.id)}))}));const kU=(e,t)=>Rf(IU(e,t),[1,e.height,e.width,t],"int32"),IU=(e,t)=>{const n=e.data,s=e.width*e.height,r=new Int32Array(s*t);for(let e=0;e<s;e++)for(let s=0;s<t;++s)r[e*t+s]=n[4*e+s];return r},SU=new class{constructor(){this.loadModel()}async loadModel(){console.log("Loading model...");const e=performance.now();try{this.model=await nW("http://localhost:3000//5category_ENV2M/model.json"),Tl((()=>{this.model.predict(Yl([1,180,180,3]))}));const t=Math.floor(performance.now()-e);console.log(`Model loaded and initialized in ${t} ms...`)}catch(e){console.error("Unable to load model",e)}}async analyzeImage(e,t,n){if(!n)return void console.error("No tab.  No prediction.");if(!this.model)return console.log("Waiting for model to load..."),void setTimeout((()=>{this.analyzeImage(e,t,n)}),5e3);console.log("Predicting...");const s=performance.now(),r=(kU(e,3),Jm.fromPixels(e));let a,i=this.model.predict(r.reshape([1,180,180,3]));i=await Cf(i).data().then((e=>{a=e,console.log(e)}));let o=[];for(let e=0;e<a.length;e++)o[e]=100*a[e]/100;console.log(o),console.log(Math.max.apply(null,o));let l=await o.indexOf(Math.max.apply(null,o)),u=Math.max.apply(null,o);console.log(l),console.log(u);let c={index:l,percent:u};const h=performance.now()-s;console.log(`Done in ${h.toFixed(1)} ms `);const p={action:"IMAGE_CLICK_PROCESSED",url:t,predictions:c};chrome.tabs.sendMessage(n,p)}}})();
//# sourceMappingURL=service_worker.js.map
