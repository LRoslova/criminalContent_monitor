(()=>{var e="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function t(e,t,n,s){Object.defineProperty(e,t,{get:n,set:s,enumerable:!0,configurable:!0})}function n(e,t){return Object.keys(t).forEach((function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})})),e}var s={},r={},a=e.parcelRequired024;null==a&&((a=function(e){if(e in s)return s[e].exports;if(e in r){var t=r[e];delete r[e];var n={id:e,exports:{}};return s[e]=n,t.call(n.exports,n,n.exports),n.exports}var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}).register=function(e,t){r[e]=t},e.parcelRequired024=a),a.register("foUwZ",(function(e,t){})),a.register("gj6Et",(function(e,t){!function(e,t,n){function s(e){var t,n=this,s=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function r(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function a(e,t){var n=new s(e),a=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.alea=a}(0,e,"function"==typeof define&&define)})),a.register("4gDjz",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor128=a}(0,e,"function"==typeof define&&define)})),a.register("HLBv4",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function r(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorwow=a}(0,e,"function"==typeof define&&define)})),a.register("ktaoY",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.x,r=t.i;return e=s[r],n=(e^=e>>>7)^e<<24,n^=(e=s[r+1&7])^e>>>10,n^=(e=s[r+3&7])^e>>>3,n^=(e=s[r+4&7])^e<<7,e=s[r+7&7],n^=(e^=e<<13)^e<<9,s[r]=n,t.i=r+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function r(e,t){return t.x=e.x.slice(),t.i=e.i,t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.x&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xorshift7=a}(0,e,"function"==typeof define&&define)})),a.register("gBs5C",(function(e,t){!function(e,t,n){function s(e){var t=this;t.next=function(){var e,n,s=t.w,r=t.X,a=t.i;return t.w=s=s+1640531527|0,n=r[a+34&127],e=r[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=r[a]=n^e,t.i=a,n+(s^s>>>16)|0},function(e,t){var n,s,r,a,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),r=0,a=-32;a<l;++a)t&&(s^=t.charCodeAt((a+32)%t.length)),0===a&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,a>=0&&(i=i+1640531527|0,r=0==(n=o[127&a]^=s+i)?r+1:0);for(r>=128&&(o[127&(t&&t.length||0)]=-1),r=127,a=512;a>0;--a)s=o[r+34&127],n=o[r=r+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[r]=s^n;e.w=i,e.X=o,e.i=r}(t,e)}function r(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function a(e,t){null==e&&(e=+new Date);var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&(a.X&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.xor4096=a}(0,e,"function"==typeof define&&define)})),a.register("ktLSh",(function(e,t){!function(e,t,n){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,r=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^r,r=r-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^r,t.a=r-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function r(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function a(e,t){var n=new s(e),a=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/2097152}while(0===e);return e},i.int32=n.next,i.quick=i,a&&("object"==typeof a&&r(a,n),i.state=function(){return r(n,{})}),i}t&&t.exports?t.exports=a:n&&n.amd?n((function(){return a})):this.tychei=a}(0,e,"function"==typeof define&&define)}));class i{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class o{refCount(e){return l("refCount")}incRef(e){return l("incRef")}timerAvailable(){return!0}time(e){return l("time")}read(e){return l("read")}readSync(e){return l("readSync")}readToGPU(e,t){return l("readToGPU")}numDataIds(){return l("numDataIds")}disposeData(e,t){return l("disposeData")}write(e,t,n){return l("write")}move(e,t,n,s,r){return l("move")}createTensorFromGPUData(e,t,n){return l("createTensorFromGPUData")}memory(){return l("memory")}floatPrecision(){return l("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return l("dispose")}}function l(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var u={};function c(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,f(e,t,n)}function h(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,s=0;for(;n>0;)s=Math.random()*n|0,n--,f(e,n,s),f(t,n,s)}function p(e,t,n){return Math.max(e,Math.min(t,n))}function d(e){return e%2==0?e:e+1}function f(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function m(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function g(e,t){const n=Math.random();return t*n+(1-n)*e}function y(e,t){let n=0;for(let s=0;s<e.length;s++){const r=Number(e[s])-Number(t[s]);n+=r*r}return n}function b(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function x(e,t,n=""){b(S(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function w(e){b(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function v(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function k(e){return 0===e.length}function I(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(null!==e[n]&&null!==t[n]&&e[n]!==t[n])return!1;return!0}function S(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function N(e){return e%1==0}function T(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function C(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function $(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return c(t),t}function E(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function A(e,t=(e=>0),n,s){return new Promise(((r,a)=>{let i=0;const o=()=>{if(e())return void r();i++;const l=t(i);null!=n&&i>=n?a():null!=s?s(o,l):setTimeout(o,l)};o()}))}function R(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const r=e.slice();return r[s]=t/n,r}function F(e,t){const n=t.length;return b((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),b(e.every((e=>N(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function _(e,t){const n=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||r?null:F(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[i]||a[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),a[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function D(e,t){return O(e,t)}function O(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function M(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function L(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function z(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function B(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function P(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function W(e){return"string"==typeof e||e instanceof String}function U(e){return"boolean"==typeof e}function V(e){return"number"==typeof e}function G(e){return Array.isArray(e)?G(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":V(e)?"float32":W(e)?"string":U(e)?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function j(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function q(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function K(e,t,n,s=!1){const r=new Array;if(1===t.length){const a=t[0]*(s?2:1);for(let t=0;t<a;t++)r[t]=n[e+t]}else{const a=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<a;t++)r[t]=K(e+t*o,i,n,s)}return r}function X(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return K(0,e,t,n)}function Y(e,t){if(Array.isArray(e))return e;if("float32"===t)return e instanceof Float32Array?e:new Float32Array(e);if("int32"===t)return e instanceof Int32Array?e:new Int32Array(e);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(e));throw new Error(`Unknown dtype ${t}`)}function Z(e,t){const n=J(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function J(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Q(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return X(e,new Float32Array(n));if("int32"===t)return X(e,new Int32Array(n));if("bool"===t)return X(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ee(e){e.forEach((t=>{b(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function te(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function ne(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function se(e){return e&&e.then&&"function"==typeof e.then}t(u,"shuffle",(()=>c)),t(u,"swap",(()=>f)),t(u,"shuffleCombo",(()=>h)),t(u,"clamp",(()=>p)),t(u,"nearestLargerEven",(()=>d)),t(u,"sum",(()=>m)),t(u,"randUniform",(()=>g)),t(u,"distSquared",(()=>y)),t(u,"assert",(()=>b)),t(u,"assertShapesMatch",(()=>x)),t(u,"arraysEqual",(()=>S)),t(u,"assertNonNull",(()=>w)),t(u,"sizeFromShape",(()=>v)),t(u,"isScalarShape",(()=>k)),t(u,"arraysEqualWithNull",(()=>I)),t(u,"isInt",(()=>N)),t(u,"tanh",(()=>T)),t(u,"sizeToSquarishShape",(()=>C)),t(u,"createShuffledIndices",(()=>$)),t(u,"rightPad",(()=>E)),t(u,"repeatedTry",(()=>A)),t(u,"inferFromImplicitShape",(()=>R)),t(u,"parseAxisParam",(()=>F)),t(u,"squeezeShape",(()=>_)),t(u,"getTypedArrayFromDType",(()=>D)),t(u,"getArrayFromDType",(()=>O)),t(u,"checkConversionForErrors",(()=>M)),t(u,"isValidDtype",(()=>L)),t(u,"hasEncodingLoss",(()=>z)),t(u,"bytesPerElement",(()=>B)),t(u,"bytesFromStringArray",(()=>P)),t(u,"isString",(()=>W)),t(u,"isBoolean",(()=>U)),t(u,"isNumber",(()=>V)),t(u,"inferDtype",(()=>G)),t(u,"isFunction",(()=>H)),t(u,"nearestDivisor",(()=>j)),t(u,"computeStrides",(()=>q)),t(u,"toNestedArray",(()=>X)),t(u,"convertBackendValuesAndArrayBuffer",(()=>Y)),t(u,"makeOnesTypedArray",(()=>Z)),t(u,"makeZerosTypedArray",(()=>J)),t(u,"makeZerosNestedTypedArray",(()=>Q)),t(u,"assertNonNegativeIntegerDimensions",(()=>ee)),t(u,"locToIndex",(()=>te)),t(u,"indexToLoc",(()=>ne)),t(u,"isPromise",(()=>se));const re="tfjsflags";class ae{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ie,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(se(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getString(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(re in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){const n=t.toLowerCase();return"true"===n||"false"===n?"true"===n:""+ +n===n?+n:t}(0,n)}))}}}function ie(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function oe(){return le}let le=null;var ue,ce,he={},pe=he={};function de(){throw new Error("setTimeout has not been defined")}function fe(){throw new Error("clearTimeout has not been defined")}function me(e){if(ue===setTimeout)return setTimeout(e,0);if((ue===de||!ue)&&setTimeout)return ue=setTimeout,setTimeout(e,0);try{return ue(e,0)}catch(t){try{return ue.call(null,e,0)}catch(t){return ue.call(this,e,0)}}}!function(){try{ue="function"==typeof setTimeout?setTimeout:de}catch(e){ue=de}try{ce="function"==typeof clearTimeout?clearTimeout:fe}catch(e){ce=fe}}();var ge,ye=[],be=!1,xe=-1;function we(){be&&ge&&(be=!1,ge.length?ye=ge.concat(ye):xe=-1,ye.length&&ve())}function ve(){if(!be){var e=me(we);be=!0;for(var t=ye.length;t;){for(ge=ye,ye=[];++xe<t;)ge&&ge[xe].run();xe=-1,t=ye.length}ge=null,be=!1,function(e){if(ce===clearTimeout)return clearTimeout(e);if((ce===fe||!ce)&&clearTimeout)return ce=clearTimeout,clearTimeout(e);try{ce(e)}catch(t){try{return ce.call(null,e)}catch(t){return ce.call(this,e)}}}(e)}}function ke(e,t){this.fun=e,this.array=t}function Ie(){}
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
let Se;function Ne(){if(null==Se){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==he)t=he;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}Se=t}return Se}function Te(e,t){const n=function(){const e=Ne();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}pe.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];ye.push(new ke(e,t)),1!==ye.length||be||me(ve)},ke.prototype.run=function(){this.fun.apply(null,this.array)},pe.title="browser",pe.browser=!0,pe.env={},pe.argv=[],pe.version="",pe.versions={},pe.on=Ie,pe.addListener=Ie,pe.once=Ie,pe.off=Ie,pe.removeListener=Ie,pe.removeAllListeners=Ie,pe.emit=Ie,pe.prependListener=Ie,pe.prependOnceListener=Ie,pe.listeners=function(e){return[]},pe.binding=function(e){throw new Error("process.binding is not supported")},pe.cwd=function(){return"/"},pe.chdir=function(e){throw new Error("process.chdir is not supported")},pe.umask=function(){return 0};const Ce="Abs",$e="Acos",Ee="Acosh",Ae="Add",Re="AddN",Fe="All",_e="Any",De="ArgMax",Oe="ArgMin",Me="Asin",Le="Asinh",ze="Atan",Be="Atanh",Pe="Atan2",We="AvgPool",Ue="AvgPoolGrad",Ve="AvgPool3D",Ge="AvgPool3DGrad",He="BatchMatMul",je="BatchToSpaceND",qe="Bincount",Ke="BitwiseAnd",Xe="BroadcastArgs",Ye="Cast",Ze="Ceil",Je="ClipByValue",Qe="Complex",et="ComplexAbs",tt="Concat",nt="Conv2D",st="Conv2DBackpropFilter",rt="Conv2DBackpropInput",at="Conv3D",it="Conv3DBackpropFilterV2",ot="Conv3DBackpropInputV2",lt="Cos",ut="Cosh",ct="Cumprod",ht="Cumsum",pt="CropAndResize",dt="DenseBincount",ft="DepthToSpace",mt="DepthwiseConv2dNative",gt="DepthwiseConv2dNativeBackpropFilter",yt="DepthwiseConv2dNativeBackpropInput",bt="Diag",xt="Dilation2D",wt="Dilation2DBackpropInput",vt="Dilation2DBackpropFilter",kt="RealDiv",It="Einsum",St="Elu",Nt="EluGrad",Tt="Erf",Ct="Equal",$t="Exp",Et="ExpandDims",At="Expm1",Rt="FFT",Ft="Fill",_t="FlipLeftRight",Dt="Floor",Ot="FloorDiv",Mt="FusedBatchNorm",Lt="GatherV2",zt="GatherNd",Bt="Greater",Pt="GreaterEqual",Wt="Identity",Ut="IFFT",Vt="Imag",Gt="IsFinite",Ht="IsInf",jt="IsNan",qt="LeakyRelu",Kt="Less",Xt="LessEqual",Yt="LinSpace",Zt="Log",Jt="Log1p",Qt="LogicalAnd",en="LogicalNot",tn="LogicalOr",nn="LRN",sn="LRNGrad",rn="Max",an="Maximum",on="MaxPool",ln="MaxPoolGrad",un="MaxPool3D",cn="MaxPool3DGrad",hn="MaxPoolWithArgmax",pn="Mean",dn="Min",fn="Minimum",mn="MirrorPad",gn="Mod",yn="Multinomial",bn="Multiply",xn="Neg",wn="NotEqual",vn="NonMaxSuppressionV3",kn="NonMaxSuppressionV4",In="NonMaxSuppressionV5",Sn="OnesLike",Nn="OneHot",Tn="Pack",Cn="PadV2",$n="Pow",En="Prelu",An="Prod",Rn="RaggedGather",Fn="RaggedRange",_n="RaggedTensorToTensor",Dn="Range",On="Real",Mn="Reciprocal",Ln="Relu",zn="Reshape",Bn="ResizeNearestNeighbor",Pn="ResizeNearestNeighborGrad",Wn="ResizeBilinear",Un="ResizeBilinearGrad",Vn="Relu6",Gn="Reverse",Hn="Round",jn="Rsqrt",qn="ScatterNd",Kn="TensorScatterUpdate",Xn="SearchSorted",Yn="Select",Zn="Selu",Jn="Slice",Qn="Sin",es="Sinh",ts="Sign",ns="Sigmoid",ss="Softplus",rs="Sqrt",as="Sum",is="SpaceToBatchND",os="SplitV",ls="Softmax",us="SparseFillEmptyRows",cs="SparseReshape",hs="SparseSegmentMean",ps="SparseSegmentSum",ds="SparseToDense",fs="SquaredDifference",ms="Square",gs="StaticRegexReplace",ys="StridedSlice",bs="StringNGrams",xs="StringSplit",ws="StringToHashBucketFast",vs="Sub",ks="Tan",Is="Tanh",Ss="Tile",Ns="TopK",Ts="Transform",Cs="Transpose",$s="Unique",Es="Unpack",As="UnsortedSegmentSum",Rs="ZerosLike",Fs="Step",_s="FromPixels",Ds="RotateWithOffset",Os="_FusedMatMul",Ms="FusedConv2D",Ls="FusedDepthwiseConv2D";var zs={};function Bs(...e){oe().getBool("IS_TEST")||oe().getBool("PROD")||console.warn(...e)}function Ps(...e){oe().getBool("IS_TEST")||oe().getBool("PROD")||console.log(...e)}t(zs,"warn",(()=>Bs)),t(zs,"log",(()=>Ps));const Ws=Te("kernelRegistry",(()=>new Map)),Us=Te("gradRegistry",(()=>new Map));function Vs(e,t){const n=Ks(e,t);return Ws.get(n)}function Gs(e){return Us.get(e)}function Hs(e){const t=Ws.entries(),n=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[a,i]=r,[o]=a.split("_");o===e&&n.push(i)}return n}function js(e){const{kernelName:t,backendName:n}=e,s=Ks(t,n);Ws.has(s)&&Bs(`The kernel '${t}' for backend '${n}' is already registered`),Ws.set(s,e)}function qs(e){const{kernelName:t}=e;Us.has(t)&&oe().getBool("DEBUG")&&Bs(`Overriding the gradient for '${t}'`),Us.set(t,e)}function Ks(e,t){return`${t}_${e}`}var Xs={};function Ys(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}t(Xs,"createScalarValue",(()=>Mr)),t(Xs,"encodeString",(()=>Pr)),t(Xs,"toTypedArray",(()=>Lr)),t(Xs,"flatten",(()=>Vr)),t(Xs,"now",(()=>zr)),t(Xs,"fetch",(()=>Br)),t(Xs,"decodeString",(()=>Wr)),t(Xs,"isTypedArray",(()=>Ur));var Zs={};t(Zs,"hexToLong",(()=>Sr)),t(Zs,"fingerPrint64",(()=>Or));var Js;Js=er;var Qs=null;try{Qs=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function er(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function tr(e){return!0===(e&&e.__isLong__)}er.prototype.__isLong__,Object.defineProperty(er.prototype,"__isLong__",{value:!0}),er.isLong=tr;var nr={},sr={};function rr(e,t){var n,s,r;return t?(r=0<=(e>>>=0)&&e<256)&&(s=sr[e])?s:(n=ir(e,(0|e)<0?-1:0,!0),r&&(sr[e]=n),n):(r=-128<=(e|=0)&&e<128)&&(s=nr[e])?s:(n=ir(e,e<0?-1:0,!1),r&&(nr[e]=n),n)}function ar(e,t){if(isNaN(e))return t?mr:fr;if(t){if(e<0)return mr;if(e>=hr)return wr}else{if(e<=-pr)return vr;if(e+1>=pr)return xr}return e<0?ar(-e,t).neg():ir(e%cr|0,e/cr|0,t)}function ir(e,t,n){return new er(e,t,n)}er.fromInt=rr,er.fromNumber=ar,er.fromBits=ir;var or=Math.pow;function lr(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return fr;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return lr(e.substring(1),t,n).neg();for(var r=ar(or(n,8)),a=fr,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=ar(or(n,o));a=a.mul(u).add(ar(l))}else a=(a=a.mul(r)).add(ar(l))}return a.unsigned=t,a}function ur(e,t){return"number"==typeof e?ar(e,t):"string"==typeof e?lr(e,t):ir(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}er.fromString=lr,er.fromValue=ur;var cr=4294967296,hr=cr*cr,pr=hr/2,dr=rr(16777216),fr=rr(0);er.ZERO=fr;var mr=rr(0,!0);er.UZERO=mr;var gr=rr(1);er.ONE=gr;var yr=rr(1,!0);er.UONE=yr;var br=rr(-1);er.NEG_ONE=br;var xr=ir(-1,2147483647,!1);er.MAX_VALUE=xr;var wr=ir(-1,-1,!0);er.MAX_UNSIGNED_VALUE=wr;var vr=ir(0,-2147483648,!1);er.MIN_VALUE=vr;var kr=er.prototype;kr.toInt=function(){return this.unsigned?this.low>>>0:this.low},kr.toNumber=function(){return this.unsigned?(this.high>>>0)*cr+(this.low>>>0):this.high*cr+(this.low>>>0)},kr.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(vr)){var t=ar(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var r=ar(or(e,6),this.unsigned),a=this,i="";;){var o=a.div(r),l=(a.sub(o.mul(r)).toInt()>>>0).toString(e);if((a=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},kr.getHighBits=function(){return this.high},kr.getHighBitsUnsigned=function(){return this.high>>>0},kr.getLowBits=function(){return this.low},kr.getLowBitsUnsigned=function(){return this.low>>>0},kr.getNumBitsAbs=function(){if(this.isNegative())return this.eq(vr)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},kr.isZero=function(){return 0===this.high&&0===this.low},kr.eqz=kr.isZero,kr.isNegative=function(){return!this.unsigned&&this.high<0},kr.isPositive=function(){return this.unsigned||this.high>=0},kr.isOdd=function(){return 1==(1&this.low)},kr.isEven=function(){return 0==(1&this.low)},kr.equals=function(e){return tr(e)||(e=ur(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},kr.eq=kr.equals,kr.notEquals=function(e){return!this.eq(e)},kr.neq=kr.notEquals,kr.ne=kr.notEquals,kr.lessThan=function(e){return this.comp(e)<0},kr.lt=kr.lessThan,kr.lessThanOrEqual=function(e){return this.comp(e)<=0},kr.lte=kr.lessThanOrEqual,kr.le=kr.lessThanOrEqual,kr.greaterThan=function(e){return this.comp(e)>0},kr.gt=kr.greaterThan,kr.greaterThanOrEqual=function(e){return this.comp(e)>=0},kr.gte=kr.greaterThanOrEqual,kr.ge=kr.greaterThanOrEqual,kr.compare=function(e){if(tr(e)||(e=ur(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},kr.comp=kr.compare,kr.negate=function(){return!this.unsigned&&this.eq(vr)?vr:this.not().add(gr)},kr.neg=kr.negate,kr.add=function(e){tr(e)||(e=ur(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=0,u=0,c=0,h=0;return c+=(h+=r+(65535&e.low))>>>16,u+=(c+=s+o)>>>16,l+=(u+=n+i)>>>16,l+=t+a,ir((c&=65535)<<16|(h&=65535),(l&=65535)<<16|(u&=65535),this.unsigned)},kr.subtract=function(e){return tr(e)||(e=ur(e)),this.add(e.neg())},kr.sub=kr.subtract,kr.multiply=function(e){if(this.isZero())return fr;if(tr(e)||(e=ur(e)),Qs)return ir(Qs.mul(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned);if(e.isZero())return fr;if(this.eq(vr))return e.isOdd()?vr:fr;if(e.eq(vr))return this.isOdd()?vr:fr;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(dr)&&e.lt(dr))return ar(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,r=65535&this.low,a=e.high>>>16,i=65535&e.high,o=e.low>>>16,l=65535&e.low,u=0,c=0,h=0,p=0;return h+=(p+=r*l)>>>16,c+=(h+=s*l)>>>16,h&=65535,c+=(h+=r*o)>>>16,u+=(c+=n*l)>>>16,c&=65535,u+=(c+=s*o)>>>16,c&=65535,u+=(c+=r*i)>>>16,u+=t*l+n*o+s*i+r*a,ir((h&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},kr.mul=kr.multiply,kr.divide=function(e){if(tr(e)||(e=ur(e)),e.isZero())throw Error("division by zero");var t,n,s;if(Qs)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?ir((this.unsigned?Qs.div_u:Qs.div_s)(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?mr:fr;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return mr;if(e.gt(this.shru(1)))return yr;s=mr}else{if(this.eq(vr))return e.eq(gr)||e.eq(br)?vr:e.eq(vr)?gr:(t=this.shr(1).div(e).shl(1)).eq(fr)?e.isNegative()?gr:br:(n=this.sub(e.mul(t)),s=t.add(n.div(e)));if(e.eq(vr))return this.unsigned?mr:fr;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=fr}for(n=this;n.gte(e);){t=Math.max(1,Math.floor(n.toNumber()/e.toNumber()));for(var r=Math.ceil(Math.log(t)/Math.LN2),a=r<=48?1:or(2,r-48),i=ar(t),o=i.mul(e);o.isNegative()||o.gt(n);)o=(i=ar(t-=a,this.unsigned)).mul(e);i.isZero()&&(i=gr),s=s.add(i),n=n.sub(o)}return s},kr.div=kr.divide,kr.modulo=function(e){return tr(e)||(e=ur(e)),Qs?ir((this.unsigned?Qs.rem_u:Qs.rem_s)(this.low,this.high,e.low,e.high),Qs.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},kr.mod=kr.modulo,kr.rem=kr.modulo,kr.not=function(){return ir(~this.low,~this.high,this.unsigned)},kr.and=function(e){return tr(e)||(e=ur(e)),ir(this.low&e.low,this.high&e.high,this.unsigned)},kr.or=function(e){return tr(e)||(e=ur(e)),ir(this.low|e.low,this.high|e.high,this.unsigned)},kr.xor=function(e){return tr(e)||(e=ur(e)),ir(this.low^e.low,this.high^e.high,this.unsigned)},kr.shiftLeft=function(e){return tr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ir(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):ir(0,this.low<<e-32,this.unsigned)},kr.shl=kr.shiftLeft,kr.shiftRight=function(e){return tr(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?ir(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):ir(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},kr.shr=kr.shiftRight,kr.shiftRightUnsigned=function(e){if(tr(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?ir(this.low>>>e|t<<32-e,t>>>e,this.unsigned):ir(32===e?t:t>>>e-32,0,this.unsigned)},kr.shru=kr.shiftRightUnsigned,kr.shr_u=kr.shiftRightUnsigned,kr.toSigned=function(){return this.unsigned?ir(this.low,this.high,!1):this},kr.toUnsigned=function(){return this.unsigned?this:ir(this.low,this.high,!0)},kr.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},kr.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},kr.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},er.fromBytes=function(e,t,n){return n?er.fromBytesLE(e,t):er.fromBytesBE(e,t)},er.fromBytesLE=function(e,t){return new er(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},er.fromBytesBE=function(e,t){return new er(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};const Ir=Js.default||Js;function Sr(e){return Ir.fromString(e,!0,16)}const Nr=Sr("c3a5c85c97cb3127"),Tr=Sr("b492b66fbe98f273"),Cr=Sr("9ae16a3b2f90404f");function $r(e){return e.xor(e.shru(47))}function Er(e,t,n){const s=e.slice(t,t+n);return Ir.fromBytes(Array.from(s),!0,!0)}function Ar(e,t){return Er(e,t,8)}function Rr(e,t){return Er(e,t,4)}function Fr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function _r(e,t,n=Sr("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let r=t.xor(s).mul(n);return r=r.xor(r.shru(47)),r=r.mul(n),r}function Dr(e,t,n,s){return function(e,t,n,s,r,a){r=r.add(e),a=Fr(a.add(r).add(s),21);const i=r;return r=(r=r.add(t)).add(n),a=a.add(Fr(r,44)),[r.add(s),a.add(i)]}(Ar(e,t),Ar(e,t+8),Ar(e,t+16),Ar(e,t+24),n,s)}function Or(e,t=e.length){const n=Ir.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Cr.add(2*t),s=Ar(e,0).add(Cr),r=Ar(e,t-8);return _r(Fr(r,37).mul(n).add(s),Fr(s,25).add(r).mul(n),n)}if(t>=4){const n=Cr.add(2*t);return _r(Rr(e,0).shl(3).add(t),Rr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return $r(Cr.mul(n).xor(Nr.mul(s))).mul(Cr)}return Cr}(e,t):function(e,t=e.length){const n=Cr.add(2*t),s=Ar(e,0).mul(Tr),r=Ar(e,8),a=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul(Cr);return _r(Fr(s.add(r),43).add(Fr(a,30)).add(i),s.add(Fr(r.add(Cr),18)).add(a),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Cr.add(2*t),s=Ar(e,0).mul(Cr),r=Ar(e,8),a=Ar(e,t-8).mul(n),i=Ar(e,t-16).mul(Cr),o=Fr(s.add(r),43).add(Fr(a,30)).add(i),l=_r(o,s.add(Fr(r.add(Cr),18)).add(a),n),u=Ar(e,16).mul(n),c=Ar(e,24),h=o.add(Ar(e,t-32)).mul(n),p=l.add(Ar(e,t-24)).mul(n);return _r(Fr(u.add(c),43).add(Fr(h,30)).add(p),u.add(Fr(c.add(s),18)).add(h),n)}(e,t);let s=n,r=n.mul(Tr).add(113),a=$r(r.mul(Cr).add(113)).mul(Cr),i=[Ir.UZERO,Ir.UZERO],o=[Ir.UZERO,Ir.UZERO];s=s.mul(Cr).add(Ar(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Fr(s.add(r).add(i[0]).add(Ar(e,l+8)),37).mul(Tr),r=Fr(r.add(i[1]).add(Ar(e,l+48)),42).mul(Tr),s=s.xor(o[1]),r=r.add(i[0]).add(Ar(e,l+40)),a=Fr(a.add(o[0]),33).mul(Tr),i=Dr(e,l,i[1].mul(Tr),s.add(o[0])),o=Dr(e,l+32,a.add(o[1]),r.add(Ar(e,l+16))),[a,s]=[s,a],l+=64}while(l!==u);const h=Tr.add(a.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Fr(s.add(r).add(i[0]).add(Ar(e,l+8)),37).mul(h),r=Fr(r.add(i[1]).add(Ar(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),r=r.add(i[0].mul(9).add(Ar(e,l+40))),a=Fr(a.add(o[0]),33).mul(h),i=Dr(e,l,i[1].mul(h),s.add(o[0])),o=Dr(e,l+32,a.add(o[1]),r.add(Ar(e,l+16))),[a,s]=[s,a],_r(_r(i[0],o[0],h).add($r(r).mul(Nr)).add(a),_r(i[1],o[1],h).add(s),h)}function Mr(e,t){return"string"===t?Pr(e):Lr([e],t)}function Lr(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Vr(e)),oe().getBool("DEBUG")&&M(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function zr(){return oe().platform.now()}function Br(e,t){return oe().platform.fetch(e,t)}function Pr(e,t="utf-8"){return t=t||"utf-8",oe().platform.encode(e,t)}function Wr(e,t="utf-8"){return t=t||"utf-8",oe().platform.decode(e,t)}function Ur(e){return null!=oe().platform.isTypedArray?oe().platform.isTypedArray(e):Ys(e)}function Vr(e,t=[],n=!1){if(null==t&&(t=[]),"boolean"==typeof e||"number"==typeof e||"string"==typeof e||se(e)||null==e||Ur(e)&&n)t.push(e);else if(Array.isArray(e)||Ur(e))for(let s=0;s<e.length;++s)Vr(e[s],t,n);else{let s=-1;for(const t of Object.keys(e))/^([1-9]+[0-9]*|0)$/.test(t)&&(s=Math.max(s,Number(t)));for(let r=0;r<=s;r++)Vr(e[r],t,n)}return t}n(Xs,u),n(Xs,Zs);class Gr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new jr)}profileKernel(e,t,n){let s;const r=()=>{s=n()};let a;const i=zr();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(r);else{r();for(const e of s)e.dataSync();a=Promise.resolve({kernelMs:zr()-i})}if(oe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Hr(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:a.then((e=>e.kernelMs)),extraInfo:a.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:r,extraInfo:a}=e;n.forEach((e=>{Promise.all([e.data(),s,a]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],r,n[2])}))}))}}function Hr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class jr{logKernelProfile(e,t,n,s,r,a){const i="number"==typeof s?E(`${s}ms`,9):s.error,o=E(e,25),l=t.rank,u=t.size,c=E(t.shape.toString(),14);let h="";for(const e in r){const n=r[e];if(null!=n){const s=n.shape||t.shape,r=s.length;h+=`${e}: ${r}D ${r>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function qr(e,t,n,s){const r=q(t),a=function(e,t,n,s){const r=v(t),a=s[s.length-1],i=new Array(a).fill(0),o=t.length,l="complex64"===n?Zr(e):e;if(o>1)for(let e=0;e<r/a;e++){const t=e*a;for(let e=0;e<a;e++)i[e]=Math.max(i[e],Kr(l[t+e],0,n).length)}return i}(e,t,n,r),i=t.length,o=Yr(e,t,n,r,a),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function Kr(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:W(e)?`'${e}'`:"bool"===n?Xr(e):parseFloat(e.toFixed(7)).toString(),E(s,t)}function Xr(e){return 0===e?"false":"true"}function Yr(e,t,n,s,r,a=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l){if("complex64"===n){return[Kr(Zr(e)[0],0,n)]}return"bool"===n?[Xr(e[0])]:[e[0].toString()]}if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),a=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=Zr(s),a=Zr(a)),["["+s.map(((e,t)=>Kr(e,r[t],n))).join(", ")+", ..., "+a.map(((e,t)=>Kr(e,r[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?Zr(e):Array.from(e)).map(((e,t)=>Kr(e,r[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,a=s+h;p.push(...Yr(e.slice(s,a),u,n,c,r,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,a=s+h;p.push(...Yr(e.slice(s,a),u,n,c,r,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,a=s+h;p.push(...Yr(e.slice(s,a),u,n,c,r,t===o-1))}const d=2===l?",":"";p[0]="["+(o>0?p[0]+d:"");for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(a?"":f),p}function Zr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Jr{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=v(e),null!=n){const e=n.length;b(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||O(t,this.size),this.strides=q(e)}set(e,...t){0===t.length&&(t=[0]),b(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Qr().makeTensor(this.values,this.shape,this.dtype)}}let Qr=null,ea=null,ta=null;class na{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=v(e),this.strides=q(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return ea.buffer(this.shape,this.dtype,e)}bufferSync(){return ea.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return X(this.shape,e,"complex64"===this.dtype)}arraySync(){return X(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Qr().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Wr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Qr().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Qr().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Wr(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Qr().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Qr().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return ea.print(this,e)}clone(){return this.throwIfDisposed(),ea.clone(this)}toString(e=!1){return qr(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),ea.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Qr().makeVariable(this,e,t,n)}}function sa(){return Te("Tensor",(()=>na))}Object.defineProperty(na,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),sa();class ra extends na{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!S(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Qr().disposeTensor(this),this.dataId=e.dataId,Qr().incRef(this,null)}dispose(){Qr().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(ra,Symbol.hasInstance,{value:e=>e instanceof na&&null!=e.assign&&e.assign instanceof Function});var aa,ia,oa,la,ua,ca,ha,pa,da,fa={};t(fa,"makeTypesMatch",(()=>wa)),t(fa,"assertTypesMatch",(()=>va)),t(fa,"isTensorInList",(()=>ka)),t(fa,"getTensorsInContainer",(()=>Ia)),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(aa||(aa={})),(oa=ia||(ia={})).float32="float32",oa.int32="int32",oa.bool="int32",oa.complex64="complex64",(ua=la||(la={})).float32="float32",ua.int32="int32",ua.bool="bool",ua.complex64="complex64",(ha=ca||(ca={})).float32="float32",ha.int32="float32",ha.bool="float32",ha.complex64="complex64",(da=pa||(pa={})).float32="complex64",da.int32="complex64",da.bool="complex64",da.complex64="complex64";const ma={float32:ca,int32:ia,bool:la,complex64:pa};function ga(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ma[e][t]}function ya(e){return ga(e,"int32")}function ba(e){return null!=e&&"object"==typeof e&&"texture"in e&&e.texture instanceof WebGLTexture}function xa(e){return"undefined"!=typeof GPUBuffer&&null!=e&&"object"==typeof e&&"buffer"in e&&e.buffer instanceof GPUBuffer}function wa(e,t){if(e.dtype===t.dtype)return[e,t];const n=ga(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function va(e,t){b(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function ka(e,t){return t.some((t=>t.id===e.id))}function Ia(e){const t=[];return Sa(e,t,new Set),t}function Sa(e,t,n){if(null==e)return;if(e instanceof na)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const r=e;for(const e in r){const s=r[e];n.has(s)||(n.add(s),Sa(s,t,n))}}function Na(e){return null!=e.kernelName}class Ta{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ca{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ta}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Bs(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Gr(this.backendInstance),!0}setupRegisteredKernels(){Hs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Hs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof o||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Bs(`Initialization of backend ${e} failed`),Bs(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return Bs(`Initialization of backend ${e} failed`),Bs(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:r}=this.initializeBackend(n);if(r||s)return{name:n,asyncInit:r}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,r=this.readSync(t),a=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,r,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ca.nextTensorId++}nextVariableId(){return Ca.nextVariableId++}clone(e){const t=Ea.runKernel(Wt,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return Ea.runKernel(Ye,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Vs(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let r=0;n.forEach((e=>{r+="complex64"===e.dtype?3:1}));const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-r-a;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),r=this.state.numBytes,a=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Na(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Na(e)){const{kernelName:t,inputs:r,attrs:a}=e;null==this.backendName&&this.backend;const l=Vs(t,this.backendName);b(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:r,attrs:a,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,r,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,r=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,r)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=Na(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-r,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=Gs(e);if(null!=s){const e=s.inputsToSave||[],r=s.outputsToSave||[];let a;s.saveAllInputs?(b(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),a=Object.keys(t).map((e=>t[e]))):a=e.map((e=>t[e]));const i=n.filter(((e,t)=>r[t]));return a.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let r=e;"string"===n&&W(e[0])&&(r=e.map((e=>Pr(e))));const a=s.write(r,t,n),i=new na(t,n,a,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(a),t=P(r);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const r={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(r,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:r}=e,a=new na(s,r,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const r=new ra(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[r.name])throw new Error(`Variable with name ${r.name} was already registered`);return this.state.registeredVariables[r.name]=r,this.incRef(r,this.backend),r}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*B(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ra||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*B(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,r,a){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:r},o=Gs(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=J(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],r,a))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ia(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(b(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const r=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));b(r instanceof na,(()=>"The result y returned by f() must be a tensor."));const a=function(e,t,n){const s={},r={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],i=a.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){a.outputs.forEach((e=>s[e.id]=!0)),o=!0,r[a.id]=!0;break}if(o)break}}const a={};a[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in s)a[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(r[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const r=n.inputs[t];s[r.id]&&(e[t]=r)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,r);if(!s&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[r.id]=null==n?function(e){const t=Z(v(e),"float32");return Ea.makeTensor(t,e,"float32")}(r.shape):n,function(e,t,n,s){for(let r=t.length-1;r>=0;r--){const a=t[r],i=[];if(a.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const o=a.gradient(i);for(const t in a.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const r=n((()=>o[t]()));if("float32"!==r.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${r.dtype}'`);const i=a.inputs[t];if(!S(r.shape,i.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${r.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=r;else{const t=e[i.id];e[i.id]=s(t,r),t.dispose()}}}}(e,a,(e=>this.tidy(e)),Aa);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:r,grads:s}}))}customGrad(e){return b(H(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;b(t.every((e=>e instanceof na)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};t.forEach(((e,t)=>{s[t]=e}));return this.runKernelFunc({forwardFunc:(s,r)=>(n=e(...t,r),b(n.value instanceof na,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),b(H(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const r=n.gradFunc(e,s),a=Array.isArray(r)?r:[r];b(a.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),b(a.every((e=>e instanceof na)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return a.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=zr(),n=await this.backend.time(e);return n.wallMs=zr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ta;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function $a(){const e=Ne();if(null==e._tfengine){const t=new ae(e);e._tfengine=new Ca(t)}var t;return t=e._tfengine.ENV,le=t,Qr=()=>e._tfengine,e._tfengine}Ca.nextTensorId=0,Ca.nextVariableId=0;const Ea=$a();function Aa(e,t){const n={a:e,b:t};return Ea.runKernel(Ae,n)}var Ra={};let Fa;function _a(e){Fa=e}function Da(e){if(void 0!==Fa)return Fa;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Oa(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}t(Ra,"mockIsMobile",(()=>_a)),t(Ra,"isMobile",(()=>Da)),t(Ra,"isBrowser",(()=>Oa));const Ma=oe();function La(e,t){let n=e;if(Ur(e))return"string"===t?[]:[e.length];if(ba(e)){const t=e.channels||"RGBA";return[e.height,e.width*t.length]}if(xa(e))return[e.buffer.size/(null==t?4:B(t))];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||Ur(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&oe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&za(e,s,[]),s}function za(e,t,n){if(n=n||[],!Array.isArray(e)&&!Ur(e))return void b(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));b(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),b(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)za(e[t],s,n.concat(t))}function Ba(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Pa(e,t,n,s="numeric"){if(e instanceof na)return Ba(s,e.dtype,t,n),e;let r=G(e);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),Ba(s,r,t,n),null==e||!Ur(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const a=La(e,r);Ur(e)||Array.isArray(e)||(e=[e]);const i="string"!==r?Lr(e,r):Vr(e,[],!0);return Ea.makeTensor(i,a,r)}function Wa(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,r)=>Pa(e,`${t}[${r}]`,n,s)))}Ma.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ma.registerFlag("IS_BROWSER",(()=>Oa())),Ma.registerFlag("IS_NODE",(()=>void 0!==he&&void 0!==he.versions&&void 0!==he.versions.node)),Ma.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Ma.registerFlag("IS_SAFARI",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor))),Ma.registerFlag("PROD",(()=>!1)),Ma.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Ma.getBool("DEBUG"))),Ma.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Ma.registerFlag("IS_TEST",(()=>!1)),Ma.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>Ma.getBool("DEBUG"))),Ma.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Ma.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",(()=>!1)),Ma.registerFlag("USE_SETTIMEOUTCUSTOM",(()=>!1));const Ua="__op";function Va(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=Ua;const r=(...e)=>{Ea.startScope(n);try{const t=s(...e);return se(t)&&console.error("Cannot return a Promise inside of tidy."),Ea.endScope(t),t}catch(e){throw Ea.endScope(null),e}};return Object.defineProperty(r,"name",{value:n,configurable:!0}),r}const Ga=Va({complex_:function(e,t){const n=Pa(e,"real","complex"),s=Pa(t,"imag","complex");x(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const r={real:n,imag:s};return Ea.runKernel(Qe,r)}});function Ha(e,t,n,s){if(null==s)s=G(e);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(xa(e)||ba(e)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return Ea.backend.createTensorFromGPUData(e,t||n,s)}if(!Ur(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ee(t);const e=v(t),s=v(n);b(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],r=e!==n.length-1||s!==v(t.slice(e));b(n[e]===t[e]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return Ur(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?Lr(e,s):Vr(e,[],!0),Ea.makeTensor(e,t,s)}function ja(e,t,n){return Ha(e,t,La(e,n),n)}const qa={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};var Ka,Xa,Ya;Xa=function(e){var t,n,s=ai(e),r=s[0],a=s[1],i=new ti(function(e,t,n){return 3*(t+n)/4-n}(0,r,a)),o=0,l=a>0?r-4:r;for(n=0;n<l;n+=4)t=ei[e.charCodeAt(n)]<<18|ei[e.charCodeAt(n+1)]<<12|ei[e.charCodeAt(n+2)]<<6|ei[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;2===a&&(t=ei[e.charCodeAt(n)]<<2|ei[e.charCodeAt(n+1)]>>4,i[o++]=255&t);1===a&&(t=ei[e.charCodeAt(n)]<<10|ei[e.charCodeAt(n+1)]<<4|ei[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t);return i},Ya=function(e){for(var t,n=e.length,s=n%3,r=[],a=16383,i=0,o=n-s;i<o;i+=a)r.push(ii(e,i,i+a>o?o:i+a));1===s?(t=e[n-1],r.push(Qa[t>>2]+Qa[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],r.push(Qa[t>>10]+Qa[t>>4&63]+Qa[t<<2&63]+"="));return r.join("")}
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */;for(var Za,Ja,Qa=[],ei=[],ti="undefined"!=typeof Uint8Array?Uint8Array:Array,ni="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",si=0,ri=ni.length;si<ri;++si)Qa[si]=ni[si],ei[ni.charCodeAt(si)]=si;function ai(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function ii(e,t,n){for(var s,r,a=[],i=t;i<n;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),a.push(Qa[(r=s)>>18&63]+Qa[r>>12&63]+Qa[r>>6&63]+Qa[63&r]);return a.join("")}ei["-".charCodeAt(0)]=62,ei["_".charCodeAt(0)]=63,Za=function(e,t,n,s,r){var a,i,o=8*r-s-1,l=(1<<o)-1,u=l>>1,c=-7,h=n?r-1:0,p=n?-1:1,d=e[t+h];for(h+=p,a=d&(1<<-c)-1,d>>=-c,c+=o;c>0;a=256*a+e[t+h],h+=p,c-=8);for(i=a&(1<<-c)-1,a>>=-c,c+=s;c>0;i=256*i+e[t+h],h+=p,c-=8);if(0===a)a=1-u;else{if(a===l)return i?NaN:1/0*(d?-1:1);i+=Math.pow(2,s),a-=u}return(d?-1:1)*i*Math.pow(2,a-s)},Ja=function(e,t,n,s,r,a){var i,o,l,u=8*a-r-1,c=(1<<u)-1,h=c>>1,p=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=s?0:a-1,f=s?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,i=c):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),(t+=i+h>=1?p/l:p*Math.pow(2,1-h))*l>=2&&(i++,l/=2),i+h>=c?(o=0,i=c):i+h>=1?(o=(t*l-1)*Math.pow(2,r),i+=h):(o=t*Math.pow(2,h-1)*Math.pow(2,r),i=0));r>=8;e[n+d]=255&o,d+=f,o/=256,r-=8);for(i=i<<r|o,u+=r;u>0;e[n+d]=255&i,d+=f,i/=256,u-=8);e[n+d-f]|=128*m};const oi="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;Ka=ci;const li=2147483647;function ui(e){if(e>li)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,ci.prototype),t}function ci(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return di(e)}return hi(e,t,n)}function hi(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!ci.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const n=0|yi(e,t);let s=ui(n);const r=s.write(e,t);r!==n&&(s=s.slice(0,r));return s}(e,t);if(ArrayBuffer.isView(e))return function(e){if(Zi(e,Uint8Array)){const t=new Uint8Array(e);return mi(t.buffer,t.byteOffset,t.byteLength)}return fi(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(Zi(e,ArrayBuffer)||e&&Zi(e.buffer,ArrayBuffer))return mi(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&(Zi(e,SharedArrayBuffer)||e&&Zi(e.buffer,SharedArrayBuffer)))return mi(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const s=e.valueOf&&e.valueOf();if(null!=s&&s!==e)return ci.from(s,t,n);const r=function(e){if(ci.isBuffer(e)){const t=0|gi(e.length),n=ui(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||Ji(e.length)?ui(0):fi(e);if("Buffer"===e.type&&Array.isArray(e.data))return fi(e.data)}(e);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return ci.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function pi(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function di(e){return pi(e),ui(e<0?0:0|gi(e))}function fi(e){const t=e.length<0?0:0|gi(e.length),n=ui(t);for(let s=0;s<t;s+=1)n[s]=255&e[s];return n}function mi(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');let s;return s=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(s,ci.prototype),s}function gi(e){if(e>=li)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+li.toString(16)+" bytes");return 0|e}function yi(e,t){if(ci.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||Zi(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const n=e.length,s=arguments.length>2&&!0===arguments[2];if(!s&&0===n)return 0;let r=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return Ki(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Xi(e).length;default:if(r)return s?-1:Ki(e).length;t=(""+t).toLowerCase(),r=!0}}function bi(e,t,n){let s=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Fi(this,t,n);case"utf8":case"utf-8":return $i(this,t,n);case"ascii":return Ai(this,t,n);case"latin1":case"binary":return Ri(this,t,n);case"base64":return Ci(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _i(this,t,n);default:if(s)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),s=!0}}function xi(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function wi(e,t,n,s,r){if(0===e.length)return-1;if("string"==typeof n?(s=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),Ji(n=+n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=ci.from(t,s)),ci.isBuffer(t))return 0===t.length?-1:vi(e,t,n,s,r);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):vi(e,[t],n,s,r);throw new TypeError("val must be string, number or Buffer")}function vi(e,t,n,s,r){let a,i=1,o=e.length,l=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(r){let s=-1;for(a=n;a<o;a++)if(u(e,a)===u(t,-1===s?0:a-s)){if(-1===s&&(s=a),a-s+1===l)return s*i}else-1!==s&&(a-=a-s),s=-1}else for(n+l>o&&(n=o-l),a=n;a>=0;a--){let n=!0;for(let s=0;s<l;s++)if(u(e,a+s)!==u(t,s)){n=!1;break}if(n)return a}return-1}function ki(e,t,n,s){n=Number(n)||0;const r=e.length-n;s?(s=Number(s))>r&&(s=r):s=r;const a=t.length;let i;for(s>a/2&&(s=a/2),i=0;i<s;++i){const s=parseInt(t.substr(2*i,2),16);if(Ji(s))return i;e[n+i]=s}return i}function Ii(e,t,n,s){return Yi(Ki(t,e.length-n),e,n,s)}function Si(e,t,n,s){return Yi(function(e){const t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,s)}function Ni(e,t,n,s){return Yi(Xi(t),e,n,s)}function Ti(e,t,n,s){return Yi(function(e,t){let n,s,r;const a=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),s=n>>8,r=n%256,a.push(r),a.push(s);return a}(t,e.length-n),e,n,s)}function Ci(e,t,n){return 0===t&&n===e.length?Ya(e):Ya(e.slice(t,n))}function $i(e,t,n){n=Math.min(e.length,n);const s=[];let r=t;for(;r<n;){const t=e[r];let a=null,i=t>239?4:t>223?3:t>191?2:1;if(r+i<=n){let n,s,o,l;switch(i){case 1:t<128&&(a=t);break;case 2:n=e[r+1],128==(192&n)&&(l=(31&t)<<6|63&n,l>127&&(a=l));break;case 3:n=e[r+1],s=e[r+2],128==(192&n)&&128==(192&s)&&(l=(15&t)<<12|(63&n)<<6|63&s,l>2047&&(l<55296||l>57343)&&(a=l));break;case 4:n=e[r+1],s=e[r+2],o=e[r+3],128==(192&n)&&128==(192&s)&&128==(192&o)&&(l=(15&t)<<18|(63&n)<<12|(63&s)<<6|63&o,l>65535&&l<1114112&&(a=l))}}null===a?(a=65533,i=1):a>65535&&(a-=65536,s.push(a>>>10&1023|55296),a=56320|1023&a),s.push(a),r+=i}return function(e){const t=e.length;if(t<=Ei)return String.fromCharCode.apply(String,e);let n="",s=0;for(;s<t;)n+=String.fromCharCode.apply(String,e.slice(s,s+=Ei));return n}(s)}ci.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),ci.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(ci.prototype,"parent",{enumerable:!0,get:function(){if(ci.isBuffer(this))return this.buffer}}),Object.defineProperty(ci.prototype,"offset",{enumerable:!0,get:function(){if(ci.isBuffer(this))return this.byteOffset}}),ci.poolSize=8192,ci.from=function(e,t,n){return hi(e,t,n)},Object.setPrototypeOf(ci.prototype,Uint8Array.prototype),Object.setPrototypeOf(ci,Uint8Array),ci.alloc=function(e,t,n){return function(e,t,n){return pi(e),e<=0?ui(e):void 0!==t?"string"==typeof n?ui(e).fill(t,n):ui(e).fill(t):ui(e)}(e,t,n)},ci.allocUnsafe=function(e){return di(e)},ci.allocUnsafeSlow=function(e){return di(e)},ci.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==ci.prototype},ci.compare=function(e,t){if(Zi(e,Uint8Array)&&(e=ci.from(e,e.offset,e.byteLength)),Zi(t,Uint8Array)&&(t=ci.from(t,t.offset,t.byteLength)),!ci.isBuffer(e)||!ci.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,s=t.length;for(let r=0,a=Math.min(n,s);r<a;++r)if(e[r]!==t[r]){n=e[r],s=t[r];break}return n<s?-1:s<n?1:0},ci.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},ci.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return ci.alloc(0);let n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;const s=ci.allocUnsafe(t);let r=0;for(n=0;n<e.length;++n){let t=e[n];if(Zi(t,Uint8Array))r+t.length>s.length?(ci.isBuffer(t)||(t=ci.from(t)),t.copy(s,r)):Uint8Array.prototype.set.call(s,t,r);else{if(!ci.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,r)}r+=t.length}return s},ci.byteLength=yi,ci.prototype._isBuffer=!0,ci.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)xi(this,t,t+1);return this},ci.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)xi(this,t,t+3),xi(this,t+1,t+2);return this},ci.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)xi(this,t,t+7),xi(this,t+1,t+6),xi(this,t+2,t+5),xi(this,t+3,t+4);return this},ci.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?$i(this,0,e):bi.apply(this,arguments)},ci.prototype.toLocaleString=ci.prototype.toString,ci.prototype.equals=function(e){if(!ci.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===ci.compare(this,e)},ci.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},oi&&(ci.prototype[oi]=ci.prototype.inspect),ci.prototype.compare=function(e,t,n,s,r){if(Zi(e,Uint8Array)&&(e=ci.from(e,e.offset,e.byteLength)),!ci.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===s&&(s=0),void 0===r&&(r=this.length),t<0||n>e.length||s<0||r>this.length)throw new RangeError("out of range index");if(s>=r&&t>=n)return 0;if(s>=r)return-1;if(t>=n)return 1;if(this===e)return 0;let a=(r>>>=0)-(s>>>=0),i=(n>>>=0)-(t>>>=0);const o=Math.min(a,i),l=this.slice(s,r),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){a=l[e],i=u[e];break}return a<i?-1:i<a?1:0},ci.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},ci.prototype.indexOf=function(e,t,n){return wi(this,e,t,n,!0)},ci.prototype.lastIndexOf=function(e,t,n){return wi(this,e,t,n,!1)},ci.prototype.write=function(e,t,n,s){if(void 0===t)s="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)s=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===s&&(s="utf8")):(s=n,n=void 0)}const r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");s||(s="utf8");let a=!1;for(;;)switch(s){case"hex":return ki(this,e,t,n);case"utf8":case"utf-8":return Ii(this,e,t,n);case"ascii":case"latin1":case"binary":return Si(this,e,t,n);case"base64":return Ni(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Ti(this,e,t,n);default:if(a)throw new TypeError("Unknown encoding: "+s);s=(""+s).toLowerCase(),a=!0}},ci.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const Ei=4096;function Ai(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(127&e[r]);return s}function Ri(e,t,n){let s="";n=Math.min(e.length,n);for(let r=t;r<n;++r)s+=String.fromCharCode(e[r]);return s}function Fi(e,t,n){const s=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>s)&&(n=s);let r="";for(let s=t;s<n;++s)r+=Qi[e[s]];return r}function _i(e,t,n){const s=e.slice(t,n);let r="";for(let e=0;e<s.length-1;e+=2)r+=String.fromCharCode(s[e]+256*s[e+1]);return r}function Di(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function Oi(e,t,n,s,r,a){if(!ci.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<a)throw new RangeError('"value" argument is out of bounds');if(n+s>e.length)throw new RangeError("Index out of range")}function Mi(e,t,n,s,r){Gi(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a,a>>=8,e[n++]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function Li(e,t,n,s,r){Gi(t,s,r,e,n,7);let a=Number(t&BigInt(4294967295));e[n+7]=a,a>>=8,e[n+6]=a,a>>=8,e[n+5]=a,a>>=8,e[n+4]=a;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function zi(e,t,n,s,r,a){if(n+s>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Bi(e,t,n,s,r){return t=+t,n>>>=0,r||zi(e,0,n,4),Ja(e,t,n,s,23,4),n+4}function Pi(e,t,n,s,r){return t=+t,n>>>=0,r||zi(e,0,n,8),Ja(e,t,n,s,52,8),n+8}ci.prototype.slice=function(e,t){const n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);const s=this.subarray(e,t);return Object.setPrototypeOf(s,ci.prototype),s},ci.prototype.readUintLE=ci.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Di(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return s},ci.prototype.readUintBE=ci.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Di(e,t,this.length);let s=this[e+--t],r=1;for(;t>0&&(r*=256);)s+=this[e+--t]*r;return s},ci.prototype.readUint8=ci.prototype.readUInt8=function(e,t){return e>>>=0,t||Di(e,1,this.length),this[e]},ci.prototype.readUint16LE=ci.prototype.readUInt16LE=function(e,t){return e>>>=0,t||Di(e,2,this.length),this[e]|this[e+1]<<8},ci.prototype.readUint16BE=ci.prototype.readUInt16BE=function(e,t){return e>>>=0,t||Di(e,2,this.length),this[e]<<8|this[e+1]},ci.prototype.readUint32LE=ci.prototype.readUInt32LE=function(e,t){return e>>>=0,t||Di(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},ci.prototype.readUint32BE=ci.prototype.readUInt32BE=function(e,t){return e>>>=0,t||Di(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},ci.prototype.readBigUInt64LE=eo((function(e){Hi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ji(e,this.length-8);const s=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,r=this[++e]+256*this[++e]+65536*this[++e]+n*2**24;return BigInt(s)+(BigInt(r)<<BigInt(32))})),ci.prototype.readBigUInt64BE=eo((function(e){Hi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ji(e,this.length-8);const s=t*2**24+65536*this[++e]+256*this[++e]+this[++e],r=this[++e]*2**24+65536*this[++e]+256*this[++e]+n;return(BigInt(s)<<BigInt(32))+BigInt(r)})),ci.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||Di(e,t,this.length);let s=this[e],r=1,a=0;for(;++a<t&&(r*=256);)s+=this[e+a]*r;return r*=128,s>=r&&(s-=Math.pow(2,8*t)),s},ci.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||Di(e,t,this.length);let s=t,r=1,a=this[e+--s];for(;s>0&&(r*=256);)a+=this[e+--s]*r;return r*=128,a>=r&&(a-=Math.pow(2,8*t)),a},ci.prototype.readInt8=function(e,t){return e>>>=0,t||Di(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},ci.prototype.readInt16LE=function(e,t){e>>>=0,t||Di(e,2,this.length);const n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},ci.prototype.readInt16BE=function(e,t){e>>>=0,t||Di(e,2,this.length);const n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},ci.prototype.readInt32LE=function(e,t){return e>>>=0,t||Di(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},ci.prototype.readInt32BE=function(e,t){return e>>>=0,t||Di(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},ci.prototype.readBigInt64LE=eo((function(e){Hi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ji(e,this.length-8);const s=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(s)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),ci.prototype.readBigInt64BE=eo((function(e){Hi(e>>>=0,"offset");const t=this[e],n=this[e+7];void 0!==t&&void 0!==n||ji(e,this.length-8);const s=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(s)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+n)})),ci.prototype.readFloatLE=function(e,t){return e>>>=0,t||Di(e,4,this.length),Za(this,e,!0,23,4)},ci.prototype.readFloatBE=function(e,t){return e>>>=0,t||Di(e,4,this.length),Za(this,e,!1,23,4)},ci.prototype.readDoubleLE=function(e,t){return e>>>=0,t||Di(e,8,this.length),Za(this,e,!0,52,8)},ci.prototype.readDoubleBE=function(e,t){return e>>>=0,t||Di(e,8,this.length),Za(this,e,!1,52,8)},ci.prototype.writeUintLE=ci.prototype.writeUIntLE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Oi(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=1,a=0;for(this[t]=255&e;++a<n&&(r*=256);)this[t+a]=e/r&255;return t+n},ci.prototype.writeUintBE=ci.prototype.writeUIntBE=function(e,t,n,s){if(e=+e,t>>>=0,n>>>=0,!s){Oi(this,e,t,n,Math.pow(2,8*n)-1,0)}let r=n-1,a=1;for(this[t+r]=255&e;--r>=0&&(a*=256);)this[t+r]=e/a&255;return t+n},ci.prototype.writeUint8=ci.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,1,255,0),this[t]=255&e,t+1},ci.prototype.writeUint16LE=ci.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},ci.prototype.writeUint16BE=ci.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},ci.prototype.writeUint32LE=ci.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},ci.prototype.writeUint32BE=ci.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},ci.prototype.writeBigUInt64LE=eo((function(e,t=0){return Mi(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),ci.prototype.writeBigUInt64BE=eo((function(e,t=0){return Li(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),ci.prototype.writeIntLE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Oi(this,e,t,n,s-1,-s)}let r=0,a=1,i=0;for(this[t]=255&e;++r<n&&(a*=256);)e<0&&0===i&&0!==this[t+r-1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},ci.prototype.writeIntBE=function(e,t,n,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*n-1);Oi(this,e,t,n,s-1,-s)}let r=n-1,a=1,i=0;for(this[t+r]=255&e;--r>=0&&(a*=256);)e<0&&0===i&&0!==this[t+r+1]&&(i=1),this[t+r]=(e/a>>0)-i&255;return t+n},ci.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},ci.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},ci.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},ci.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},ci.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||Oi(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},ci.prototype.writeBigInt64LE=eo((function(e,t=0){return Mi(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),ci.prototype.writeBigInt64BE=eo((function(e,t=0){return Li(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),ci.prototype.writeFloatLE=function(e,t,n){return Bi(this,e,t,!0,n)},ci.prototype.writeFloatBE=function(e,t,n){return Bi(this,e,t,!1,n)},ci.prototype.writeDoubleLE=function(e,t,n){return Pi(this,e,t,!0,n)},ci.prototype.writeDoubleBE=function(e,t,n){return Pi(this,e,t,!1,n)},ci.prototype.copy=function(e,t,n,s){if(!ci.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<n&&(s=n),s===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-n&&(s=e.length-t+n);const r=s-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,s):Uint8Array.prototype.set.call(e,this.subarray(n,s),t),r},ci.prototype.fill=function(e,t,n,s){if("string"==typeof e){if("string"==typeof t?(s=t,t=0,n=this.length):"string"==typeof n&&(s=n,n=this.length),void 0!==s&&"string"!=typeof s)throw new TypeError("encoding must be a string");if("string"==typeof s&&!ci.isEncoding(s))throw new TypeError("Unknown encoding: "+s);if(1===e.length){const t=e.charCodeAt(0);("utf8"===s&&t<128||"latin1"===s)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;let r;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(r=t;r<n;++r)this[r]=e;else{const a=ci.isBuffer(e)?e:ci.from(e,s),i=a.length;if(0===i)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(r=0;r<n-t;++r)this[r+t]=a[r%i]}return this};const Wi={};function Ui(e,t,n){Wi[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function Vi(e){let t="",n=e.length;const s="-"===e[0]?1:0;for(;n>=s+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function Gi(e,t,n,s,r,a){if(e>n||e<t){const s="bigint"==typeof t?"n":"";let r;throw r=a>3?0===t||t===BigInt(0)?`>= 0${s} and < 2${s} ** ${8*(a+1)}${s}`:`>= -(2${s} ** ${8*(a+1)-1}${s}) and < 2 ** ${8*(a+1)-1}${s}`:`>= ${t}${s} and <= ${n}${s}`,new Wi.ERR_OUT_OF_RANGE("value",r,e)}!function(e,t,n){Hi(t,"offset"),void 0!==e[t]&&void 0!==e[t+n]||ji(t,e.length-(n+1))}(s,r,a)}function Hi(e,t){if("number"!=typeof e)throw new Wi.ERR_INVALID_ARG_TYPE(t,"number",e)}function ji(e,t,n){if(Math.floor(e)!==e)throw Hi(e,n),new Wi.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new Wi.ERR_BUFFER_OUT_OF_BOUNDS;throw new Wi.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}Ui("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),Ui("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),Ui("ERR_OUT_OF_RANGE",(function(e,t,n){let s=`The value of "${e}" is out of range.`,r=n;return Number.isInteger(n)&&Math.abs(n)>2**32?r=Vi(String(n)):"bigint"==typeof n&&(r=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(r=Vi(r)),r+="n"),s+=` It must be ${t}. Received ${r}`,s}),RangeError);const qi=/[^+/0-9A-Za-z-_]/g;function Ki(e,t){let n;t=t||1/0;const s=e.length;let r=null;const a=[];for(let i=0;i<s;++i){if(n=e.charCodeAt(i),n>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(i+1===s){(t-=3)>-1&&a.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&a.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&a.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;a.push(n)}else if(n<2048){if((t-=2)<0)break;a.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;a.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return a}function Xi(e){return Xa(function(e){if((e=(e=e.split("=")[0]).trim().replace(qi,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Yi(e,t,n,s){let r;for(r=0;r<s&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}function Zi(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function Ji(e){return e!=e}const Qi=function(){const e="0123456789abcdef",t=new Array(256);for(let n=0;n<16;++n){const s=16*n;for(let r=0;r<16;++r)t[s+r]=e[n]+e[r]}return t}();function eo(e){return"undefined"==typeof BigInt?to:e}function to(){throw new Error("BigInt not supported")}var no=Ka;async function so(e,t){const n=[],s=[],r=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let a=0;a<r.length;++a){const i=r[a],o=Array.isArray(e)?e[a].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let r=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(a,r),r+=4,s.set(n,r),r+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:ao(await Promise.all(s)),specs:n}}function ro(e,t){const n={};let s,r=0;for(const a of t){const t=a.name,i=a.dtype,o=a.shape,l=v(o);let u;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=qa[n.dtype],c=e.slice(r,r+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=go()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}r+=l*o}else if("string"===i){const t=v(a.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(r,r+4))[0];r+=4;const n=new Uint8Array(e.slice(r,r+t));u.push(n),r+=t}}else{const s=qa[i],a=e.slice(r,r+l*s);if("float32"===i)u=new Float32Array(a);else if("int32"===i)u=new Int32Array(a);else if("bool"===i)u=new Uint8Array(a);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(a);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const r=ja(e,o,"float32"),i=ja(s,o,"float32");n[t]=Ga(r,i),r.dispose(),i.dispose()}}r+=l*s}"complex64"!==i&&(n[t]=ja(u,o,i))}return n}function ao(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let r=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),r),r+=e.byteLength})),s.buffer}const io=void 0!==no&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function oo(e){return io?no.byteLength(e):new Blob([e]).size}function lo(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function uo(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function co(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(n.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function ho(e,t,n){const s={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(s.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=n}return null!=e.signature&&(s.signature=e.signature),null!=e.userDefinedMetadata&&(s.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(s.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(s.initializerSignature=e.initializerSignature),s}async function po(e,t){let n,s;return null!=e.weightsManifest&&([n,s]=await t(e.weightsManifest)),ho(e,n,s)}function fo(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:oo(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:oo(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function mo(e){const t=[];for(const n of e)t.push(...n.weights);return t}function go(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const r=new ArrayBuffer(4*s.length),a=new Uint32Array(r);for(let r=0;r<s.length;r++){const i=s[r],o=e[n[i>>10]+(1023&i)]+t[i>>10];a[r]=o}return new Float32Array(r)}}class yo{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==yo.instance&&(yo.instance=new yo),yo.instance}static registerSaveRouter(e){yo.getInstance().saveRouters.push(e)}static registerLoadRouter(e){yo.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return yo.getHandlers(e,"save")}static getLoadHandlers(e,t){return yo.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?yo.getInstance().loadRouters:yo.getInstance().saveRouters).forEach((t=>{const r=t(e,n);null!==r&&s.push(r)})),s}}const bo=e=>yo.registerSaveRouter(e),xo=e=>yo.registerLoadRouter(e),wo=e=>yo.getSaveHandlers(e),vo=(e,t)=>yo.getLoadHandlers(e,t),ko="tensorflowjs",Io="models_store",So="model_info_store";function No(){if(!oe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function To(e){const t=e.result;t.createObjectStore(Io,{keyPath:"modelPath"}),t.createObjectStore(So,{keyPath:"modelPath"})}class Co{constructor(e){if(this.indexedDB=No(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(ko,1);s.onupgradeneeded=()=>To(s),s.onsuccess=()=>{const r=s.result;if(null==t){const t=r.transaction(Io,"readonly"),s=t.objectStore(Io).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return r.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(r.close(),n(s.error)),t.oncomplete=()=>r.close()}else{const s=fo(t),a=r.transaction(So,"readwrite");let i,o,l=a.objectStore(So);try{i=l.put({modelPath:this.modelPath,modelArtifactsInfo:s})}catch(e){return n(e)}i.onsuccess=()=>{o=r.transaction(Io,"readwrite");const i=o.objectStore(Io);let u;try{u=i.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s})}catch(e){return n(e)}u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{l=a.objectStore(So);const t=l.delete(this.modelPath);t.onsuccess=()=>(r.close(),n(u.error)),t.onerror=e=>(r.close(),n(u.error))}},i.onerror=e=>(r.close(),n(i.error)),a.oncomplete=()=>{null==o?r.close():o.oncomplete=()=>r.close()}}},s.onerror=e=>n(s.error)}))}}Co.URL_SCHEME="indexeddb://";const $o=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Co.URL_SCHEME)?(t=e.slice(Co.URL_SCHEME.length),new Co(t)):null;var t};yo.registerSaveRouter($o),yo.registerLoadRouter($o);class Eo{constructor(){this.indexedDB=No()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(ko,1);n.onupgradeneeded=()=>To(n),n.onsuccess=()=>{const s=n.result,r=s.transaction(So,"readonly"),a=r.objectStore(So).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(s.close(),t(a.error)),r.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(Co.URL_SCHEME)?t.slice(Co.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(ko,1);s.onupgradeneeded=()=>To(s),s.onsuccess=()=>{const r=s.result,a=r.transaction(So,"readwrite"),i=a.objectStore(So),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return r.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),a=()=>{l=r.transaction(Io,"readwrite");const s=l.objectStore(Io).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=a,s.onerror=e=>(a(),r.close(),n(o.error))}},o.onerror=e=>(r.close(),n(o.error)),a.oncomplete=()=>{null==l?r.close():l.oncomplete=()=>r.close()}},s.onerror=e=>n(s.error)}))}}const Ao="/",Ro="tensorflowjs_models",Fo="info",_o="model_topology",Do="weight_specs",Oo="weight_data",Mo="model_metadata";function Lo(e){return{info:[Ro,e,Fo].join(Ao),topology:[Ro,e,_o].join(Ao),weightSpecs:[Ro,e,Do].join(Ao),weightData:[Ro,e,Oo].join(Ao),modelMetadata:[Ro,e,Mo].join(Ao)}}function zo(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Bo(e){const t=e.split(Ao);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Ao)}class Po{constructor(e){if(!oe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Lo(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=fo(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(io)return no.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const r={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(r)),{modelArtifactsInfo:s}}catch(e){throw zo(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const r=this.LS.getItem(this.keys.modelMetadata);if(null!=r){const e=JSON.parse(r);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.initializerSignature&&(t.initializerSignature=e.initializerSignature),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(io){const t=no.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Po.URL_SCHEME="localstorage://";const Wo=e=>{return oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Po.URL_SCHEME)?(t=e.slice(Po.URL_SCHEME.length),new Po(t)):null;var t};yo.registerSaveRouter(Wo),yo.registerLoadRouter(Wo);class Uo{constructor(){b(oe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),b("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Ro+Ao,n=Ao+Fo;for(let s=0;s<this.LS.length;++s){const r=this.LS.key(s);if(r.startsWith(t)&&r.endsWith(n)){e[Bo(r)]=JSON.parse(this.LS.getItem(r))}}return e}async removeModel(e){var t;const n=Lo(e=(t=e).startsWith(Po.URL_SCHEME)?t.slice(Po.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return zo(n),s}}const Vo="://";class Go{constructor(){this.managers={}}static getInstance(){return null==Go.instance&&(Go.instance=new Go),Go.instance}static registerManager(e,t){b(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(Vo)&&(e=e.slice(0,e.indexOf(Vo))),b(e.length>0,(()=>"scheme must not be an empty string."));const n=Go.getInstance();b(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=Go.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Go.getInstance().managers)}}function Ho(e){if(-1===e.indexOf(Vo))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Go.getSchemes().join(",")}`);return{scheme:e.split(Vo)[0],path:e.split(Vo)[1]}}async function jo(e,t,n=!1){b(e!==t,(()=>`Old path and new path are the same: '${e}'`));const s=yo.getLoadHandlers(e);b(s.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),b(s.length<2,(()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${e}.`));const r=s[0],a=yo.getSaveHandlers(t);b(a.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),b(a.length<2,(()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`));const i=a[0],o=Ho(e).scheme,l=Ho(e).path,u=o===Ho(e).scheme,c=await r.load();n&&u&&await Go.getManager(o).removeModel(l);const h=await i.save(c);return n&&!u&&await Go.getManager(o).removeModel(l),h.modelArtifactsInfo}async function qo(){const e=Go.getSchemes(),t={};for(const n of e){const e=await Go.getManager(n).listModels();for(const s in e){t[n+Vo+s]=e[s]}}return t}async function Ko(e){const t=Ho(e);return Go.getManager(t.scheme).removeModel(t.path)}async function Xo(e,t){return jo(e,t,!1)}async function Yo(e,t){return jo(e,t,!0)}class Zo{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){"undefined"!=typeof window&&oe().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout((()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")}),t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",(e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}}),!0))):setTimeout(e,t)}isTypedArray(e){return Ys(e)}}if(oe().get("IS_BROWSER")){oe().setPlatform("browser",new Zo);try{Go.registerManager(Po.URL_SCHEME,new Uo)}catch(e){}try{Go.registerManager(Co.URL_SCHEME,new Eo)}catch(e){}}const Jo=()=>a("foUwZ");let Qo;function el(e,t="float32",n){return t=t||"float32",ee(e),new Jr(e,t,n)}oe().get("IS_NODE")&&!oe().get("IS_BROWSER")&&oe().setPlatform("node",new class{constructor(){this.util=a("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=oe().global.fetch?oe().global.fetch(e,t):(null==Qo&&(Qo=Jo()),Qo(e,t))}now(){const e=he.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}isTypedArray(e){return this.util.types.isFloat32Array(e)||this.util.types.isInt32Array(e)||this.util.types.isUint8Array(e)||this.util.types.isUint8ClampedArray(e)}});const tl=Va({cast_:function(e,t){const n=Pa(e,"x","cast");if(!L(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},r={dtype:t};return Ea.runKernel(Ye,s,r)}});const nl=Va({clone_:function(e){const t={x:Pa(e,"x","clone","string_or_numeric")};return Ea.runKernel(Wt,t)}});function sl(e,t=!1){console.log(e.toString(t))}$a();function rl(){return Ea}function al(){return Ea.memory()}function il(e,t){return Ea.tidy(e,t)}function ol(e){Ia(e).forEach((e=>e.dispose()))}function ll(e){return Ea.keep(e)}function ul(e,t,n=1){return Ea.registerBackend(e,t,n)}ea={buffer:el,cast:tl,clone:nl,print:sl},ta=function(e){oe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const cl=Va({add_:function(e,t){let n=Pa(e,"a","add"),s=Pa(t,"b","add");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(Ae,r)}});const hl=Va({floorDiv_:function(e,t){let n=Pa(e,"a","floorDiv"),s=Pa(t,"b","floorDiv");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(Ot,r)}});const pl=Va({div_:function(e,t){let n=Pa(e,"a","div"),s=Pa(t,"b","div");if([n,s]=wa(n,s),"int32"===n.dtype&&"int32"===s.dtype)return hl(n,s);const r={a:n,b:s};return Ea.runKernel(kt,r,{})}});const dl=Va({mul_:function(e,t){let n=Pa(e,"a","mul"),s=Pa(t,"b","mul");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(bn,r)}});var fl={};t(fl,"spectral",(()=>df)),t(fl,"signal",(()=>ff)),t(fl,"image",(()=>mf)),t(fl,"linalg",(()=>gf)),t(fl,"losses",(()=>yf)),t(fl,"sparse",(()=>bf)),t(fl,"string",(()=>xf)),t(fl,"abs",(()=>xc)),t(fl,"acos",(()=>gh)),t(fl,"acosh",(()=>yh)),t(fl,"add",(()=>cl)),t(fl,"addN",(()=>bh)),t(fl,"all",(()=>xh)),t(fl,"any",(()=>wh)),t(fl,"argMax",(()=>vh)),t(fl,"argMin",(()=>kh)),t(fl,"asin",(()=>Ih)),t(fl,"asinh",(()=>Sh)),t(fl,"atan",(()=>Nh)),t(fl,"atan2",(()=>Th)),t(fl,"atanh",(()=>Ch)),t(fl,"avgPool",(()=>$h)),t(fl,"avgPool3d",(()=>Eh)),t(fl,"basicLSTMCell",(()=>Rh)),t(fl,"batchToSpaceND",(()=>Fh)),t(fl,"batchNorm",(()=>_h)),t(fl,"batchNorm2d",(()=>Dh)),t(fl,"batchNorm3d",(()=>Oh)),t(fl,"batchNorm4d",(()=>Mh)),t(fl,"bincount",(()=>ec)),t(fl,"bitwiseAnd",(()=>Lh)),t(fl,"broadcastArgs",(()=>zh)),t(fl,"broadcastTo",(()=>ac)),t(fl,"buffer",(()=>el)),t(fl,"cast",(()=>tl)),t(fl,"ceil",(()=>Bh)),t(fl,"clipByValue",(()=>Ph)),t(fl,"clone",(()=>nl)),t(fl,"complex",(()=>Ga)),t(fl,"concat",(()=>ml)),t(fl,"concat1d",(()=>Wh)),t(fl,"concat2d",(()=>Uh)),t(fl,"concat3d",(()=>Vh)),t(fl,"concat4d",(()=>Gh)),t(fl,"conv1d",(()=>Hh)),t(fl,"conv2d",(()=>Jl)),t(fl,"conv2dTranspose",(()=>jh)),t(fl,"conv3d",(()=>qh)),t(fl,"conv3dTranspose",(()=>Xh)),t(fl,"cos",(()=>Yh)),t(fl,"cosh",(()=>Zh)),t(fl,"cumprod",(()=>Jh)),t(fl,"cumsum",(()=>Qh)),t(fl,"denseBincount",(()=>ep)),t(fl,"depthToSpace",(()=>tp)),t(fl,"depthwiseConv2d",(()=>mu)),t(fl,"diag",(()=>np)),t(fl,"dilation2d",(()=>sp)),t(fl,"div",(()=>pl)),t(fl,"divNoNan",(()=>ap)),t(fl,"dot",(()=>ip)),t(fl,"einsum",(()=>op)),t(fl,"elu",(()=>nu)),t(fl,"ensureShape",(()=>lp)),t(fl,"equal",(()=>rp)),t(fl,"erf",(()=>up)),t(fl,"euclideanNorm",(()=>cp)),t(fl,"exp",(()=>sh)),t(fl,"expandDims",(()=>zc)),t(fl,"expm1",(()=>hp)),t(fl,"eye",(()=>Bc)),t(fl,"fill",(()=>Cu)),t(fl,"floor",(()=>pp)),t(fl,"floorDiv",(()=>hl)),t(fl,"gather",(()=>dp)),t(fl,"greater",(()=>nc)),t(fl,"greaterEqual",(()=>cc)),t(fl,"imag",(()=>gl)),t(fl,"isFinite",(()=>fp)),t(fl,"isInf",(()=>mp)),t(fl,"isNaN",(()=>gp)),t(fl,"leakyRelu",(()=>su)),t(fl,"less",(()=>hc)),t(fl,"lessEqual",(()=>tc)),t(fl,"linspace",(()=>yp)),t(fl,"localResponseNormalization",(()=>bp)),t(fl,"log",(()=>Qc)),t(fl,"log1p",(()=>rh)),t(fl,"logSigmoid",(()=>wp)),t(fl,"logSoftmax",(()=>vp)),t(fl,"logSumExp",(()=>ih)),t(fl,"logicalAnd",(()=>pc)),t(fl,"logicalNot",(()=>kp)),t(fl,"logicalOr",(()=>Ip)),t(fl,"logicalXor",(()=>Sp)),t(fl,"lowerBound",(()=>$p)),t(fl,"matMul",(()=>xu)),t(fl,"max",(()=>Ec)),t(fl,"maxPool",(()=>Ep)),t(fl,"maxPool3d",(()=>Ap)),t(fl,"maxPoolWithArgmax",(()=>Rp)),t(fl,"maximum",(()=>Fp)),t(fl,"mean",(()=>Hc)),t(fl,"meshgrid",(()=>_p)),t(fl,"min",(()=>Ac)),t(fl,"minimum",(()=>dc)),t(fl,"mirrorPad",(()=>Dp)),t(fl,"mod",(()=>Op)),t(fl,"moments",(()=>Mp)),t(fl,"mul",(()=>dl)),t(fl,"multiRNNCell",(()=>Lp)),t(fl,"multinomial",(()=>zp)),t(fl,"neg",(()=>fc)),t(fl,"notEqual",(()=>jc)),t(fl,"oneHot",(()=>Bp)),t(fl,"ones",(()=>qc)),t(fl,"onesLike",(()=>Pp)),t(fl,"outerProduct",(()=>Wp)),t(fl,"pad",(()=>Up)),t(fl,"pad1d",(()=>Vp)),t(fl,"pad2d",(()=>Gp)),t(fl,"pad3d",(()=>Hp)),t(fl,"pad4d",(()=>jp)),t(fl,"pool",(()=>Kp)),t(fl,"pow",(()=>Rc)),t(fl,"prelu",(()=>ru)),t(fl,"print",(()=>sl)),t(fl,"prod",(()=>Xp)),t(fl,"raggedGather",(()=>Yp)),t(fl,"raggedRange",(()=>Zp)),t(fl,"raggedTensorToTensor",(()=>Jp)),t(fl,"rand",(()=>Qp)),t(fl,"randomGamma",(()=>hd)),t(fl,"randomNormal",(()=>pd)),t(fl,"randomStandardNormal",(()=>dd)),t(fl,"randomUniform",(()=>fd)),t(fl,"randomUniformInt",(()=>md)),t(fl,"range",(()=>oc)),t(fl,"real",(()=>yl)),t(fl,"reciprocal",(()=>gd)),t(fl,"relu",(()=>au)),t(fl,"relu6",(()=>iu)),t(fl,"reshape",(()=>bl)),t(fl,"reverse",(()=>Tl)),t(fl,"reverse1d",(()=>yd)),t(fl,"reverse2d",(()=>bd)),t(fl,"reverse3d",(()=>xd)),t(fl,"reverse4d",(()=>wd)),t(fl,"round",(()=>rc)),t(fl,"rsqrt",(()=>vd)),t(fl,"scalar",(()=>Cl)),t(fl,"selu",(()=>kd)),t(fl,"separableConv2d",(()=>Id)),t(fl,"setdiff1dAsync",(()=>Sd)),t(fl,"sigmoid",(()=>ou)),t(fl,"sign",(()=>Nd)),t(fl,"sin",(()=>Td)),t(fl,"sinh",(()=>Cd)),t(fl,"slice",(()=>xl)),t(fl,"slice1d",(()=>$d)),t(fl,"slice2d",(()=>Ed)),t(fl,"slice3d",(()=>Ad)),t(fl,"slice4d",(()=>Rd)),t(fl,"softmax",(()=>Fd)),t(fl,"softplus",(()=>xp)),t(fl,"spaceToBatchND",(()=>qp)),t(fl,"fft",(()=>Il)),t(fl,"ifft",(()=>Nl)),t(fl,"irfft",(()=>$l)),t(fl,"rfft",(()=>Sl)),t(fl,"split",(()=>wl)),t(fl,"sqrt",(()=>Fc)),t(fl,"square",(()=>_c)),t(fl,"squaredDifference",(()=>th)),t(fl,"squeeze",(()=>Mc)),t(fl,"stack",(()=>mc)),t(fl,"step",(()=>lu)),t(fl,"stridedSlice",(()=>_d)),t(fl,"sub",(()=>sc)),t(fl,"sum",(()=>uu)),t(fl,"tan",(()=>Dd)),t(fl,"tanh",(()=>Ah)),t(fl,"tensor",(()=>ja)),t(fl,"tensor1d",(()=>ku)),t(fl,"tensor2d",(()=>$u)),t(fl,"tensor3d",(()=>Od)),t(fl,"tensor4d",(()=>Md)),t(fl,"tensor5d",(()=>Ld)),t(fl,"tensor6d",(()=>zd)),t(fl,"tensorScatterUpdate",(()=>Vd)),t(fl,"tile",(()=>_u)),t(fl,"topk",(()=>Gd)),t(fl,"truncatedNormal",(()=>Hd)),t(fl,"unique",(()=>jd)),t(fl,"unsortedSegmentSum",(()=>qd)),t(fl,"unstack",(()=>gc)),t(fl,"upperBound",(()=>Kd)),t(fl,"variable",(()=>Xd)),t(fl,"where",(()=>ic)),t(fl,"whereAsync",(()=>Zd)),t(fl,"zeros",(()=>vl)),t(fl,"zerosLike",(()=>kl)),t(fl,"op",(()=>Va)),t(fl,"OP_SCOPE_SUFFIX",(()=>Ua)),t(fl,"fused",(()=>El));const ml=Va({concat_:function(e,t=0){b(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=Wa(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return nl(n[0]);const s=n,r={axis:t};return Ea.runKernel(tt,s,r)}});const gl=Va({imag_:function(e){const t={input:Pa(e,"input","imag")};return Ea.runKernel(Vt,t)}});const yl=Va({real_:function(e){const t={input:Pa(e,"input","real")};return Ea.runKernel(On,t)}});const bl=Va({reshape_:function(e,t){const n={x:Pa(e,"x","reshape","string_or_numeric")},s={shape:t};return Ea.runKernel(zn,n,s)}});const xl=Va({slice_:function(e,t,n){const s=Pa(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const r={x:s},a={begin:t,size:n};return Ea.runKernel(Jn,r,a)}});const wl=Va({split_:function(e,t,n=0){const s={x:Pa(e,"x","split")},r={numOrSizeSplits:t,axis:n};return Ea.runKernel(os,s,r)}});function vl(e,t="float32"){if(ee(e),"complex64"===t){const t=vl(e,"float32"),n=vl(e,"float32");return Ga(t,n)}const n=J(v(e),t);return Ea.makeTensor(n,e,t)}const kl=Va({zerosLike_:function(e){const t={x:Pa(e,"x","zerosLike")};return Ea.runKernel(Rs,t)}});const Il=Va({fft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ea.runKernel(Rt,t)}});const Sl=Va({rfft_:function(e,t){b("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let r;if(null!=t&&t<n){const s=e.shape.map((e=>0)),a=e.shape.map((e=>e));a[e.shape.length-1]=t,r=xl(e,s,a),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,r=ml([e,vl(s)],e.shape.length-1),n=t}else r=e;const a=kl(r),i=bl(Ga(r,a),[s,n]),o=Il(i),l=Math.floor(n/2)+1,u=yl(o),c=gl(o),h=wl(u,[l,n-l],u.shape.length-1),p=wl(c,[l,n-l],c.shape.length-1),d=r.shape.slice();return d[r.shape.length-1]=l,bl(Ga(h[0],p[0]),d)}});const Nl=Va({ifft_:function(e){b("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ea.runKernel(Ut,t)}});const Tl=Va({reverse_:function(e,t){const n={x:Pa(e,"x","reverse")},s={dims:t};return Ea.runKernel(Gn,n,s)}});function Cl(e,t){if((Ur(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Ur(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Ha(e,[],[],t)}const $l=Va({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const r=bl(e,[n,t]);s=Nl(r)}else{const r=[n,2*(t-1)],a=bl(yl(e),[n,t]),i=bl(gl(e),[n,t]),o=Tl(xl(a,[0,1],[n,t-2]),1),l=dl(Tl(xl(i,[0,1],[n,t-2]),1),Cl(-1)),u=ml([a,o],1),c=ml([i,l],1),h=bl(Ga(u,c),[r[0],r[1]]);s=Nl(h)}if(s=yl(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=bl(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}});var El={};function Al(e,t){b(H(e),(()=>"The f passed in variableGrads(f) must be a function")),b(null==t||Array.isArray(t)&&t.every((e=>e instanceof ra)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Ea.registeredVariables)t.push(Ea.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,r=t.length;b((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`));const{value:a,grads:i}=Ea.gradients(e,t,null,!0);b(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),b(0===a.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:a,grads:o}}function Rl(e){return Ea.customGrad(e)}t(El,"conv2d",(()=>fu)),t(El,"depthwiseConv2d",(()=>bu)),t(El,"matMul",(()=>wu));var Fl={};function _l(e,t){const n=e.length,s=[];for(let r=0;r<n;r++){const a=n-1-r,i=e[a]||1;(t[t.length-1-r]||1)>1&&1===i&&s.unshift(a)}return s}function Dl(e,t){const n=[];for(let s=0;s<t.length;s++){const r=e[e.length-s-1],a=t.length-s-1,i=t[a];(null==r||1===r&&i>1)&&n.unshift(a)}return n}function Ol(e,t){const n=Math.max(e.length,t.length),s=new Array(n);for(let r=0;r<n;r++){let a=e[e.length-r-1];null==a&&(a=1);let i=t[t.length-r-1];if(null==i&&(i=1),1===a)s[n-r-1]=i;else if(1===i)s[n-r-1]=a;else{if(a!==i){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}s[n-r-1]=a}}return s}t(Fl,"getBroadcastDims",(()=>_l)),t(Fl,"getReductionAxes",(()=>Dl)),t(Fl,"assertAndGetBroadcastShape",(()=>Ol));var Ml={};function Ll(e,t,n,s,r="NHWC",a){return Pl(e,[...t,e[3]],n,a,s,null,null,Yl(r))}function zl(e,t,n,s,r,a,i="channelsLast"){const[o,l]=Vl(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Pl(e,u,n,s,r,a,!1,i)}function Bl(e,t,n,s,r,a,i="NDHWC"){const[o,l,u]=Gl(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Wl(e,c,n,s,r,!1,h,a)}function Pl(e,t,n,s,r,a,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Vl(n),[y,b]=Vl(s),x=Hl(p,y),w=Hl(d,b),{padInfo:v,outHeight:k,outWidth:I}=function(e,t,n,s,r,a,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,r){null==s&&(s=Ul(e,t,n));const a=e[0],i=e[1],o=jl((a-t+2*s)/n+1,r),l=jl((i-t+2*s)/n+1,r);return[o,l]}([t,n],a,s,e,o);c=r[0],h=r[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/r);const e=Math.max(0,(c-1)*s+a-t),o=Math.max(0,(h-1)*r+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-a+1)/s),h=Math.ceil((n-i+1)/r);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=jl((t-a+p+d)/s+1,o),h=jl((n-i+f+m)/r+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,x,w,a,o),S=i?f*h:f;let N;return"channelsFirst"===o?N=[l,S,k,I]:"channelsLast"===o&&(N=[l,k,I,S]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:I,outChannels:S,padInfo:v,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:N,filterShape:t}}function Wl(e,t,n,s,r,a=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=Gl(n),[w,v,k]=Gl(s),I=Hl(d,w),S=Hl(f,v),N=Hl(m,k),{padInfo:T,outDepth:C,outHeight:$,outWidth:E}=function(e,t,n,s,r,a,i,o,l,u,c){let h,p,d,f;"valid"===e&&(e=0);if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const m=function(e,t,n,s,r,a){null==r&&(r=Ul(e,t[0],s[0]));const i=[0,0,0,n];for(let n=0;n<3;n++)e[n]+2*r>=t[n]&&(i[n]=jl((e[n]-t[n]+2*r)/s[n]+1,a));return i}([t,n,s,1],[o,l,u],1,[r,a,i],e,c);p=m[0],d=m[1],f=m[2]}else{if("same"!==e)throw Error(`Unknown padding parameter: ${e}`);{p=Math.ceil(t/r),d=Math.ceil(n/a),f=Math.ceil(s/i);const e=(p-1)*r+o-t,c=(d-1)*a+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(r,u,c,h,y,b,x,I,S,N,o),A=a?g*p:g;let R;return"channelsFirst"===i?R=[l,A,C,$,E]:"channelsLast"===i&&(R=[l,C,$,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:C,outHeight:$,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:N,dilationDepth:w,dilationHeight:v,dilationWidth:k,inShape:e,outShape:R,filterShape:t}}function Ul(e,t,n,s=1){const r=Hl(t,s);return Math.floor((e[0]*(n-1)-n+r)/2)}function Vl(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Gl(e){return"number"==typeof e?[e,e,e]:e}function Hl(e,t){return t<=1?e:e+(e-1)*(t-1)}function jl(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function ql(e){const[t,n,s]=Vl(e);return 1===t&&1===n&&1===s}function Kl(e,t){return ql(e)||ql(t)}function Xl(e){return Vl(e).every((e=>e>0))}function Yl(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Zl(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)b(N(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{b(N(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}t(Ml,"computeDilation2DInfo",(()=>Ll)),t(Ml,"convertConv2DDataFormat",(()=>Yl)),t(Ml,"computeConv2DInfo",(()=>Pl)),t(Ml,"computePool2DInfo",(()=>zl)),t(Ml,"computePool3DInfo",(()=>Bl)),t(Ml,"computeConv3DInfo",(()=>Wl)),t(Ml,"computeDefaultPad",(()=>Ul)),t(Ml,"tupleValuesAreOne",(()=>ql)),t(Ml,"eitherStridesOrDilationsAreOne",(()=>Kl)),t(Ml,"stridesOrDilationsArePositive",(()=>Xl)),t(Ml,"checkPadOnDimRoundingMode",(()=>Zl));const Jl=Va({conv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Pa(e,"x","conv2d","float32"),l=Pa(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=bl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Zl("conv2d",s,i);const h="NHWC"===r?u.shape[3]:u.shape[1];b(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),b(Kl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),b(Xl(a),(()=>"Error in conv2D: Dilated rates should be larger than 0.")),b(Xl(n),(()=>"Error in conv2D: Strides should be larger than 0."));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Ea.runKernel(nt,p,d);return c?bl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const Ql=Va({conv2DBackpropFilter_:function(e,t,n,s,r,a="NHWC",i){let o=e;3===e.rank&&(o=bl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=bl(t,[1,t.shape[0],t.shape[1],t.shape[2]])),b(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),b(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),b(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===a?o.shape[3]:o.shape[1],c="NHWC"===a?l.shape[3]:l.shape[1];b(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),b(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Zl("conv2dDerFilter",r,i);const h={x:o,dy:l},p={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,filterShape:n};return Ea.runKernel(st,h,p)}});const eu=Va({conv2DBackpropInput_:function(e,t,n,s,r,a="NHWC",i){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=bl(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),b(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),b(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),b(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===a?o[3]:o[1],h="NHWC"===a?l.shape[3]:l.shape[1];b(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),b(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),Zl("conv2dDerInput",r,i);const p={dy:l,filter:n},d={strides:s,pad:r,dataFormat:a,dimRoundingMode:i,inputShape:o},f=Ea.runKernel(rt,p,d);return u?bl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});var tu={};t(tu,"getFusedDyActivation",(()=>cu)),t(tu,"getFusedBiasGradient",(()=>hu)),t(tu,"applyActivation",(()=>pu)),t(tu,"shouldFuse",(()=>du));const nu=Va({elu_:function(e){const t={x:Pa(e,"x","elu","float32")};return Ea.runKernel(St,t)}});const su=Va({leakyRelu_:function(e,t=.2){const n={x:Pa(e,"x","leakyRelu")},s={alpha:t};return Ea.runKernel(qt,n,s)}});const ru=Va({prelu_:function(e,t){const n={x:Pa(e,"x","prelu"),alpha:Pa(t,"alpha","prelu")};return Ea.runKernel(En,n)}});const au=Va({relu_:function(e){const t={x:Pa(e,"x","relu")};return Ea.runKernel(Ln,t)}});const iu=Va({relu6_:function(e){const t={x:Pa(e,"x","relu6")};return Ea.runKernel(Vn,t)}});const ou=Va({sigmoid_:function(e){const t={x:Pa(e,"x","sigmoid","float32")};return Ea.runKernel(ns,t)}});const lu=Va({step_:function(e,t=0){const n={x:Pa(e,"x","step")},s={alpha:t};return Ea.runKernel(Fs,n,s)}});const uu=Va({sum_:function(e,t=null,n=!1){let s=Pa(e,"x","sum");"bool"===s.dtype&&(s=tl(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Ea.runKernel(as,r,a)}});function cu(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return dl(e,lu(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function hu(e,t){let n=t;const s=Dl(e.shape,t.shape);return s.length>0&&(n=uu(n,s)),bl(n,e.shape)}function pu(e,t,n,s){if("linear"===t)return e;if("relu"===t)return au(e);if("elu"===t)return nu(e);if("relu6"===t)return iu(e);if("prelu"===t)return ru(e,n);if("leakyrelu"===t)return su(e,s);if("sigmoid"===t)return ou(e);throw new Error(`Unknown fused activation ${t}.`)}const du=(e,t)=>!(e>0)||"linear"===t;const fu=Va({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===du(Ea.state.gradientDepth,l)){b("NHWC"===r,(()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=Jl(e,t,n,s,r,a,i);return null!=o&&(h=cl(h,o)),pu(h,l,u,c)}const h=Pa(e,"x","conv2d","float32"),p=Pa(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=bl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),b(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),Zl("fused conv2d",s,i);const m="NHWC"===r?d.shape[3]:d.shape[1];b(p.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`)),b(Kl(n,a),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`));const g=Pl(d.shape,p.shape,n,a,s,i);let y,x;if(null!=o&&(y=Pa(o,"bias","fused conv2d"),[y]=wa(y,h),"NHWC"===r?Ol(g.outShape,y.shape):(b(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),b(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(b(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)b(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Ol(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}x=Pa(u,"prelu weights","fused conv2d")}const w=(e,t)=>{b("NHWC"===r,(()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`));const[i,o,u,c]=t,h=cu(e,u,l);b(ql(a),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`));const p=[eu(o.shape,h,i,n,s),Ql(o,h,i.shape,n,s)];if(null!=c){const e=hu(c,h);p.push(e)}return p},v={x:d,filter:p,bias:y,preluActivationWeights:x},k={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return Rl(((e,t,n)=>{let s=Ea.runKernel(Ms,v,k);return n([t,e,s]),f&&(s=bl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}}))(d,p)}return Rl(((e,t,n,s)=>{let r=Ea.runKernel(Ms,v,k);return s([t,e,r,n]),f&&(r=bl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}}))(d,p,y)}});const mu=Va({depthwiseConv2d_:function(e,t,n,s,r="NHWC",a=[1,1],i){const o=Pa(e,"x","depthwiseConv2d","float32"),l=Pa(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=bl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),b(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`));const h="NHWC"===r?u.shape[3]:u.shape[1];b(h===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Zl("depthwiseConv2d",s,i);const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i},f=Ea.runKernel(mt,p,d);return c?bl(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const gu=Va({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,r,a=[1,1],i){let o=e;3===e.rank&&(o=bl(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=bl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,filterShape:n};return Ea.runKernel(gt,u,c)}});const yu=Va({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,r,a=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=bl(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:r,dimRoundingMode:i,dilations:a,inputShape:e},h=Ea.runKernel(yt,u,c);return l?bl(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const bu=Va({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:r="NHWC",dilations:a=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===du(Ea.state.gradientDepth,l)){let h=mu(e,t,n,s,r,a,i);return null!=o&&(h=cl(h,o)),pu(h,l,u,c)}const h=Pa(e,"x","depthwiseConv2d","float32"),p=Pa(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=bl(h,[1,h.shape[0],h.shape[1],h.shape[2]])),b(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),b(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),b(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==a&&(a=[1,1]),b(Kl(n,a),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),Zl("fused depthwiseConv2d",s,i);const m=Pl(d.shape,p.shape,n,a,s,i,!0);let g,y;null!=o&&(g=Pa(o,"bias","fused conv2d"),[g]=wa(g,h),Ol(m.outShape,g.shape)),null!=u&&(y=Pa(u,"prelu weights","fused depthwiseConv2d"));const x=(e,t)=>{b(ql(a),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`));const[r,o,u,c]=t,h=cu(e,u,l),p=yu(o.shape,h,r,n,s,a,i),d=gu(o,h,r.shape,n,s,a,i);if(null!=c){return[p,d,hu(g,h)]}return[p,d]},w={x:d,filter:p,bias:g,preluActivationWeights:y},v={strides:n,pad:s,dataFormat:r,dilations:a,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){return Rl(((e,t,n)=>{let s=Ea.runKernel(Ls,w,v);return n([t,e,s]),f&&(s=bl(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(d,p)}return Rl(((e,t,n,s)=>{let r=Ea.runKernel(Ls,w,v);return s([t,e,r,n]),f&&(r=bl(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(d,p,g)}});const xu=Va({matMul_:function(e,t,n=!1,s=!1){let r=Pa(e,"a","matMul"),a=Pa(t,"b","matMul");[r,a]=wa(r,a);const i={a:r,b:a},o={transposeA:n,transposeB:s};return Ea.runKernel(He,i,o)}});const wu=Va({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:r,activation:a="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){if(!1===du(Ea.state.gradientDepth,a)){let l=xu(e,t,n,s);return null!=r&&(l=cl(l,r)),pu(l,a,i,o)}let l=Pa(e,"a","fused matMul"),u=Pa(t,"b","fused matMul");[l,u]=wa(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=v(f),y=v(m);b(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const x=Ol(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,d]),w=bl(l,n?[g,c,p]:[g,p,c]),k=bl(u,s?[y,d,h]:[y,h,d]);let I,S;null!=r&&(I=Pa(r,"bias","fused matMul"),[I]=wa(I,l),Ol(x,I.shape)),null!=i&&(S=Pa(i,"prelu weights","fused matMul"));const N=(e,t)=>{const[i,o,l,u]=t,c=cu(bl(e,l.shape),l,a);let h,p;if(n||s?!n&&s?(h=xu(c,o,!1,!1),p=xu(c,i,!0,!1)):n&&!s?(h=xu(o,c,!1,!0),p=xu(i,c,!1,!1)):(h=xu(o,c,!0,!0),p=xu(c,i,!0,!0)):(h=xu(c,o,!1,!0),p=xu(i,c,!0,!1)),null!=r){return[h,p,hu(u,c)]}return[h,p]},T={a:w,b:k,bias:I,preluActivationWeights:S},C={transposeA:n,transposeB:s,activation:a,leakyreluAlpha:o};if(null==r){return Rl(((e,t,n)=>{const s=Ea.runKernel(Os,T,C);return n([e,t,s]),{value:bl(s,x),gradFunc:N}}))(w,k)}return Rl(((e,t,n,s)=>{const r=Ea.runKernel(Os,T,C);return s([e,t,r,n]),{value:bl(r,x),gradFunc:N}}))(w,k,I)}});var vu={};function ku(e,t){w(e);const n=La(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Ha(e,null,n,t)}function Iu(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Su(e,t,n){const s=1-e%2,r=new Float32Array(e);for(let a=0;a<e;++a){const i=2*Math.PI*a/(e+s-1);r[a]=t-n*Math.cos(i)}return ku(r,"float32")}t(vu,"enclosingPowerOfTwo",(()=>Iu)),t(vu,"cosineWindow",(()=>Su));const Nu=Va({hammingWindow_:function(e){return Su(e,.54,.46)}});const Tu=Va({hannWindow_:function(e){return Su(e,.5,.5)}});function Cu(e,t,n){ee(e);const s={shape:e,value:t,dtype:n=n||G(t)};return Ea.runKernel(Ft,{},s)}function $u(e,t,n){if(w(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=La(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Ha(e,t,s,n)}const Eu=Va({frame_:function(e,t,n,s=!1,r=0){let a=0;const i=[];for(;a+t<=e.size;)i.push(xl(e,a,t)),a+=n;if(s)for(;a<e.size;){const s=a+t-e.size,o=ml([xl(e,a,t-s),Cu([s],r)]);i.push(o),a+=n}return 0===i.length?$u([],[0,t]):bl(ml(i),[i.length,t])}});const Au=Va({stft_:function(e,t,n,s,r=Tu){null==s&&(s=Iu(t));const a=Eu(e,t,n),i=dl(a,r(t));return Sl(i,s)}});const Ru=Va({cropAndResize_:function(e,t,n,s,r="bilinear",a=0){const i=Pa(e,"image","cropAndResize"),o=Pa(t,"boxes","cropAndResize","float32"),l=Pa(n,"boxInd","cropAndResize","int32"),u=o.shape[0];b(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),b(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),b(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),b(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),b(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),b("bilinear"===r||"nearest"===r,(()=>`method must be bilinear or nearest, but was ${r}`));const c={image:i,boxes:o,boxInd:l},h={method:r,extrapolationValue:a,cropSize:s};return Ea.runKernel(pt,c,h)}});const Fu=Va({flipLeftRight_:function(e){const t=Pa(e,"image","flipLeftRight","float32");b(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Ea.runKernel(_t,n,{})}});const _u=Va({tile_:function(e,t){const n=Pa(e,"x","tile","string_or_numeric");b(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},r={reps:t};return Ea.runKernel(Ss,s,r)}});const Du=Va({grayscaleToRGB_:function(e){const t=Pa(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];b(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),b(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const r=new Array(t.rank);return r.fill(1,0,n),r[n]=3,_u(t,r)}});const Ou=Va({rotateWithOffset_:function(e,t,n=0,s=.5){const r=Pa(e,"image","rotateWithOffset","float32");b(4===r.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`));const a={image:r},i={radians:t,fillValue:n,center:s};return Ea.runKernel(Ds,a,i)}});function Mu(e,t,n,s,r,a){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==a&&(a=0);const i=e.shape[0];return n=Math.min(n,i),b(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),b(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),b(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),b(1===t.rank,(()=>"scores must be a 1D tensor")),b(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),b(0<=a&&a<=1,(()=>`softNmsSigma must be in [0, 1], but was '${a}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:r,softNmsSigma:a}}const Lu=Va({nonMaxSuppression_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Pa(e,"boxes","nonMaxSuppression","float32"),i=Pa(t,"scores","nonMaxSuppression","float32"),o=Mu(a,i,n,s,r),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:r=o.scoreThreshold};return Ea.runKernel(vn,{boxes:a,scores:i},l)}});function zu(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,r=e.length,a=0,i=!1;for(;s<r;){a=s+(r-s>>>1);const o=n(t,e[a]);o>0?s=a+1:(r=a,i=!o)}return i?s:-s-1}(e,t,n||Bu)}(e,t,n),r=s<0?-(s+1):s;e.splice(r,0,t)}function Bu(e,t){return e>t?1:e<t?-1:0}function Pu(e,t,n,s,r){return Vu(e,t,n,s,r,0)}function Wu(e,t,n,s,r,a){return Vu(e,t,n,s,r,0,!1,a,!0)}function Uu(e,t,n,s,r,a){return Vu(e,t,n,s,r,a,!0)}function Vu(e,t,n,s,r,a,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>r&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(ju);const c=a>0?-.5/a:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:a,suppressBeginIndex:i}=t;if(n<r)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=Gu(e,a,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*Hu(s,c,i),t.score<=r)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(a),p.push(t.score)):t.score>r&&zu(u,t,ju))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function Gu(e,t,n){const s=e.subarray(4*t,4*t+4),r=e.subarray(4*n,4*n+4),a=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),p=Math.max(r[1],r[3]),d=(o-a)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(a,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function Hu(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function ju(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const qu=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY){const a=Pa(e,"boxes","nonMaxSuppressionAsync"),i=Pa(t,"scores","nonMaxSuppressionAsync"),o=Mu(a,i,n,s,r);n=o.maxOutputSize,s=o.iouThreshold,r=o.scoreThreshold;const l=await Promise.all([a.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=Pu(u,c,n,s,r);return a!==e&&a.dispose(),i!==t&&i.dispose(),ku(h,"int32")};const Ku=Va({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Pa(e,"boxes","nonMaxSuppression"),o=Pa(t,"scores","nonMaxSuppression"),l=Mu(i,o,n,s,r,a),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:a=l.softNmsSigma},h=Ea.runKernel(In,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}});const Xu=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=0){const i=Pa(e,"boxes","nonMaxSuppressionAsync"),o=Pa(t,"scores","nonMaxSuppressionAsync"),l=Mu(i,o,n,s,r,a);n=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,a=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=Uu(c,h,n,s,r,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ku(p,"int32"),selectedScores:ku(d)}};const Yu=Va({nonMaxSuppressionPadded_:function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Pa(e,"boxes","nonMaxSuppression"),o=Pa(t,"scores","nonMaxSuppression"),l=Mu(i,o,n,s,r,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:a},h=Ea.runKernel(kn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}});const Zu=async function(e,t,n,s=.5,r=Number.NEGATIVE_INFINITY,a=!1){const i=Pa(e,"boxes","nonMaxSuppressionAsync"),o=Pa(t,"scores","nonMaxSuppressionAsync"),l=Mu(i,o,n,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=Wu(p,d,u,c,h,a);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:ku(f,"int32"),validOutputs:Cl(m,"int32")}};const Ju=Va({resizeBilinear_:function(e,t,n=!1,s=!1){const r=Pa(e,"images","resizeBilinear");b(3===r.rank||4===r.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`)),b(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),b(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=bl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Ea.runKernel(Wn,o,l);return i?bl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const Qu=Va({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const r=Pa(e,"images","resizeNearestNeighbor");b(3===r.rank||4===r.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`)),b(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),b("float32"===r.dtype||"int32"===r.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),b(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let a=r,i=!1;3===r.rank&&(i=!0,a=bl(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,o={images:a},l={alignCorners:n,halfPixelCenters:s,size:t},u=Ea.runKernel(Bn,o,l);return i?bl(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});const ec=Va({bincount_:function(e,t,n){const s=Pa(e,"x","bincount"),r=Pa(t,"weights","bincount");b("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(r.size===s.size||0===r.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`));const a={x:s,weights:r},i={size:n};return Ea.runKernel(qe,a,i)}});const tc=Va({lessEqual_:function(e,t){let n=Pa(e,"a","lessEqual","string_or_numeric"),s=Pa(t,"b","lessEqual","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Xt,r)}});const nc=Va({greater_:function(e,t){let n=Pa(e,"a","greater","string_or_numeric"),s=Pa(t,"b","greater","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Bt,r)}});const sc=Va({sub_:function(e,t){let n=Pa(e,"a","sub"),s=Pa(t,"b","sub");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(vs,r)}});const rc=Va({round_:function(e){const t={x:Pa(e,"x","round")};return Ea.runKernel(Hn,t)}});const ac=Va({broadcastTo_:function(e,t){let n=Pa(e,"broadcastTo","x");const s=n.shape;if(ee(t),t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=bl(n,e)}const r=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(r[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===a.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return nl(n);const i={x:n},o={reps:a};return Ea.runKernel(Ss,i,o)}});const ic=Va({where_:function(e,t,n){const s=Pa(t,"a","where"),r=Pa(n,"b","where"),a=Pa(e,"condition","where","bool"),i=Ol(Ol(a.shape,s.shape),r.shape),o={condition:ac(a,i),t:ac(s,i),e:ac(r,i)};return Ea.runKernel(Yn,o)}});function oc(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const r={start:e,stop:t,step:n,dtype:s};return Ea.runKernel(Dn,{},r)}const lc=Va({threshold_:function(e,t="binary",n=!1,s=.5){const r=Pa(e,"image","threshold"),a=r.shape[0]*r.shape[1];let i,o,l,u,c=dl(ku([s]),255);if(b(3===r.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`)),b(3===r.shape[2]||1===r.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`)),b("int32"===r.dtype||"float32"===r.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`)),b("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===r.shape[2]){[i,o,l]=wl(r,[1,1,1],-1);const e=dl(i,.2989),t=dl(o,.587),n=dl(l,.114);u=cl(cl(e,t),n)}else u=e;if("otsu"===t){c=function(e,t){let n,s,r,a,i,o,l=ku([-1]),u=ku([0]),c=ku([0]);for(let h=0;h<e.size-1;h++){n=xl(e,0,h+1),s=xl(e,h+1),i=pl(uu(n),t),o=pl(uu(s),t);const p=uu(dl(n,oc(0,n.size)));r=pl(p,uu(n));const d=Cu(s.shape,n.size),f=cl(oc(0,s.size),d),m=dl(s,f);a=pl(uu(m),uu(s));const g=sc(r,a),y=sc(r,a),b=dl(i,o);c=dl(dl(b,g),y);const x=nc(c,u);u=ic(x,c,u),l=ic(x,ku([h]),l)}return l}(ec(tl(rc(u),"int32"),ja([]),256),a)}const h=n?tc(u,c):nc(u,c);return tl(dl(h,255),"int32")}});const uc=Va({transform_:function(e,t,n="nearest",s="constant",r=0,a){const i=Pa(e,"image","transform","float32"),o=Pa(t,"transforms","transform","float32");b(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),b(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),b(null==a||2===a.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:r,outputShape:a};return Ea.runKernel(Ts,l,u)}});const cc=Va({greaterEqual_:function(e,t){let n=Pa(e,"a","greaterEqual","string_or_numeric"),s=Pa(t,"b","greaterEqual","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Pt,r)}});const hc=Va({less_:function(e,t){let n=Pa(e,"a","less","string_or_numeric"),s=Pa(t,"b","less","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Kt,r)}});const pc=Va({logicalAnd_:function(e,t){const n=Pa(e,"a","logicalAnd","bool"),s=Pa(t,"b","logicalAnd","bool");Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Qt,r)}});const dc=Va({minimum_:function(e,t){let n=Pa(e,"a","minimum"),s=Pa(t,"b","minimum");[n,s]=wa(n,s),"bool"===n.dtype&&(n=tl(n,"int32"),s=tl(s,"int32")),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(fn,r)}});const fc=Va({neg_:function(e){const t={x:Pa(e,"x","neg")};return Ea.runKernel(xn,t)}});const mc=Va({stack_:function(e,t=0){const n=Wa(e,"tensors","stack","string_or_numeric");b(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&b(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,r={axis:t};return Ea.runKernel(Tn,s,r)}});const gc=Va({unstack_:function(e,t=0){const n=Pa(e,"x","unstack","string_or_numeric");b(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},r={axis:t};return Ea.runKernel(Es,s,r)}});const yc=Va({bandPart_:function(e,t,n){const s=Pa(e,"a","bandPart");b(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const r=s.shape,[a,i]=s.shape.slice(-2);let o,l;"number"==typeof t?(b(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),b(t<=a,(()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`)),o=Pa(t<0?a:t,"numLower","bandPart")):(b("int32"===t.dtype,(()=>"bandPart(): numLower's dtype must be an int32.")),o=ic(hc(t,0),a,dc(t,a))),"number"==typeof n?(b(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`)),b(n<=i,(()=>`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`)),l=Pa(n<0?i:n,"numUpper","bandPart")):(b("int32"===n.dtype,(()=>"bandPart(): numUpper's dtype must be an int32.")),l=ic(hc(n,0),i,dc(n,i)));const u=bl(oc(0,a,1,"int32"),[-1,1]),c=oc(0,i,1,"int32"),h=sc(u,c),p=pc(tc(h,o),cc(h,fc(l))),d=vl([a,i],s.dtype);return bl(mc(gc(bl(s,[-1,a,i])).map((e=>ic(p,e,d)))),r)}});var bc={};t(bc,"norm",(()=>Oc));const xc=Va({abs_:function(e){const t=Pa(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Ea.runKernel(et,e)}{const e={x:t};return Ea.runKernel(Ce,e)}}});var wc={};function vc(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function kc(e,t,n){const s=e.length+t.length,r=[];let a=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?r.push(e[a++]):r.push(t[i++]);return r}function Ic(e,t){const n=[],s=e.length;for(let r=0;r<s;r++)-1===t.indexOf(r)&&n.push(e[r]);return[n,t.map((t=>e[t]))]}function Sc(e,t){return kc(e,t.map((e=>1)),t)}function Nc(e,t,n){b(vc(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Tc(e,t){if(vc(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Cc(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function $c(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}t(wc,"axesAreInnerMostDims",(()=>vc)),t(wc,"combineLocations",(()=>kc)),t(wc,"computeOutAndReduceShapes",(()=>Ic)),t(wc,"expandShapeToKeepDim",(()=>Sc)),t(wc,"assertAxesAreInnerMostDims",(()=>Nc)),t(wc,"getAxesPermutation",(()=>Tc)),t(wc,"getUndoAxesPermutation",(()=>Cc)),t(wc,"getInnerMostAxes",(()=>$c));const Ec=Va({max_:function(e,t=null,n=!1){const s={x:Pa(e,"x","max")},r={reductionIndices:t,keepDims:n};return Ea.runKernel(rn,s,r)}});const Ac=Va({min_:function(e,t=null,n=!1){const s={x:Pa(e,"x","min")},r={axis:t,keepDims:n};return Ea.runKernel(dn,s,r)}});const Rc=Va({pow_:function(e,t){let n=Pa(e,"base","pow"),s=Pa(t,"exp","pow");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel($n,r)}});const Fc=Va({sqrt_:function(e){const t={x:Pa(e,"x","sqrt","float32")};return Ea.runKernel(rs,t)}});const _c=Va({square_:function(e){const t=Pa(e,"x","square");return Ea.runKernel("Square",{x:t},{})}});function Dc(e,t,n=null){if(0===e.rank)return xc(e);if(1!==e.rank&&null===n)return Dc(bl(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return uu(xc(e),n);if(t===1/0)return Ec(xc(e),n);if(t===-1/0)return Ac(xc(e),n);if("euclidean"===t||2===t)return Fc(uu(Rc(xc(e),Cl(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Ec(uu(xc(e),n[0]),n[1]-1);if(t===1/0)return Ec(uu(xc(e),n[1]),n[0]);if(t===-1/0)return Ac(uu(xc(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Fc(uu(_c(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const Oc=Va({norm_:function(e,t="euclidean",n=null,s=!1){const r=Dc(e=Pa(e,"x","norm"),t,n);let a=r.shape;if(s){const t=F(n,e.shape);a=Sc(r.shape,t)}return bl(r,a)}});const Mc=Va({squeeze_:function(e,t){const n=Pa(e,"x","squeeze","string_or_numeric");return bl(n,_(n.shape,t).newShape)}});const Lc=Va({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,b(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)b(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=wl(e,e.shape[0],0).map((e=>Mc(e,[0])));b(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Ea.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=dl(uu(dl(n[s],e)),n[s]);e=sc(e,t)}return pl(e,Oc(e,"euclidean"))})));return t?mc(n,0):n}});const zc=Va({expandDims_:function(e,t=0){const n=Pa(e,"x","expandDims","string_or_numeric");b(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},r={dim:t};return Ea.runKernel(Et,s,r)}});const Bc=Va({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const r=el([e,t],s),a=e<=t?e:t;for(let e=0;e<a;++e)r.set(1,e,e);const i=bl(r.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return _u(zc(i,0),[n[0],1,1]);if(2===n.length)return _u(zc(zc(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return _u(zc(zc(zc(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Pc={};t(Pc,"transpose",(()=>Wc));const Wc=Va({transpose_:function(e,t,n){const s=Pa(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),b(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{b(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const r={x:s},a={perm:t};return"complex64"===s.dtype?il((()=>{let e=yl(s),t=gl(s);return e=Ea.runKernel(Cs,{x:e},a),t=Ea.runKernel(Cs,{x:t},a),n&&(t=fc(t)),Ga(e,t)})):Ea.runKernel(Cs,r,a)}});function Uc(e,t=!1){return Ea.tidy((()=>{b(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let r=Bc(n),a=nl(e);const i=$u([[1]],[1,1]);let o=nl(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=a,l=o,u=r;[o,a,r]=Ea.tidy((()=>{const t=xl(a,[e,e],[n-e,1]),l=Oc(t),u=xl(a,[e,e],[1,1]),c=ic(nc(u,0),$u([[-1]]),$u([[1]])),h=sc(u,dl(c,l)),p=pl(t,h);o=1===p.shape[0]?nl(i):ml([i,xl(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=fc(pl(xu(c,h),l)),f=xl(a,[e,0],[n-e,s]),m=dl(d,o),g=Wc(o);if(0===e)a=sc(f,xu(m,xu(g,f)));else{const t=sc(f,xu(m,xu(g,f)));a=ml([xl(a,[0,0],[e,s]),t],0)}const y=Wc(m),b=xl(r,[0,e],[n,r.shape[1]-e]);if(0===e)r=sc(b,xu(xu(b,o),y));else{const t=sc(b,xu(xu(b,o),y));r=ml([xl(r,[0,0],[n,e]),t],1)}return[o,a,r]})),ol([t,l,u])}return!t&&n>s&&(r=xl(r,[0,0],[n,s]),a=xl(a,[0,0],[s,s])),[r,a]}))}const Vc=Va({qr_:function(e,t=!1){if(b(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Uc(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=gc(bl(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),r=[],a=[];s.forEach((e=>{const[n,s]=Uc(e,t);r.push(n),a.push(s)}));return[bl(mc(r,0),e.shape),bl(mc(a,0),e.shape)]}}});var Gc;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Gc||(Gc={}));const Hc=Va({mean_:function(e,t=null,n=!1){const s={x:Pa(e,"x","mean")},r={axis:t,keepDims:n};return Ea.runKernel(pn,s,r)}});const jc=Va({notEqual_:function(e,t){let n=Pa(e,"a","notEqual","string_or_numeric"),s=Pa(t,"b","notEqual","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(wn,r)}});function qc(e,t="float32"){if(ee(e),"complex64"===t){const t=qc(e,"float32"),n=vl(e,"float32");return Ga(t,n)}const n=Z(v(e),t);return Ea.makeTensor(n,e,t)}const Kc=Va({computeWeightedLoss_:function(e,t,n=Gc.SUM_BY_NONZERO_WEIGHTS){const s=Pa(e,"losses","computeWeightedLoss");let r=null;null!=t&&(r=Pa(t,"weights","computeWeightedLoss"));const a=null==r?s:dl(s,r);if(n===Gc.NONE)return a;if(n===Gc.SUM)return uu(a);if(n===Gc.MEAN){if(null==r)return Hc(a);{const e=s.size/r.size,t=pl(uu(a),uu(r));return e>1?pl(t,Cl(e)):t}}if(n===Gc.SUM_BY_NONZERO_WEIGHTS){if(null==r)return pl(uu(a),Cl(s.size));{const e=dl(r,qc(s.shape)),t=tl(uu(jc(e,Cl(0))),"float32");return pl(uu(a),t)}}throw Error(`Unknown reduction: ${n}`)}});const Xc=Va({absoluteDifference_:function(e,t,n,s=Gc.SUM_BY_NONZERO_WEIGHTS){const r=Pa(e,"labels","absoluteDifference"),a=Pa(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Pa(n,"weights","absoluteDifference")),x(r.shape,a.shape,"Error in absoluteDifference: ");const o=xc(sc(r,a));return Kc(o,i,s)}});const Yc=Va({cosineDistance_:function(e,t,n,s,r=Gc.SUM_BY_NONZERO_WEIGHTS){const a=Pa(e,"labels","cosineDistance"),i=Pa(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Pa(s,"weights","cosineDistance")),x(a.shape,i.shape,"Error in cosineDistance: ");const l=Cl(1),u=sc(l,uu(dl(a,i),n,!0));return Kc(u,o,r)}});const Zc=Va({hingeLoss_:function(e,t,n,s=Gc.SUM_BY_NONZERO_WEIGHTS){let r=Pa(e,"labels","hingeLoss");const a=Pa(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Pa(n,"weights","hingeLoss")),x(r.shape,a.shape,"Error in hingeLoss: ");const o=Cl(1);r=sc(dl(Cl(2),r),o);const l=au(sc(o,dl(r,a)));return Kc(l,i,s)}});const Jc=Va({huberLoss_:function(e,t,n,s=1,r=Gc.SUM_BY_NONZERO_WEIGHTS){const a=Pa(e,"labels","huberLoss"),i=Pa(t,"predictions","huberLoss");let o=null;null!=n&&(o=Pa(n,"weights","huberLoss")),x(a.shape,i.shape,"Error in huberLoss: ");const l=Cl(s),u=xc(sc(i,a)),c=dc(u,l),h=sc(u,c),p=cl(dl(Cl(.5),_c(c)),dl(l,h));return Kc(p,o,r)}});const Qc=Va({log_:function(e){const t={x:Pa(e,"x","log","float32")};return Ea.runKernel(Zt,t)}});const eh=Va({logLoss_:function(e,t,n,s=1e-7,r=Gc.SUM_BY_NONZERO_WEIGHTS){const a=Pa(e,"labels","logLoss"),i=Pa(t,"predictions","logLoss");let o=null;null!=n&&(o=Pa(n,"weights","logLoss")),x(a.shape,i.shape,"Error in logLoss: ");const l=Cl(1),u=Cl(s),c=fc(dl(a,Qc(cl(i,u)))),h=dl(sc(l,a),Qc(cl(sc(l,i),u))),p=sc(c,h);return Kc(p,o,r)}});const th=Va({squaredDifference_:function(e,t){let n=Pa(e,"a","squaredDifference"),s=Pa(t,"b","squaredDifference");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(fs,r,{})}});const nh=Va({meanSquaredError_:function(e,t,n,s=Gc.SUM_BY_NONZERO_WEIGHTS){const r=Pa(e,"labels","meanSquaredError"),a=Pa(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Pa(n,"weights","meanSquaredError")),x(r.shape,a.shape,"Error in meanSquaredError: ");const o=th(r,a);return Kc(o,i,s)}});const sh=Va({exp_:function(e){const t={x:Pa(e,"x","exp")};return Ea.runKernel($t,t)}});const rh=Va({log1p_:function(e){const t={x:Pa(e,"x","log1p")};return Ea.runKernel(Jt,t)}});const ah=Va({sigmoidCrossEntropy_:function(e,t,n,s=0,r=Gc.SUM_BY_NONZERO_WEIGHTS){let a=Pa(e,"multiClassLabels","sigmoidCrossEntropy");const i=Pa(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Pa(n,"weights","sigmoidCrossEntropy")),x(a.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=Cl(s),t=Cl(1),n=Cl(.5);a=cl(dl(a,sc(t,e)),dl(n,e))}const l=function(e,t){const n=Pa(e,"labels","sigmoidCrossEntropyWithLogits"),s=Pa(t,"logits","sigmoidCrossEntropyWithLogits");x(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=au(s),a=dl(s,n),i=rh(sh(fc(xc(s))));return cl(sc(r,a),i)}(a,i);return Kc(l,o,r)}});const ih=Va({logSumExp_:function(e,t=null,n=!1){const s=Pa(e,"x","logSumExp"),r=F(t,s.shape),a=Ec(s,r,!0),i=sc(s,a),o=sh(i),l=uu(o,r),u=Qc(l),c=cl(bl(a,u.shape),u);if(n){const e=Sc(c.shape,r);return bl(c,e)}return c}});const oh=Va({softmaxCrossEntropy_:function(e,t,n,s=0,r=Gc.SUM_BY_NONZERO_WEIGHTS){let a=Pa(e,"onehotLabels","softmaxCrossEntropy");const i=Pa(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Pa(n,"weights","softmaxCrossEntropy")),x(a.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=Cl(s),t=Cl(1),n=Cl(a.shape[1]);a=cl(dl(a,sc(t,e)),pl(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);return Rl(((e,t,s)=>{const r=ih(t,[n],!0),a=sc(tl(t,"float32"),r);s([e,a]);const i=fc(dl(a,e));return{value:uu(i,[n]),gradFunc:(e,t)=>{const[s,r]=t,a=Sc(e.shape,[n]);return[dl(bl(e,a),sc(tl(s,"float32"),sh(r))),dl(bl(e,a),sc(sh(r),tl(s,"float32")))]}}}))(e,t)}(a,i);return Kc(l,o,r)}});const lh=Va({sparseFillEmptyRows_:function(e,t,n,s){const r=Pa(e,"indices","sparseFillEmptyRows","int32"),a=Pa(t,"values","sparseFillEmptyRows"),i=Pa(n,"denseShape","sparseFillEmptyRows","int32"),o=Pa(s,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:r,values:a,denseShape:i,defaultValue:o},u=Ea.runKernel(us,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}});const uh=Va({sparseReshape_:function(e,t,n){const s=Pa(e,"inputIndices","sparseReshape","int32"),r=Pa(t,"inputShape","sparseReshape","int32"),a=Pa(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const i={inputIndices:s,inputShape:r,newShape:a},o=Ea.runKernel(cs,i);return{outputIndices:o[0],outputShape:o[1]}}});const ch=Va({sparseSegmentMean_:function(e,t,n){const s=Pa(e,"data","sparseSegmentMean"),r=Pa(t,"indices","sparseSegmentMean","int32"),a=Pa(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Ea.runKernel(hs,i)}});const hh=Va({sparseSegmentSum_:function(e,t,n){const s=Pa(e,"data","sparseSegmentSum"),r=Pa(t,"indices","sparseSegmentSum","int32"),a=Pa(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const i={data:s,indices:r,segmentIds:a};return Ea.runKernel(ps,i)}});const ph=Va({stringNGrams_:function(e,t,n,s,r,a,i,o){const l=Pa(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Pa(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:r,rightPad:a,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=Ea.runKernel(bs,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}});const dh=Va({stringSplit_:function(e,t,n=!0){const s=Pa(e,"input","stringSplit","string"),r=Pa(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const a={skipEmpty:n},i={input:s,delimiter:r},o=Ea.runKernel(xs,i,a);return{indices:o[0],values:o[1],shape:o[2]}}});const fh=Va({stringToHashBucketFast_:function(e,t){const n=Pa(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const r={input:n};return Ea.runKernel(ws,r,s)}});const mh=Va({staticRegexReplace_:function(e,t,n,s=!0){const r=Pa(e,"input","staticRegexReplace","string"),a={pattern:t,rewrite:n,replaceGlobal:s};return Ea.runKernel(gs,{x:r},a)}});const gh=Va({acos_:function(e){const t={x:Pa(e,"x","acos")};return Ea.runKernel($e,t)}});const yh=Va({acosh_:function(e){const t={x:Pa(e,"x","acosh")};return Ea.runKernel(Ee,t)}});const bh=Va({addN_:function(e){b(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),b(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Pa(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!S(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Ea.runKernel(Re,s)}});const xh=Va({all_:function(e,t=null,n=!1){const s={x:Pa(e,"x","all","bool")},r={axis:t,keepDims:n};return Ea.runKernel(Fe,s,r)}});const wh=Va({any_:function(e,t=null,n=!1){const s={x:Pa(e,"x","any","bool")},r={axis:t,keepDims:n};return Ea.runKernel(_e,s,r)}});const vh=Va({argMax_:function(e,t=0){const n={x:Pa(e,"x","argMax")},s={axis:t};return Ea.runKernel(De,n,s)}});const kh=Va({argMin_:function(e,t=0){const n={x:Pa(e,"x","argMin")},s={axis:t};return Ea.runKernel(Oe,n,s)}});const Ih=Va({asin_:function(e){const t={x:Pa(e,"x","asin")};return Ea.runKernel(Me,t)}});const Sh=Va({asinh_:function(e){const t={x:Pa(e,"x","asinh")};return Ea.runKernel(Le,t)}});const Nh=Va({atan_:function(e){const t={x:Pa(e,"x","atan")};return Ea.runKernel(ze,t)}});const Th=Va({atan2_:function(e,t){let n=Pa(e,"a","atan2"),s=Pa(t,"b","atan2");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(Pe,r)}});const Ch=Va({atanh_:function(e){const t={x:Pa(e,"x","atanh")};return Ea.runKernel(Be,t)}});const $h=Va({avgPool_:function(e,t,n,s,r){const a=Pa(e,"x","avgPool","float32");b(Kl(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=a,o=!1;3===a.rank&&(o=!0,i=bl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),Zl("avgPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r};let c=Ea.runKernel(We,l,u);return c=tl(c,a.dtype),o?bl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Eh=Va({avgPool3d_:function(e,t,n,s,r,a="NDHWC"){const i=Pa(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=bl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),b("NDHWC"===a,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),b("number"==typeof n&&n>0||Array.isArray(n)&&n[0]>0&&n[1]>0&&n[2]>0,(()=>`Error in avgPool3d: Stride must be > 0, but got '${n}'`)),Zl("avgPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a};let h=Ea.runKernel(Ve,u,c);return h=tl(h,o.dtype),l?bl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Ah=Va({tanh_:function(e){const t={x:Pa(e,"x","tanh","float32")};return Ea.runKernel(Is,t)}});const Rh=Va({basicLSTMCell_:function(e,t,n,s,r,a){const i=Pa(e,"forgetBias","basicLSTMCell"),o=Pa(t,"lstmKernel","basicLSTMCell"),l=Pa(n,"lstmBias","basicLSTMCell"),u=Pa(s,"data","basicLSTMCell"),c=Pa(r,"c","basicLSTMCell"),h=Pa(a,"h","basicLSTMCell"),p=ml([u,h],1),d=xu(p,o),f=cl(d,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=xl(f,[0,0],y),x=xl(f,[0,g],y),w=xl(f,[0,2*g],y),v=xl(f,[0,3*g],y),k=cl(dl(ou(b),Ah(x)),dl(c,ou(cl(i,w))));return[k,dl(Ah(k),ou(v))]}});const Fh=Va({batchToSpaceND_:function(e,t,n){const s=Pa(e,"x","batchToSpaceND"),r=t.reduce(((e,t)=>e*t));b(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),b(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),b(s.shape[0]%r==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`));const a={x:s},i={blockShape:t,crops:n};return Ea.runKernel(je,a,i)}});const _h=Va({batchNorm_:function(e,t,n,s,r,a){null==a&&(a=.001);const i=Pa(e,"x","batchNorm"),o=Pa(t,"mean","batchNorm"),l=Pa(n,"variance","batchNorm");let u,c;null!=r&&(u=Pa(r,"scale","batchNorm")),null!=s&&(c=Pa(s,"offset","batchNorm")),b(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),b(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),b(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?bl(e,[1,1,1,e.size]):2===e.rank?bl(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?bl(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:a},f=Ea.runKernel(Mt,p,d);return bl(f,i.shape)}});const Dh=Va({batchNorm2d_:function(e,t,n,s,r,a){const i=Pa(e,"x","batchNorm"),o=Pa(t,"mean","batchNorm"),l=Pa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Pa(r,"scale","batchNorm")),null!=s&&(c=Pa(s,"offset","batchNorm")),b(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),b(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),b(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),_h(i,o,l,c,u,a)}});const Oh=Va({batchNorm3d_:function(e,t,n,s,r,a){const i=Pa(e,"x","batchNorm"),o=Pa(t,"mean","batchNorm"),l=Pa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Pa(r,"scale","batchNorm")),null!=s&&(c=Pa(s,"offset","batchNorm")),b(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),b(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),b(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),_h(i,o,l,c,u,a)}});const Mh=Va({batchNorm4d_:function(e,t,n,s,r,a){const i=Pa(e,"x","batchNorm"),o=Pa(t,"mean","batchNorm"),l=Pa(n,"variance","batchNorm");let u,c;return null!=r&&(u=Pa(r,"scale","batchNorm")),null!=s&&(c=Pa(s,"offset","batchNorm")),b(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),b(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),b(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&b(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&b(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),_h(i,o,l,c,u,a)}});const Lh=Va({bitwiseAnd_:function(e,t){const n=Pa(e,"x","bitwiseAnd"),s=Pa(t,"y","bitwiseAnd");if(!S(n.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${n.shape}, y: ${s.shape}`);if("int32"!==n.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${n.dtype} and type of y: ${s.dtype}`);const r={a:n,b:s};return Ea.runKernel(Ke,r)}});const zh=Va({broadcastArgs_:function(e,t){const n=Pa(e,"s0","broadcastArgs","int32"),s=Pa(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const r={s0:n,s1:s};return Ea.runKernel(Xe,r)}});const Bh=Va({ceil_:function(e){const t={x:Pa(e,"x","ceil","float32")};return Ea.runKernel(Ze,t)}});const Ph=Va({clipByValue_:function(e,t,n){const s=Pa(e,"x","clipByValue");if(b(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`)),t===n)return Cu(s.shape,t,s.dtype);const r={x:s},a={clipValueMin:t,clipValueMax:n};return Ea.runKernel(Je,r,a)}});const Wh=Va({concat1d_:function(e){return ml(e,0)}});const Uh=Va({concat2d_:function(e,t){return ml(e,t)}});const Vh=Va({concat3d_:function(e,t){return ml(e,t)}});const Gh=Va({concat4d_:function(e,t){return ml(e,t)}});const Hh=Va({conv1d_:function(e,t,n,s,r="NWC",a=1,i){const o=Pa(e,"x","conv1d"),l=Pa(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=bl(o,[1,o.shape[0],o.shape[1]])),b(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),b(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Zl("conv1d",s,i),b(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),b(Kl(n,a),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`)),b(Xl(a),(()=>"Error in conv1D: Dilated rates should be larger than 0.")),b(Xl(n),(()=>"Error in conv1D: Stride should be larger than 0.")),b("NWC"===r,(()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`));const h=bl(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=bl(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=Jl(p,h,[1,n],s,"NHWC",[1,a],i);return bl(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}});const jh=Va({conv2dTranspose_:function(e,t,n,s,r,a){const i=Pa(e,"x","conv2dTranspose"),o=Pa(t,"filter","conv2dTranspose");return eu(n,i,o,s,r,"NHWC",a)}});const qh=Va({conv3d_:function(e,t,n,s,r="NDHWC",a=[1,1,1]){const i=Pa(e,"x","conv3d"),o=Pa(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=bl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),b(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),b(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),b(Kl(n,a),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`)),b("NDHWC"===r,(()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`)),b(Xl(a),(()=>"Error in conv3D: Dilated rates should be larger than 0.")),b(Xl(n),(()=>"Error in conv3D: Strides should be larger than 0."));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:r,dilations:a},p=Ea.runKernel(at,c,h);return u?bl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Kh=Va({conv3DBackpropInput_:function(e,t,n,s,r){b(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let a=e,i=t,o=!1;4===t.rank&&(o=!0,i=bl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const l=a[4],u=i.shape[4];b(5===a.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`)),b(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),b(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),b(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),b(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:r,strides:s,inputShape:a},p=Ea.runKernel(ot,c,h);return o?bl(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});const Xh=Va({conv3dTranspose_:function(e,t,n,s,r){const a=Pa(e,"x","conv3dTranspose"),i=Pa(t,"filter","conv3dTranspose");return Kh(n,a,i,s,r)}});const Yh=Va({cos_:function(e){const t={x:Pa(e,"x","cos","float32")};return Ea.runKernel(lt,t)}});const Zh=Va({cosh_:function(e){const t={x:Pa(e,"x","cosh","float32")};return Ea.runKernel(ut,t)}});const Jh=Va({cumprod_:function(e,t=0,n=!1,s=!1){const r={x:Pa(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:s};return Ea.runKernel(ct,r,a)}});const Qh=Va({cumsum_:function(e,t=0,n=!1,s=!1){const r={x:Pa(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:s};return Ea.runKernel(ht,r,a)}});const ep=Va({denseBincount_:function(e,t,n,s=!1){const r=Pa(e,"x","denseBincount"),a=Pa(t,"weights","denseBincount");b("int32"===r.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`)),b(r.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`)),b(n>=0,(()=>`size must be non-negative, but got ${n}.`)),b(a.size===r.size||0===a.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${a.shape}.`));const i={x:r,weights:a},o={size:n,binaryOutput:s};return Ea.runKernel(dt,i,o)}});const tp=Va({depthToSpace_:function(e,t,n="NHWC"){const s=Pa(e,"x","depthToSpace","float32"),r="NHWC"===n?s.shape[1]:s.shape[2],a="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];b(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),b(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),b(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),b(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Ea.runKernel(ft,o,l)}});const np=Va({diag_:function(e){const t={x:Pa(e,"x","diag")};return Ea.runKernel(bt,t)}});const sp=Va({dilation2d_:function(e,t,n,s,r=[1,1],a="NHWC"){const i=Pa(e,"x","dilation2d"),o=Pa(t,"filter","dilation2d");b(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),b(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),b("NHWC"===a,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`));let l=i,u=!1;3===i.rank&&(l=bl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0),b(l.shape[3]===o.shape[2],(()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${o.shape[2]}`));const c={x:l,filter:o},h={strides:n,pad:s,dilations:r},p=Ea.runKernel(xt,c,h);return u?bl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const rp=Va({equal_:function(e,t){let n=Pa(e,"a","equal","string_or_numeric"),s=Pa(t,"b","equal","string_or_numeric");[n,s]=wa(n,s),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(Ct,r)}});const ap=Va({divNoNan_:function(e,t){let n=Pa(e,"a","div"),s=Pa(t,"b","div");[n,s]=wa(n,s);const r=pl(n,s),a=kl(r),i=rp(s,a);return ic(i,a,r)}});const ip=Va({dot_:function(e,t){const n=Pa(e,"t1","dot"),s=Pa(t,"t2","dot");b(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const r=1===n.rank?n.size:n.shape[1],a=1===s.rank?s.size:s.shape[0];if(b(r===a,(()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${a}.`)),1===n.rank&&1===s.rank){const e=bl(n,[1,-1]),t=bl(s,[-1,1]),r=xu(e,t);return bl(r,[])}if(1===n.rank&&2===s.rank){const e=bl(n,[1,-1]),t=bl(s,[s.shape[0],s.shape[1]]),r=xu(e,t);return bl(r,[r.size])}if(2===n.rank&&1===s.rank){const e=bl(s,[-1,1]),t=xu(n,e);return bl(t,[t.size])}{const e=bl(s,[s.shape[0],s.shape[1]]);return xu(n,e)}}});const op=Va({einsum_:function(e,...t){const n=t.map(((e,t)=>Pa(e,`tensors${t}`,"einsum"))),s={equation:e};return Ea.runKernel(It,n,s)}});const lp=Va({ensureShape_:function(e,t){const n=Pa(e,"x","ensureShape","string_or_numeric");if(!I(n.shape,t))throw new Error(`EnsureShape: Shape of tensor ${n.shape} is not compatible with expected shape ${t}`);return e}});const up=Va({erf_:function(e){let t=Pa(e,"x","erf");b("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=tl(t,"float32"));const n={x:t};return Ea.runKernel(Tt,n)}});const cp=Va({euclideanNorm_:function(e,t=null,n=!1){return Oc(e,"euclidean",t,n)}});const hp=Va({expm1_:function(e){const t={x:Pa(e,"x","expm1")};return Ea.runKernel(At,t)}});const pp=Va({floor_:function(e){const t={x:Pa(e,"x","floor","float32")};return Ea.runKernel(Dt,t)}});const dp=Va({gather_:function(e,t,n=0,s=0){const r={x:Pa(e,"x","gather"),indices:Pa(t,"indices","gather","int32")},a={axis:n,batchDims:s};return Ea.runKernel(Lt,r,a)}});const fp=Va({isFinite_:function(e){const t={x:Pa(e,"x","isFinite")};return Ea.runKernel(Gt,t)}});const mp=Va({isInf_:function(e){const t={x:Pa(e,"x","isInf")};return Ea.runKernel(Ht,t)}});const gp=Va({isNaN_:function(e){const t={x:Pa(e,"x","isNaN")};return Ea.runKernel(jt,t)}});function yp(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Ea.runKernel(Yt,{},s)}const bp=Va({localResponseNormalization_:function(e,t=5,n=1,s=1,r=.5){const a=Pa(e,"x","localResponseNormalization");b(4===a.rank||3===a.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`)),b(N(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=a,o=!1;3===a.rank&&(o=!0,i=bl(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:r},c=Ea.runKernel(nn,l,u);return o?bl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const xp=Va({softplus_:function(e){const t={x:Pa(e,"x","softplus")};return Ea.runKernel(ss,t)}});const wp=Va({logSigmoid_:function(e){const t=Pa(e,"x","logSigmoid");return Rl((e=>({value:fc(xp(fc(e))),gradFunc:t=>dl(t,ou(fc(e)))})))(t)}});const vp=Va({logSoftmax_:function(e,t=-1){const n=Pa(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Rl(((e,n)=>{const s=Ec(e,t,!0),r=sc(e,s),a=sc(tl(r,"float32"),Qc(uu(sh(r),t,!0)));n([a]);return{value:a,gradFunc:(e,n)=>{const[s]=n,r=sh(s);return sc(e,dl(uu(e,t,!0),r))}}}))(n)}});const kp=Va({logicalNot_:function(e){const t={x:Pa(e,"x","logicalNot","bool")};return Ea.runKernel(en,t)}});const Ip=Va({logicalOr_:function(e,t){const n=Pa(e,"a","logicalOr","bool"),s=Pa(t,"b","logicalOr","bool");Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(tn,r)}});const Sp=Va({logicalXor_:function(e,t){const n=Pa(e,"a","logicalXor","bool"),s=Pa(t,"b","logicalXor","bool");return Ol(n.shape,s.shape),pc(Ip(e,t),kp(pc(e,t)))}});var Np={};t(Np,"searchSorted",(()=>Cp));const Tp=2147483648;const Cp=Va({searchSorted_:function(e,t,n="left"){const s=Pa(e,"sortedSequence","searchSorted"),r=Pa(t,"values","searchSorted"),a=s.shape[s.shape.length-1],i=r.shape[r.shape.length-1],o=bl(s,[-1,a]),l=bl(r,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(v(l.shape)>=Tp)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=Tp)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const u={sortedSequence:o,values:l},c={side:n};return Ea.runKernel(Xn,u,c)}});function $p(e,t){return Cp(e,t,"left")}const Ep=Va({maxPool_:function(e,t,n,s,r){const a=Pa(e,"x","maxPool");let i=a,o=!1;3===a.rank&&(o=!0,i=bl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),b(Kl(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Zl("maxPool",s,r);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:r},c=Ea.runKernel(on,l,u);return o?bl(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const Ap=Va({maxPool3d_:function(e,t=[1,1,1],n,s,r,a="NDHWC"){const i=Pa(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=bl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),b(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),b("NDHWC"===a,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`)),Zl("maxPool3d",s,r);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:r,dataFormat:a},h=Ea.runKernel(un,u,c);return l?bl(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const Rp=Va({maxPoolWithArgmax_:function(e,t,n,s,r=!1){const a={x:Pa(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:r},o=Ea.runKernel(hn,a,i);return{result:o[0],indexes:o[1]}}});const Fp=Va({maximum_:function(e,t){let n=Pa(e,"a","maximum"),s=Pa(t,"b","maximum");[n,s]=wa(n,s),"bool"===n.dtype&&(n=tl(n,"int32"),s=tl(s,"int32")),Ol(n.shape,s.shape);const r={a:n,b:s};return Ea.runKernel(an,r)}});function _p(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let s=Pa(e,"x","meshgrid",e instanceof na?e.dtype:"float32");if(void 0===t)return[s];let r=Pa(t,"y","meshgrid",t instanceof na?t.dtype:"float32");const a=v(s.shape),i=v(r.shape);return"xy"===n?(s=bl(s,[1,-1]),r=bl(r,[-1,1]),[xu(qc([i,1],s.dtype),s),xu(r,qc([1,a],r.dtype))]):(s=bl(s,[-1,1]),r=bl(r,[1,-1]),[xu(s,qc([1,i],s.dtype)),xu(qc([a,1],r.dtype),r)])}const Dp=Va({mirrorPad_:function(e,t,n){b("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Pa(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");b(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const r="reflect"===n?1:0;for(let e=0;e<s.rank;e++)b(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),b(t[e][0]>=0&&t[e][0]<=s.shape[e]-r&&t[e][1]>=0&&t[e][1]<=s.shape[e]-r,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-r} or less than 0 for input of shape ${s.shape}`));const a={paddings:t,mode:n},i={x:s};return Ea.runKernel(mn,i,a)}});const Op=Va({mod_:function(e,t){let n=Pa(e,"a","mod"),s=Pa(t,"b","mod");[n,s]=wa(n,s);const r={a:n,b:s};return Ea.runKernel(gn,r)}});const Mp=Va({moments_:function(e,t=null,n=!1){const s=F(t,(e=Pa(e,"x","moments")).shape),r=Hc(e,s,n);let a=r.shape;n||(a=Sc(r.shape,s));const i=_c(sc(tl(e,"float32"),bl(r,a)));return{mean:r,variance:Hc(i,s,n)}}});const Lp=Va({multiRNNCell_:function(e,t,n,s){const r=Pa(t,"data","multiRNNCell"),a=Wa(n,"c","multiRNNCell"),i=Wa(s,"h","multiRNNCell");let o=r;const l=[];for(let t=0;t<e.length;t++){const n=e[t](o,a[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),c.push(l[e+1]);return[u,c]}});const zp=Va({multinomial_:function(e,t,n,s=!1){const r=Pa(e,"logits","multinomial"),a=r.size,i=r.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?bl(r,[1,-1]):r},l={numSamples:t,seed:n,normalized:s},u=Ea.runKernel(yn,o,l);return 1===i?bl(u,[u.size]):u}});const Bp=Va({oneHot_:function(e,t,n=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Pa(e,"indices","oneHot","int32")},i={dtype:r,depth:t,onValue:n,offValue:s};return Ea.runKernel(Nn,a,i)}});const Pp=Va({onesLike_:function(e){const t={x:Pa(e,"x","onesLike")};return Ea.runKernel(Sn,t)}});const Wp=Va({outerProduct_:function(e,t){const n=Pa(e,"v1","outerProduct"),s=Pa(t,"v2","outerProduct");b(1===n.rank&&1===s.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${s.rank}.`));const r=bl(n,[-1,1]),a=bl(s,[1,-1]);return xu(r,a)}});const Up=Va({pad_:function(e,t,n=0){const s=Pa(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const r={paddings:t,constantValue:n},a={x:s};return Ea.runKernel(Cn,a,r)}});const Vp=Va({pad1d_:function(e,t,n=0){return b(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Up(e,[t],n)}});const Gp=Va({pad2d_:function(e,t,n=0){return b(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Up(e,t,n)}});const Hp=Va({pad3d_:function(e,t,n=0){return b(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Up(e,t,n)}});const jp=Va({pad4d_:function(e,t,n=0){return b(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Up(e,t,n)}});const qp=Va({spaceToBatchND_:function(e,t,n){const s=Pa(e,"x","spaceToBatchND");b(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),b(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),b(s.shape.reduce(((e,s,r)=>r>0&&r<=t.length?e&&(s+n[r-1][0]+n[r-1][1])%t[r-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const r={x:s},a={blockShape:t,paddings:n};return Ea.runKernel(is,r,a)}});const Kp=Va({pool_:function(e,t,n,s,r,a,i){null==r&&(r=[1,1]),null==a&&(a=1),0===s&&(s="valid");const o=Pa(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=bl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),b(Kl(a,r),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${r}'`));const c=zl(l.shape,t,a,r,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),r=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],r[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),r=n.map((e=>e[1])),a=e.concat(s,r),i=t.map(((e,t)=>(e-a[t]%e)%e)),o=r.map(((e,t)=>e+i[t])),l=t.map(((e,t)=>[s[t],o[t]])),u=t.map(((e,t)=>[0,i[t]]));return[l,u]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:qp(l,h,f),x=("avg"===n?()=>$h(y,t,a,g,i):()=>Ep(y,t,a,g,i))(),w=d?x:Fh(x,h,m);return u?bl(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});const Xp=Va({prod_:function(e,t=null,n=!1){let s=Pa(e,"x","prod");"bool"===s.dtype&&(s=tl(s,"int32"));const r={x:s},a={axis:t,keepDims:n};return Ea.runKernel(An,r,a)}});const Yp=Va({raggedGather_:function(e,t,n,s){const r={paramsNestedSplits:e.map(((e,t)=>Pa(e,`tensors${t}`,"raggedGather","int32"))),paramsDenseValues:Pa(t,"paramsDenseValues","raggedGather"),indices:Pa(n,"indices","raggedGather","int32")},a={outputRaggedRank:s},i=Ea.runKernel(Rn,r,a);return{outputNestedSplits:i.slice(0,i.length-1),outputDenseValues:i[i.length-1]}}});const Zp=Va({raggedRange_:function(e,t,n){const s=Pa(e,"starts","raggedRange"),r={starts:s,limits:Pa(t,"limits","raggedRange",s.dtype),deltas:Pa(n,"deltas","raggedRange",s.dtype)},a=Ea.runKernel(Fn,r);return{rtNestedSplits:a[0],rtDenseValues:a[1]}}});const Jp=Va({raggedTensorToTensor_:function(e,t,n,s,r){const a=Pa(e,"shape","raggedTensorToTensor","int32"),i=Pa(t,"values","raggedTensorToTensor"),o={shape:a,values:i,defaultValue:Pa(n,"defaultValue","raggedTensorToTensor",i.dtype),rowPartitionTensors:s.map(((e,t)=>Pa(e,`tensors${t}`,"raggedTensorToTensor","int32")))},l={rowPartitionTypes:r};return Ea.runKernel(_n,o,l)}});const Qp=Va({rand_:function(e,t,n){ee(e);const s=v(e);let r=null;if(null==n||"float32"===n)r=new Float32Array(s);else if("int32"===n)r=new Int32Array(s);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);r=new Uint8Array(s)}for(let e=0;e<s;e++)r[e]=t();return Ea.makeTensor(r,e,n)}});var ed={},td=a("gj6Et"),nd=a("4gDjz"),sd=a("HLBv4"),rd=a("ktaoY"),ad=a("gBs5C"),id=a("ktLSh"),od={};!function(e,t,n){var s,r=256,i=n.pow(r,6),o=n.pow(2,52),l=2*o,u=255;function c(a,u,c){var g=[],y=f(d((u=1==u?{entropy:!0}:u||{}).entropy?[a,m(t)]:null==a?function(){try{var n;return s&&(n=s.randomBytes)?n=n(r):(n=new Uint8Array(r),(e.crypto||e.msCrypto).getRandomValues(n)),m(n)}catch(n){var a=e.navigator,i=a&&a.plugins;return[+new Date,e,i,e.screen,m(t)]}}():a,3),g),b=new h(g),x=function(){for(var e=b.g(6),t=i,n=0;e<o;)e=(e+n)*r,t*=r,n=b.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|b.g(4)},x.quick=function(){return b.g(4)/4294967296},x.double=x,f(m(b.S),t),(u.pass||c||function(e,t,s,r){return r&&(r.S&&p(r,b),e.state=function(){return p(b,{})}),s?(n.random=e,t):e})(x,y,"global"in u?u.global:this==n,u.state)}function h(e){var t,n=e.length,s=this,a=0,i=s.i=s.j=0,o=s.S=[];for(n||(e=[n++]);a<r;)o[a]=a++;for(a=0;a<r;a++)o[a]=o[i=u&i+e[a%n]+(t=o[a])],o[i]=t;(s.g=function(e){for(var t,n=0,a=s.i,i=s.j,o=s.S;e--;)t=o[a=u&a+1],n=n*r+o[u&(o[a]=o[i=u&i+t])+(o[i]=t)];return s.i=a,s.j=i,n})(r)}function p(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){var n,s=[],r=typeof e;if(t&&"object"==r)for(n in e)try{s.push(d(e[n],t-1))}catch(e){}return s.length?s:"string"==r?e:e+"\0"}function f(e,t){for(var n,s=e+"",r=0;r<s.length;)t[u&r]=u&(n^=19*t[u&r])+s.charCodeAt(r++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(f(n.random(),t),od){od=c;try{s=a("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):n.seedrandom=c}("undefined"!=typeof self?self:od,[],Math),od.alea=td,od.xor128=nd,od.xorwow=sd,od.xorshift7=rd,od.xor4096=ad,od.tychei=id,ed=od;class ld{constructor(e,t,n,s,r){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=r||Math.random();this.random=ed.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,r,a;do{s=2*this.random()-1,r=2*this.random()-1,a=s*s+r*r}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*r*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class ud{constructor(e,t,n,s){this.alpha=e,this.beta=1/t,this.dtype=n;const r=s||Math.random();this.randu=ed.alea(r.toString()),this.randn=new ld(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,s,r,a;for(;;){do{s=this.randn.nextValue(),a=1+this.c*s}while(a<=0);if(a*=a*a,e=s*s,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),r=this.randu(),r<t||Math.log(r)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class cd{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ed.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const hd=Va({randomGamma_:function(e,t,n=1,s="float32",r){if(ee(e),null==n&&(n=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const a=new ud(t,n,s,r),i=el(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const pd=Va({randomNormal_:function(e,t=0,n=1,s,r){if(ee(e),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const a=new ld(t,n,s,!1,r),i=el(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const dd=Va({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return pd(e,0,1,t,n)}});const fd=Va({randomUniform_:function(e,t=0,n=1,s="float32",r){ee(e);const a=el(e,s),i=new cd(t,n,null,r);for(let e=0;e<a.values.length;e++)a.values[e]=i.nextValue();return a.toTensor()}});const md=Va({randomUniformInt_:function(e,t,n,s){return fd(e,t,n,"int32",s)}});const gd=Va({reciprocal_:function(e){const t={x:Pa(e,"x","reciprocal")};return Ea.runKernel(Mn,t)}});const yd=Va({reverse1d_:function(e){const t=Pa(e,"x","reverse");return b(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),Tl(t,0)}});const bd=Va({reverse2d_:function(e,t){const n=Pa(e,"x","reverse");return b(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),Tl(n,t)}});const xd=Va({reverse3d_:function(e,t){const n=Pa(e,"x","reverse");return b(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),Tl(n,t)}});const wd=Va({reverse4d_:function(e,t){const n=Pa(e,"x","reverse");return b(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),Tl(n,t)}});const vd=Va({rsqrt_:function(e){const t={x:Pa(e,"x","rsqrt","float32")};return Ea.runKernel(jn,t)}});const kd=Va({selu_:function(e){const t={x:Pa(e,"x","selu")};return Ea.runKernel(Zn,t)}});const Id=Va({separableConv2d_:function(e,t,n,s,r,a=[1,1],i="NHWC"){const o=Pa(e,"x","separableConv2d"),l=Pa(t,"depthwiseFilter","separableConv2d"),u=Pa(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=bl(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");b(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),b(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),b(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),b(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];b(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=mu(c,l,s,r,i,a),m=Jl(f,u,1,"valid",i);return h?bl(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});const Sd=async function(e,t){const n=Pa(e,"x","setdiff1d"),s=Pa(t,"y","setdiff1d");b(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),b(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),b(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const r=await n.data(),a=await s.data(),i=new Set(a);let o=0;for(let e=0;e<r.length;e++)i.has(r[e])||o++;const l=new Jr([o],n.dtype),u=new Jr([o],"int32");for(let e=0,t=0;e<r.length;e++)i.has(r[e])||(l.values[t]=r[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]};const Nd=Va({sign_:function(e){const t={x:Pa(e,"x","sign")};return Ea.runKernel(ts,t)}});const Td=Va({sin_:function(e){const t={x:Pa(e,"x","sin","float32")};return Ea.runKernel(Qn,t)}});const Cd=Va({sinh_:function(e){const t={x:Pa(e,"x","sinh")};return Ea.runKernel(es,t)}});const $d=Va({slice1d_:function(e,t,n){const s=Pa(e,"x","slice1d");return b(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),xl(s,[t],[n])}});const Ed=Va({slice2d_:function(e,t,n){const s=Pa(e,"x","slice2d");return b(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}});const Ad=Va({slice3d_:function(e,t,n){const s=Pa(e,"x","slice3d");return b(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}});const Rd=Va({slice4d_:function(e,t,n){const s=Pa(e,"x","slice4d");return b(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),xl(s,t,n)}});const Fd=Va({softmax_:function(e,t=-1){const n=Pa(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},r={dim:t};return Ea.runKernel(ls,s,r)}});const _d=Va({stridedSlice_:function(e,t,n,s,r=0,a=0,i=0,o=0,l=0){const u={x:Pa(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ea.runKernel(ys,u,c)}});const Dd=Va({tan_:function(e){const t={x:Pa(e,"x","tan","float32")};return Ea.runKernel(ks,t)}});function Od(e,t,n){if(w(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=La(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Ha(e,t,s,n)}function Md(e,t,n){if(w(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=La(e,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Ha(e,t,s,n)}function Ld(e,t,n){if(w(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=La(e,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Ha(e,t,s,n)}function zd(e,t,n){if(w(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=La(e,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Ha(e,t=t||s,s,n)}var Bd={};function Pd(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${r}.`;if(n.rank<r)throw new Error(a+` update.rank < ${r}. `);if(e.length<s+(n.rank-r))throw new Error(a+` Output shape length < ${s+(n.rank-r)}`);if(n.rank!==r+e.length-s)throw new Error(a+" update.rank != "+(r+e.length-s));for(let e=0;e<r;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-r;++t)if(n.shape[t+r]!==e[t+s])throw new Error(a+` updates.shape[${t+r}] (${n.shape[t+r]}) != shape[${t+r}] (${e[t+r]})`)}function Wd(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}Pd(n,t,e)}function Ud(e,t,n){const s=t.shape.length,r=s>1?t.shape[s-1]:1,a=n.length;let i=1;for(let e=r;e<a;++e)i*=n[e];const o=r<1?1:r;return{sliceRank:r,numUpdates:v(t.shape)/o,sliceSize:i,strides:[...q(n.slice(0,r)),1],outputSize:v(n)}}t(Bd,"validateUpdateShape",(()=>Pd)),t(Bd,"validateInput",(()=>Wd)),t(Bd,"calculateShapes",(()=>Ud));const Vd=Va({tensorScatterUpdate_:function(e,t,n){const s=Pa(e,"tensor","tensorScatterupdate"),r=Pa(t,"indices","tensorScatterupdate","int32"),a=Pa(n,"updates","tensorScatterupdate");if(Wd(a,r,s.shape),s.dtype!==a.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${a.dtype}.`);const i={tensor:s,indices:r,updates:a};return Ea.runKernel(Kn,i,{})}});const Gd=Va({topk_:function(e,t=1,n=!0){const s=Pa(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const a={x:s},i={k:t,sorted:n},[o,l]=Ea.runKernel(Ns,a,i);return{values:o,indices:l}}});const Hd=Va({truncatedNormal_:function(e,t=0,n=1,s,r){if(ee(e),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const a=new ld(t,n,s,!0,r),i=el(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=a.nextValue();return i.toTensor()}});const jd=Va({unique_:function(e,t=0){const n=Pa(e,"x","unique","string_or_numeric");b(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},r={axis:t},[a,i]=Ea.runKernel($s,s,r);return{values:a,indices:i}}});const qd=Va({unsortedSegmentSum_:function(e,t,n){const s=Pa(e,"x","unsortedSegmentSum"),r=Pa(t,"segmentIds","unsortedSegmentSum","int32");b(N(n),(()=>"numSegments must be of dtype int"));const a={x:s,segmentIds:r},i={numSegments:n};return Ea.runKernel(As,a,i)}});function Kd(e,t){return Cp(e,t,"right")}function Xd(e,t=!0,n,s){return Ea.makeVariable(e,t,n,s)}function Yd(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=el(e,"int32"),r=el([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=s.indexToLoc(n[t]),i=t*e.length;r.values.set(a,i)}return r.toTensor()}const Zd=async function(e){const t=Pa(e,"condition","whereAsync","bool"),n=await t.data(),s=Yd(t.shape,n);return e!==t&&t.dispose(),s};var Jd={};t(Jd,"booleanMaskAsync",(()=>Qd));const Qd=async function(e,t,n){const s=Pa(e,"tensor","boolMask"),r=Pa(t,"mask","boolMask","bool"),a=null==n?0:n,i=r.rank,o=s.shape;b(i>0,(()=>"mask cannot be scalar")),x(o.slice(a,a+i),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=a;e<a+i;e++)l*=o[e];const u=o.slice(0,a).concat([l],o.slice(a+i)),c=bl(s,u),h=bl(r,[-1]),p=await Zd(h),d=Mc(p,[1]),f=dp(c,d,a);return e!==s&&s.dispose(),t!==r&&r.dispose(),d.dispose(),c.dispose(),h.dispose(),p.dispose(),f};var ef={};t(ef,"movingAverage",(()=>tf));const tf=Va({movingAverage_:function(e,t,n,s,r=!0){const a=Pa(e,"v","movingAverage"),i=Pa(t,"x","movingAverage"),o=Pa(n,"decay","movingAverage");va(a,i),b(S(a.shape,i.shape),(()=>"Shape mismatch in v and x"));const l=Cl(1),u=sc(l,o);let c=dl(sc(i,a),u);if(r){b(null!=s,(()=>"When using zeroDebias: true, step is required."));const e=Pa(s,"step","movingAverage");c=pl(c,sc(l,Rc(o,e)))}return cl(a,c)}});var nf={};t(nf,"scatterND",(()=>sf));const sf=Va({scatterND_:function(e,t,n){ee(n);const s=Pa(e,"indices","scatterND","int32"),r=Pa(t,"updates","scatterND");Wd(r,s,n);const a={indices:s,updates:r},i={shape:n};return Ea.runKernel(qn,a,i)}});var rf={};t(rf,"sparseToDense",(()=>af));const af=Va({sparseToDense_:function(e,t,n,s=0){ee(n);const r=Pa(e,"sparseIndices","sparseToDense","int32"),a=Pa(t,"sparseValues","sparseToDense","string_or_numeric"),i=Pa(s,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const r=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,a,n,i);const o={sparseIndices:r,sparseValues:a,defaultValue:i},l={outputShape:n};return Ea.runKernel(ds,o,l)}});var of={};t(of,"gatherND",(()=>lf));const lf=Va({gatherND_:function(e,t){const n=Pa(t,"indices","gatherND","int32"),s={params:Pa(e,"x","gatherND","string_or_numeric"),indices:n};return Ea.runKernel(zt,s)}});var uf={};t(uf,"dropout",(()=>cf));const cf=Va({dropout_:function(e,t,n,s){const r=Pa(e,"x","dropout");if(b("float32"===r.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`)),b(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof na?r.clone():r;const a=function(e,t){if(null==t)return e.shape.slice();if(S(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(r,n),i=1-t,o=pl(pp(cl(fd(a,0,1,"float32",s),i)),i);return dl(r,o)}});var hf={};t(hf,"inTopKAsync",(()=>pf));const pf=async function(e,t,n=1){const s=Pa(e,"predictions","inTopK"),r=Pa(t,"targets","inTopK");b(s.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`)),b(s.rank-1===r.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`)),x(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=s.shape[s.shape.length-1];b(n>0&&n<=a,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`));const i=await s.data(),o=await r.data(),[l,u]=[i.length/a,a],c=D("bool",l);for(let e=0;e<l;e++){const t=e*u,s=i.subarray(t,t+u),r=[];for(let e=0;e<s.length;e++)r.push({value:s[e],index:e});r.sort(((e,t)=>t.value-e.value)),c[e]=0;for(let t=0;t<n;t++)if(r[t].index===o[e]){c[e]=1;break}}return e!==s&&s.dispose(),t!==r&&r.dispose(),ja(c,r.shape,"bool")},df={fft:Il,ifft:Nl,rfft:Sl,irfft:$l},ff={hammingWindow:Nu,hannWindow:Tu,frame:Eu,stft:Au},mf={flipLeftRight:Fu,grayscaleToRGB:Du,resizeNearestNeighbor:Qu,resizeBilinear:Ju,rotateWithOffset:Ou,cropAndResize:Ru,nonMaxSuppression:Lu,nonMaxSuppressionAsync:qu,nonMaxSuppressionWithScore:Ku,nonMaxSuppressionWithScoreAsync:Xu,nonMaxSuppressionPadded:Yu,nonMaxSuppressionPaddedAsync:Zu,threshold:lc,transform:uc},gf={bandPart:yc,gramSchmidt:Lc,qr:Vc},yf={absoluteDifference:Xc,computeWeightedLoss:Kc,cosineDistance:Yc,hingeLoss:Zc,huberLoss:Jc,logLoss:eh,meanSquaredError:nh,sigmoidCrossEntropy:ah,softmaxCrossEntropy:oh},bf={sparseFillEmptyRows:lh,sparseReshape:uh,sparseSegmentMean:ch,sparseSegmentSum:hh},xf={stringNGrams:ph,stringSplit:dh,stringToHashBucketFast:fh,staticRegexReplace:mh};n(fl,Jd),n(fl,Pc),n(fl,bc),n(fl,ef),n(fl,nf),n(fl,rf),n(fl,of),n(fl,uf),n(fl,vu),n(fl,hf),n(fl,Np);var wf={};t(wf,"Serializable",(()=>vf)),t(wf,"SerializationMap",(()=>kf)),t(wf,"registerClass",(()=>If));class vf{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class kf{constructor(){this.classNameMap={}}static getMap(){return null==kf.instance&&(kf.instance=new kf),kf.instance}static register(e){kf.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function If(e){b(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),b("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),b(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),kf.register(e)}class Sf extends vf{minimize(e,t=!1,n){const{value:s,grads:r}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:r[e.name]})));this.applyGradients(e)}else this.applyGradients(r);return ol(r),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Al(e,t)}dispose(){null!=this.iterations_&&ol(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Cl(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Sf,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class Nf extends Sf{static get className(){return"Adadelta"}constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ea.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ea.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:il((()=>kl(s).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:il((()=>kl(s).variable(false)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;il((()=>{const e=cl(dl(a,this.rho),dl(_c(r),1-this.rho)),t=dl(pl(Fc(cl(i,this.epsilon)),Fc(cl(a,this.epsilon))),r),n=cl(dl(i,this.rho),dl(_c(t),1-this.rho));a.assign(e),i.assign(n);const o=cl(dl(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ol(this.accumulatedGrads.map((e=>e.variable))),ol(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}class Tf extends Sf{static get className(){return"Adagrad"}constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ea.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:il((()=>Cu(s.shape,this.initialAccumulatorValue).variable(e)))}}const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=this.accumulatedGrads[n].variable;il((()=>{const e=cl(a,_c(r));a.assign(e);const t=cl(dl(pl(r,Fc(cl(e,Ea.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ol(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}class Cf extends Sf{static get className(){return"Adam"}constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],il((()=>{this.accBeta1=Cl(t).variable(),this.accBeta2=Cl(n).variable()})),null==s&&(this.epsilon=Ea.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);il((()=>{const n=sc(1,this.accBeta1),s=sc(1,this.accBeta2);t.forEach(((t,r)=>{const a=Ea.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:il((()=>kl(a).variable(false)))}),null==this.accumulatedSecondMoment[r]&&(this.accumulatedSecondMoment[r]={originalName:`${t}/v`,variable:il((()=>kl(a).variable(false)))});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedSecondMoment[r].variable,u=cl(dl(o,this.beta1),dl(i,1-this.beta1)),c=cl(dl(l,this.beta2),dl(_c(i),1-this.beta2)),h=pl(u,n),p=pl(c,s);o.assign(u),l.assign(c);const d=cl(dl(pl(h,cl(Fc(p),this.epsilon)),-this.learningRate),a);a.assign(d)})),this.accBeta1.assign(dl(this.accBeta1,this.beta1)),this.accBeta2.assign(dl(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ol(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&ol(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),il((()=>{this.accBeta1.assign(Rc(this.beta1,this.iterations_+1)),this.accBeta2.assign(Rc(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}class $f extends Sf{static get className(){return"Adamax"}constructor(e,t,n,s=null,r=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=r,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],il((()=>{this.iteration=Cl(0).variable(),this.accBeta1=Cl(t).variable()})),null==s&&(this.epsilon=Ea.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);il((()=>{const n=sc(1,this.accBeta1),s=pl(-this.learningRate,cl(dl(this.iteration,this.decay),1));t.forEach(((t,r)=>{const a=Ea.registeredVariables[t];null==this.accumulatedFirstMoment[r]&&(this.accumulatedFirstMoment[r]={originalName:`${t}/m`,variable:kl(a).variable(false)}),null==this.accumulatedWeightedInfNorm[r]&&(this.accumulatedWeightedInfNorm[r]={originalName:`${t}/v`,variable:kl(a).variable(false)});const i=Array.isArray(e)?e[r].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[r].variable,l=this.accumulatedWeightedInfNorm[r].variable,u=cl(dl(o,this.beta1),dl(i,1-this.beta1)),c=dl(l,this.beta2),h=xc(i),p=Fp(c,h);o.assign(u),l.assign(p);const d=cl(dl(pl(s,n),pl(u,cl(p,this.epsilon))),a);a.assign(d)})),this.iteration.assign(cl(this.iteration,1)),this.accBeta1.assign(dl(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ol(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&ol(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}class Ef extends Sf{static get className(){return"SGD"}constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const r=Ea.registeredVariables[t];il((()=>{const e=cl(dl(this.c,s),r);r.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ll(Cl(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}class Af extends Ef{static get className(){return"Momentum"}constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Cl(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ea.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:il((()=>kl(s).variable(e)))}}const r=this.accumulations[n].variable,a=Array.isArray(e)?e[n].tensor:e[t];null!=a&&il((()=>{let e;const t=cl(dl(this.m,r),a);e=this.useNesterov?cl(dl(this.c,cl(a,dl(t,this.m))),s):cl(dl(this.c,t),s),r.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ol(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}class Rf extends Sf{static get className(){return"RMSProp"}constructor(e,t=.9,n=0,s=null,r=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=r,null==s&&(this.epsilon=Ea.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ea.registeredVariables[t],r=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:il((()=>kl(s).variable(r)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:il((()=>kl(s).variable(r)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:il((()=>kl(s).variable(r)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;il((()=>{const e=cl(dl(i,this.decay),dl(_c(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,r=cl(dl(t,this.decay),dl(a,1-this.decay)),l=pl(dl(a,this.learningRate),Fc(sc(e,cl(_c(r),this.epsilon)))),u=cl(dl(o,this.momentum),l);i.assign(e),t.assign(r),o.assign(u);const c=sc(s,u);s.assign(c)}else{const e=cl(dl(i,this.decay),dl(_c(a),1-this.decay)),t=cl(dl(o,this.momentum),pl(dl(a,this.learningRate),Fc(cl(e,this.epsilon))));i.assign(e),o.assign(t);const n=sc(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ol(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ol(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&ol(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}const Ff=[Nf,Tf,Cf,$f,Af,Rf,Ef];var _f={};t(_f,"copyModel",(()=>Xo)),t(_f,"listModels",(()=>qo)),t(_f,"moveModel",(()=>Yo)),t(_f,"removeModel",(()=>Ko)),t(_f,"browserFiles",(()=>Lf)),t(_f,"browserHTTPRequest",(()=>qf)),t(_f,"concatenateArrayBuffers",(()=>lo)),t(_f,"decodeWeights",(()=>ro)),t(_f,"encodeWeights",(()=>so)),t(_f,"fromMemory",(()=>Zf)),t(_f,"fromMemorySync",(()=>Jf)),t(_f,"getLoadHandlers",(()=>vo)),t(_f,"getModelArtifactsForJSON",(()=>po)),t(_f,"getModelArtifactsForJSONSync",(()=>ho)),t(_f,"getModelArtifactsInfoForJSON",(()=>fo)),t(_f,"getSaveHandlers",(()=>wo)),t(_f,"getWeightSpecs",(()=>mo)),t(_f,"http",(()=>jf)),t(_f,"isHTTPScheme",(()=>Gf)),t(_f,"loadWeights",(()=>Wf)),t(_f,"registerLoadRouter",(()=>xo)),t(_f,"registerSaveRouter",(()=>bo)),t(_f,"weightsLoaderFactory",(()=>Uf)),t(_f,"withSaveHandler",(()=>Qf)),t(_f,"withSaveHandlerSync",(()=>em));function Df(e){return new Promise((e=>setTimeout(e))).then(e)}class Of{constructor(e){if(!oe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(Of.URL_SCHEME)&&(e=e.slice(Of.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=co(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),r=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(r.download=this.modelJsonFileName,r.href=s,await Df((()=>r.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Df((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:fo(e)}}}}Of.URL_SCHEME="downloads://";class Mf{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const s=JSON.parse(n.target.result),r=s.modelTopology;if(null==r)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==s.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:r});const a=po(s,(e=>this.loadWeights(e)));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const s=this.checkManifestAndWeightFiles(e),r=n.map((e=>this.loadWeightsFile(e,s[e])));return Promise.all(r).then((e=>[t,lo(e)]))}loadWeightsFile(e,t){return new Promise(((n,s)=>{const r=new FileReader;r.onload=e=>{const t=e.target.result;n(t)},r.onerror=t=>s(`Failed to weights data from file of path '${e}'.`),r.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>uo(e.name))),s={};for(const r of e)r.paths.forEach((e=>{const r=uo(e);if(-1!==t.indexOf(r))throw new Error(`Duplicate file basename found in weights manifest: '${r}'`);if(t.push(r),-1===n.indexOf(r))throw new Error(`Weight file with basename '${r}' is not provided.`);s[e]=this.weightsFiles[n.indexOf(r)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return s}}function Lf(e){return new Mf(e)}yo.registerSaveRouter((e=>oe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Of.URL_SCHEME)?function(e="model"){return new Of(e)}(e.slice(Of.URL_SCHEME.length)):null));class zf{constructor(e){if(this.shards=[],this.previousShardIndex=0,e instanceof Array||(e=[e]),0===(e=e.map((e=>Ur(e)?e.buffer:e))).length)return;this.bufferUniformSize=e[0].byteLength;let t=0;for(let n=0;n<e.length;n++){const s=e[n];n!==e.length-1&&s.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const r=t+s.byteLength;this.shards.push({buffer:s,start:t,end:r}),t=r}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(e=0,t=this.byteLength){if(e=isNaN(Number(e))?0:e,t=isNaN(Number(t))?0:t,e=Math.max(0,e),(t=Math.min(this.byteLength,t))<=e)return new ArrayBuffer(0);const n=this.findShardForByte(e);if(-1===n)throw new Error(`Could not find start shard for byte ${e}`);const s=new ArrayBuffer(t-e),r=new Uint8Array(s);let a=0;for(let s=n;s<this.shards.length;s++){const n=this.shards[s],i=e+a-n.start,o=a,l=Math.min(t,n.end)-n.start,u=new Uint8Array(n.buffer.slice(i,l));if(r.set(u,o),a+=u.length,t<n.end)break}return s}findShardForByte(e){if(0===this.shards.length||e<0||e>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(e/this.bufferUniformSize),this.previousShardIndex;function t(t){return e<t.start?-1:e>=t.end?1:0}if(0===t(this.shards[this.previousShardIndex]))return this.previousShardIndex;const n=function(e,t){let n=0,s=e.length;for(;n<=s;){const r=Math.floor((s-n)/2)+n,a=t(e[r]);if(0===a)return r;a<0?s=r:n=r+1}return-1}(this.shards,t);return-1===n?-1:(this.previousShardIndex=n,this.previousShardIndex)}}function Bf(e,t,n,s){var r,a,i;b(null!=(r=e)&&Array.isArray(r)&&r.length>0,(()=>"promises must be a none empty array")),i=s=null==s?1:s,b((a=n=null==n?0:n)>=0&&a<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`)),b(i>=0&&i<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${i}`)),b(i>=a,(()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${i}`));let o=0;return Promise.all(e.map((r=>(r.then((r=>{const a=n+ ++o/e.length*(s-n);return t(a),r})),r))))}async function Pf(e,t){null==t&&(t={});const n=null==t.fetchFunc?oe().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),r=(null==t.onProgress?await Promise.all(s):await Bf(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(r):await Bf(r,t.onProgress,.5,1)}async function Wf(e,t="",n,s){return Uf((e=>Pf(e,{requestInit:s})))(e,t,n)}function Uf(e){return async(t,n="",s)=>{const r=t.map((()=>!1)),a={},i=null!=s?s.map((()=>!1)):[],o=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const l="quantization"in e?e.quantization.dtype:e.dtype,u=qa[l]*v(e.shape),c=()=>{r[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=s?s.forEach(((t,n)=>{t===e.name&&(c(),i[n]=!0)})):c(),o.push(e.name),n+=u}))})),!i.every((e=>e))){const e=s.filter(((e,t)=>!i[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${o.join(", ")}.`)}const l=r.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),u=[];l.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;u.push(t)}))}));const c=await e(u),h={};let p=0;return l.forEach((e=>{const n=t[e].paths.length,s=new zf(c.slice(p,p+n));a[e].forEach((e=>{const t=ro(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)h[e]=t[e]})),p+=n})),h}}class Vf{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(b("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=oe().platform.fetch,b(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&b(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=co(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:fo(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return po(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),s=e.substring(0,t),r=n>t?e.substring(n):"";return[s+"/",r]}(t),r=this.weightPathPrefix||n,a=mo(e),i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(r+e+s);this.weightUrlConverter&&i.push(...await Promise.all(o));return[a,lo(await Pf(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Gf(e){return null!=e.match(Vf.URL_SCHEME_REGEX)}Vf.URL_SCHEME_REGEX=/^https?:\/\//;const Hf=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Gf(e))):Gf(e),n)return jf(e,t)}return null};function jf(e,t){return new Vf(e,t)}function qf(e,t){return jf(e,t)}
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */yo.registerSaveRouter(Hf),yo.registerLoadRouter(Hf);class Kf{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Xf{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Yf{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Zf(e,t,n,s){const r=arguments;return new Yf(Jf(...r))}function Jf(e,t,n,s){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Kf(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Kf({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Kf({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:s})}function Qf(e){return new Xf(e)}function em(e){return new Xf(e)}var tm={};let nm;function sm(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,r=!1,a=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)r=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)a=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(null!=Vs(_s,Ea.backendName)){const n={pixels:e},s={numChannels:t};return Ea.runKernel(_s,n,s)}const[l,u]=r?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(a||r||o){if(null==nm)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");nm=new OffscreenCanvas(1,1).getContext("2d")}else nm=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});nm.canvas.width=l,nm.canvas.height=u,nm.drawImage(e,0,0,l,u),c=nm.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return Od(h,[u,l,t],"int32")}function rm(e){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function am(e,t=3){let n=null;if(oe().getBool("WRAP_TO_IMAGEBITMAP")&&rm(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return sm(n,t)}async function im(e,t){let n=Pa(e,"img","toPixels");if(!(e instanceof na)){const e=n;n=tl(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[s,r]=n.shape.slice(0,2),a=2===n.rank?1:n.shape[2];if(a>4||2===a)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${a}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let e=0;e<s*r;++e){const t=[0,0,0,255];for(let s=0;s<a;s++){const r=i[e*a+s];if("float32"===n.dtype){if(r<0||r>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${r}.`)}else if("int32"===n.dtype&&(r<0||r>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${r}.`);1===a?(t[0]=r*o,t[1]=r*o,t[2]=r*o):t[s]=r*o}const s=4*e;l[s+0]=Math.round(t[0]),l[s+1]=Math.round(t[1]),l[s+2]=Math.round(t[2]),l[s+3]=Math.round(t[3])}if(null!=t){t.width=r,t.height=s;const e=t.getContext("2d"),n=new ImageData(l,r,s);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}t(tm,"fromPixelsAsync",(()=>am)),t(tm,"toPixels",(()=>im)),t(tm,"fromPixels",(()=>om));const om=Va({fromPixels_:sm});var lm={};t(lm,"assertParamsValid",(()=>um)),t(lm,"maskToAxes",(()=>cm)),t(lm,"computeOutShape",(()=>hm)),t(lm,"stridesWithElidedDims",(()=>pm)),t(lm,"getNormalizedAxes",(()=>mm)),t(lm,"startIndicesWithElidedDims",(()=>gm)),t(lm,"stopIndicesWithElidedDims",(()=>ym)),t(lm,"startForAxis",(()=>xm)),t(lm,"stopForAxis",(()=>wm)),t(lm,"stridesForAxis",(()=>bm)),t(lm,"isSliceContinous",(()=>vm)),t(lm,"computeFlatOffset",(()=>km)),t(lm,"parseSliceParams",(()=>Im)),t(lm,"sliceInfo",(()=>Sm));function um(e,t,n){const s=e.shape.length;b(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),b(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let r=0;r<s;++r)b(t[r]+n[r]<=e.shape[r],(()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+n[r]}) would overflow input.shape[${r}] (${e.shape[r]})`))}function cm(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function hm(e,t,n){const s=[];for(let r=0;r<e.length;r++)s[r]=Math.ceil((t[r]-e[r])/n[r]);return s}function pm(e,t,n,s){const r=[...e];for(let e=r.length;e<s.length;e++)r.push(1);for(let e=0;e<n;e++)0===e?r[t]=1:(r.splice(t,0,1),r.pop());return r}function dm(e,t,n){return n<=e?n:n-(t-1)}function fm(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function mm(e,t,n,s,r,a,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=gm(i,l,u,s,e),h=ym(o,l,u,r,e),p=pm(a,l,u,e)}else for(let t=0;t<u;t++)c[t]=xm(i,s,a,e,t,l),h[t]=wm(o,r,a,e,t,l),p[t]=bm(a,t,l);return{begin:c,end:h,strides:p}}function gm(e,t,n,s,r){const a=[...r],i=fm(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=0;else{const i=dm(t,n,r);let o=s[i];e&1<<i&&(o=0),a[r]=o}return a}function ym(e,t,n,s,r){const a=[...r],i=fm(n,t);for(let r=0;r<a.length;r++)if(i.indexOf(r)>-1)a[r]=Number.MAX_SAFE_INTEGER;else{const i=dm(t,n,r);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),a[r]=o}for(let e=0;e<a.length;e++){const t=r[e];a[e]<0&&(a[e]+=t),a[e]=p(0,a[e],r[e])}return a}function bm(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function xm(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=p(0,i,l-1),i}function wm(e,t,n,s,r,a){let i=t[r];const o=n[r]||1;(e&1<<r||a&1<<r||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return i<0&&(i+=l),i=o>0?p(0,i,l):p(-1,i,l-1),i}function vm(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let r=s+1;r<n.length;r++)if(t[r]>0||n[r]!==e[r])return!1;return!0}function km(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function Im(e,t,n){let s;const r=e.shape.length;let a;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach((e=>{b(-1!==e,(()=>"slice() does not support negative begin indexing."))})),a=null==n?new Array(r).fill(-1):"number"==typeof n?[n,...new Array(r-1).fill(-1)]:n.length<r?n.concat(new Array(r-n.length).fill(-1)):n,a=a.map(((t,n)=>t>=0?t:(b(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,a]}function Sm(e,t,n,s,r,a,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:r,endMask:a,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const r=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<r;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const r=[p.beginMask&1<<t,p.endMask&1<<t],a=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=Nm(p.begin[t],0,p.strides[t],s,r,a),p.end[t]=Nm(p.end[t],1,p.strides[t],s,r,a);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function Nm(e,t,n,s,r,a){if(r[t])return n>0?a[t]:a[t+1&1];{const t=e<0?s+e:e;return t<a[0]?a[0]:t>a[1]?a[1]:t}}
/** @license See the LICENSE file. */var Tm={};t(Tm,"fromUint8ToStringArray",(()=>Gg)),t(Tm,"fromStringArrayToUint8",(()=>Hg)),t(Tm,"slice_util",(()=>lm)),t(Tm,"upcastType",(()=>ga)),t(Tm,"segment_util",(()=>Cm));var Cm={};t(Cm,"segOpComputeOptimalWindowSize",(()=>Rm)),t(Cm,"computeOutShape",(()=>Fm)),t(Cm,"collectGatherOpShapeInfo",(()=>_m));var $m={};t($m,"PARALLELIZE_THRESHOLD",(()=>Em)),t($m,"computeOptimalWindowSize",(()=>Am));const Em=30;function Am(e){return e<=Em?e:j(e,Math.floor(Math.sqrt(e)))}function Rm(e,t){let n,s=!1;for(e<=Em?(n=e,s=!0):n=j(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=j(e,n+1);return n}function Fm(e,t,n){const s=[],r=e.length;for(let a=0;a<r;a++)a!==t?s.push(e[a]):s.push(n);return s}function _m(e,t,n,s){const r=t.shape.length,a=e.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>a)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${a}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<r;e++)o.push(t.shape[e]);for(let t=n+1;t<a;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}var Dm={};function Om(e,t){const n=e[0].length;e.forEach(((e,t)=>{b(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),b(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,r)=>{for(let a=0;a<n;a++)b(a===t||e[a]===s[a],(()=>`Error in concat${n}D: Shape of tensors[${r}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${r}.`))}))}function Mm(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}t(Dm,"assertParamsConsistent",(()=>Om)),t(Dm,"computeOutShape",(()=>Mm));var Lm,zm={};function Bm(e,t,n){let s=new Array;if(null==n&&null==t)return s;if(null==t)for(;s.length<e+n.length;)s.push(-1);else s=t.slice();if(null==n)return s;if(e+n.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${s.length}`);for(let r=1;r<n.length;++r){const a=n[r],i=s[s.length-n.length+r],o=s[i];if(a>=0)if(o>=0){if(o!==a)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+e}] = ${a} but shape[${r+e}] = ${o}`)}else s[i]=a}return s}function Pm(e){const t={FIRST_DIM_SIZE:Lm.FIRST_DIM_SIZE,VALUE_ROWIDS:Lm.VALUE_ROWIDS,ROW_LENGTHS:Lm.ROW_LENGTHS,ROW_SPLITS:Lm.ROW_SPLITS,ROW_LIMITS:Lm.ROW_LIMITS,ROW_STARTS:Lm.ROW_STARTS},n=[];for(const s of e){if(!(s in t))break;n.push(t[s])}return n}function Wm(e){return 0===e.length?0:e[0]===Lm.FIRST_DIM_SIZE?e.length-1:e.length}function Um(e,t){if(null==e||null==t)return;const n=e.length,s=t.length;if(n>=s)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(n,s-1);++r){const n=e[r],s=t[r+1];if(n>=0&&s>=0&&1!==n&&n!==s)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-e.length}] = ${n} but ragged tensor input.flatValues.shape[${r-e.length}] = ${s}`)}}t(zm,"RowPartitionType",(()=>Lm)),t(zm,"combineRaggedTensorToTensorShapes",(()=>Bm)),t(zm,"getRowPartitionTypesHelper",(()=>Pm)),t(zm,"getRaggedRank",(()=>Wm)),t(zm,"validateDefaultValueShape",(()=>Um)),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(Lm||(Lm={}));var Vm={};function Gm(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}t(Vm,"getImageCenter",(()=>Gm));var Hm={};function jm(e,t,n,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(e[0]/n),r=r.concat(e.slice(1));else{r=r.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)r=r.concat([e[s+1]/t[s],t[s]]);r=r.concat(e.slice(n+1))}return r}function qm(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],r=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?r.push(s):n.push(s);s.push(...n),s.push(0),s.push(...r)}return s}function Km(e,t,n,s=!0){const r=[];s?r.push(e[0]/n):r.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?r.push(t[n-1]*e[n]):r.push(e[n]/t[n-1]):r.push(e[n]);return r}function Xm(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function Ym(e,t,n){const s=e.slice(0,1);for(let r=0;r<n;++r)s.push(e[r+1]-t[r][0]-t[r][1]);return s}t(Hm,"getReshaped",(()=>jm)),t(Hm,"getPermuted",(()=>qm)),t(Hm,"getReshapedPermuted",(()=>Km)),t(Hm,"getSliceBeginCoords",(()=>Xm)),t(Hm,"getSliceSize",(()=>Ym));var Zm={};function Jm(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===v(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const r=t.shape,a=r[r.length-1];let i=1;for(let e=0;e<r.length-1;++e)i*=r[e];const o=e.shape,l=r.slice();l.pop();let u=1;for(let e=a;e<n;++e)u*=o[e],l.push(o[e]);const c=[...q(e.shape).map((e=>e/u)),1].slice(0,a);return[l,i,u,c]}t(Zm,"prepareAndValidate",(()=>Jm));var Qm={};t(Qm,"SELU_SCALEALPHA",(()=>eg)),t(Qm,"SELU_SCALE",(()=>tg));const eg=1.7580993408473768,tg=1.0507009873554805;var ng={};t(ng,"ERF_P",(()=>sg)),t(ng,"ERF_A1",(()=>rg)),t(ng,"ERF_A2",(()=>ag)),t(ng,"ERF_A3",(()=>ig)),t(ng,"ERF_A4",(()=>og)),t(ng,"ERF_A5",(()=>lg));const sg=.3275911,rg=.254829592,ag=-.284496736,ig=1.421413741,og=-1.453152027,lg=1.061405429;var ug={};function cg(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function hg(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function pg(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function dg(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function fg(e,t){return{real:e[2*t],imag:e[2*t+1]}}function mg(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function gg(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let r=0;r<Math.ceil(e/2);r++){const a=(t?2:-2)*Math.PI*(r/e);n[r]=Math.cos(a),s[r]=Math.sin(a)}return{real:n,imag:s}}function yg(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}t(ug,"mergeRealAndImagArrays",(()=>cg)),t(ug,"splitRealAndImagArrays",(()=>hg)),t(ug,"complexWithEvenIndex",(()=>pg)),t(ug,"complexWithOddIndex",(()=>dg)),t(ug,"getComplexWithIndex",(()=>fg)),t(ug,"assignToTypedArray",(()=>mg)),t(ug,"exponents",(()=>gg)),t(ug,"exponent",(()=>yg));var bg={};t(bg,"decodeEinsumEquation",(()=>vg)),t(bg,"getEinsumPermutation",(()=>kg)),t(bg,"checkEinsumDimSizes",(()=>Ig)),t(bg,"getEinsumComputePath",(()=>Sg)),t(bg,"isIdentityPermutation",(()=>Ng));const xg="->",wg=/->/g;function vg(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(wg,"").length)/xg.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,r]=e.split(xg);b(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const a=s.split(","),i=a.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<r.length;++e){const t=r[e];if(!a.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(a.length);for(let e=0;e<i;++e){if(new Set(a[e].split("")).size!==a[e].length)throw new Error(`Found duplicate axes in input component ${a[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<a[e].length;++t)l[e].push(o.indexOf(a[e][t]))}const u=o.length,c=[];for(let e=r.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function kg(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Ig(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const r=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=r[n]:b(s[t[e][n]]===r[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(r)}, but got dimension ${r[n]}`))}}function Sg(e,t){const n=e,s=[];let r=0;0===e.length&&n.push(-1),r=e.length+1;for(let e=0;e<r;++e)s.push([]);const a=[];for(let e=0;e<n.length;++e){const r=Tg(t,n[e]);for(const t of r)-1===a.indexOf(t)&&(s[e].push(t),a.push(t))}return{path:n,steps:s}}function Ng(e){return e.every(((e,t)=>e===t))}function Tg(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}var Cg={};function $g(e,t,n=0){let s=[];if("number"==typeof t)b(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{b(t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0)<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}b(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}t(Cg,"prepareSplitSize",(()=>$g));var Eg={};function Ag(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Rg(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Fg(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}t(Eg,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(()=>Ag)),t(Eg,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(()=>Rg)),t(Eg,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(()=>Fg));var _g={};function Dg(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Og(e,t){return`size ${e} must be non-negative, not ${t}`}function Mg(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Lg(e,t){return`Input to reshape is a SparseTensor with ${v(e)}\n  dense values, but the requested shape requires a multiple of ${v(t)}. inputShape=${e} outputShape= ${t}`}function zg(e,t){return`Input to reshape is a tensor with ${v(e)} dense values, but the requested shape has ${v(t)}. inputShape=${e} outputShape=${t}`}t(_g,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(()=>Dg)),t(_g,"getSparseReshapeNegativeOutputDimErrorMessage",(()=>Og)),t(_g,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(()=>Mg)),t(_g,"getSparseReshapeInputOutputMultipleErrorMessage",(()=>Lg)),t(_g,"getSparseReshapeInputOutputMismatchErrorMessage",(()=>zg));var Bg={};function Pg(){return"segment ids must be >= 0"}function Wg(){return"segment ids are not increasing"}function Ug(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Vg(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Gg(e){try{return e.map((e=>Wr(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Hg(e){return e.map((e=>Pr(e)))}t(Bg,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(()=>Pg)),t(Bg,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(()=>Wg)),t(Bg,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(()=>Ug)),t(Bg,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(()=>Vg)),n(Tm,wc),n(Tm,Fl),n(Tm,Dm),n(Tm,Ml),n(Tm,tu),n(Tm,$m),n(Tm,Vm),n(Tm,Hm),n(Tm,Zm),n(Tm,Bd),n(Tm,Qm),n(Tm,ng),n(Tm,zs),n(Tm,ug),n(Tm,bg),n(Tm,Cg),n(Tm,Eg),n(Tm,_g),n(Tm,Bg),n(Tm,{}),n(Tm,zm);var jg={};t(jg,"nonMaxSuppressionV3Impl",(()=>Pu)),t(jg,"nonMaxSuppressionV4Impl",(()=>Wu)),t(jg,"nonMaxSuppressionV5Impl",(()=>Uu)),t(jg,"whereImpl",(()=>Yd));const qg=class{static sgd(e){return new Ef(e)}static momentum(e,t,n=!1){return new Af(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,r=!1){return new Rf(e,t,n,s,r)}static adam(e=.001,t=.9,n=.999,s=null){return new Cf(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Nf(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,r=0){return new $f(e,t,n,s,r)}static adagrad(e,t=.1){return new Tf(e,t)}},Kg="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();
/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */function Xg(){return new Promise((e=>Kg((()=>e()))))}!function(){for(const e of Ff)If(e)}();const Yg={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,lu(tl(n,"float32"),-1))}}},Zg={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=_c(tl(n,"float32")),s=Fc(sc(Cl(1),t));return fc(pl(e,s))}}}},Jg={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Fc(sc(_c(tl(n,"float32")),1));return pl(e,t)}}}},Qg={kernelName:Ae,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{let t=e;const s=Dl(n.shape,r);return s.length>0&&(t=uu(t,s)),bl(t,n.shape)},b:()=>{let t=e;const n=Dl(s.shape,r);return n.length>0&&(t=uu(t,n)),bl(t,s.shape)}}}},ey={kernelName:Re,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},ty={kernelName:De,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>kl(n)}}},ny={kernelName:Oe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>kl(n)}}},sy={kernelName:Me,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,Fc(sc(Cl(1),_c(tl(n,"float32")))))}}},ry={kernelName:Le,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=Fc(cl(Cl(1),_c(tl(n,"float32"))));return pl(e,t)}}}},ay={kernelName:Pe,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{const t=cl(_c(n),_c(s));let a=dl(e,pl(s,t));const i=Dl(n.shape,r);return i.length>0&&(a=uu(a,i)),bl(a,n.shape)},b:()=>{const t=cl(_c(n),_c(s));let a=fc(dl(e,pl(n,t)));const i=Dl(s.shape,r);return i.length>0&&(a=uu(a,i)),bl(a,s.shape)}}}},iy={kernelName:ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,cl(_c(tl(n,"float32")),1))}}},oy={kernelName:Be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,sc(Cl(1),_c(tl(n,"float32"))))}}};const ly=Va({avgPool3dGrad_:function(e,t,n,s,r,a){const i=Pa(e,"dy","avgPool3dGrad"),o=Pa(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=bl(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=bl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),b(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),b(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Zl("avgPool3dGrad",r,a);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:r,dimRoundingMode:a},d=Ea.runKernel(Ge,h,p);return c?bl(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),uy={kernelName:Ve,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i,dimRoundingMode:o}=n;return{x:()=>ly(e,s,r,a,i,o)}}};const cy=Va({avgPoolGrad_:function(e,t,n,s,r){const a=Pa(e,"dy","avgPoolGrad"),i=Pa(t,"input","avgPoolGrad");b(i.rank===a.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${a.rank})`));let o=i,l=a,u=!1;3===i.rank&&(u=!0,o=bl(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=bl(a,[1,a.shape[0],a.shape[1],a.shape[2]])),b(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),b(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:r},p=Ea.runKernel(Ue,c,h);return u?bl(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),hy={kernelName:We,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:r,strides:a,pad:i}=n;return{x:()=>cy(e,s,r,a,i)}}},py={kernelName:He,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,r]=t,{transposeA:a,transposeB:i}=n;return a||i?!a&&i?{a:()=>xu(e,r,!1,!1),b:()=>xu(e,s,!0,!1)}:a&&!i?{a:()=>xu(r,e,!1,!0),b:()=>xu(s,e,!1,!1)}:{a:()=>xu(r,e,!0,!0),b:()=>xu(e,s,!0,!0)}:{a:()=>xu(e,r,!1,!0),b:()=>xu(s,e,!0,!1)}}},dy={kernelName:je,gradFunc:(e,t,n)=>{const{blockShape:s,crops:r}=n;return{x:()=>qp(e,s,r)}}},fy={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,r=s.inputShape,a=s.shape,i=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])i[e]=1;else if(1!==r[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>uu(e,o,!0)}}},my={kernelName:Ye,gradFunc:e=>({x:()=>e.clone()})},gy={kernelName:Ze,gradFunc:e=>({x:()=>kl(e)})},yy={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:r,clipValueMax:a}=n;return{x:()=>ic(pc(cc(s,r),tc(s,a)),e,kl(e))}}},by={kernelName:et,inputsToSave:["x"],gradFunc:Yg.gradFunc},xy={kernelName:tt,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:r}=n,a=F(r,t[0].shape)[0],i=s.map((e=>e[a]));return wl(e,i,a).map((e=>()=>e))}},wy={kernelName:nt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{dilations:a,strides:i,pad:o,dataFormat:l}=n;return b(ql(a),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`)),{x:()=>eu(s.shape,e,r,i,o,l),filter:()=>Ql(s,e,r.shape,i,o,l)}}},vy={kernelName:rt,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,{strides:a,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Jl(e,r,a,i,o,1,l),filter:()=>Ql(e,s,r.shape,a,i,o,l)}}};const ky=Va({conv3DBackpropFilter_:function(e,t,n,s,r){let a=e;4===e.rank&&(a=bl(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=bl(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),b(5===a.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${a.shape}.`)),b(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),b(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),b(a.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${a.shape[4]}) must match input depth in filter (${n[3]}.`)),b(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:a,dy:i},l={strides:s,pad:r,filterShape:n};return Ea.runKernel(it,o,l)}}),Iy={kernelName:at,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a}=n;b(ql(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Kh(i.shape,e,o,r,a),filter:()=>ky(i,e,o.shape,r,a)}}},Sy={kernelName:lt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(fc(Td(tl(n,"float32"))),e)}}},Ny={kernelName:ut,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(Cd(tl(n,"float32")),e)}}},Ty={kernelName:ht,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r,exclusive:a,reverse:i}=n;return{x:()=>{const t=Tc([r],s.rank);let n=Qh(e,r,a,!i);return null!=t&&(n=Wc(n,t)),n}}}},Cy={kernelName:mt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:r,pad:a,dimRoundingMode:i}=n,o=null==s?[1,1]:s;b(ql(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return b(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),b(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),b(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),b(Kl(r,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${o}'.`)),Zl("depthwiseConv2d",a,i),{x:()=>yu(l.shape,e,u,r,a,o,i),filter:()=>gu(l,e,u.shape,r,a,o,i)}}},$y={kernelName:xt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,r]=t,a={x:s,filter:r,dy:e},i={x:s,filter:r,dy:e};return{x:()=>Ea.runKernel(wt,a,n),filter:()=>Ea.runKernel(vt,i,n)}}},Ey={kernelName:St,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Ea.runKernel(Nt,s)}}},Ay={kernelName:Tt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=dl(sh(fc(_c(n))),2/Math.sqrt(Math.PI));return{x:()=>dl(e,s)}}},Ry={kernelName:$t,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,n)}}},Fy={kernelName:Et,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>bl(e,n.shape)}}},_y={kernelName:At,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,sh(n))}}},Dy={kernelName:Dt,gradFunc:e=>({x:()=>kl(e)})},Oy={kernelName:Ot,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{const t=pl(e,tl(s,"float32")),a=Dl(n.shape,r);return a.length>0?bl(uu(t,a),n.shape):t},b:()=>{let t=dl(e,tl(n,"float32"));const a=Dl(s.shape,r);a.length>0&&(t=bl(uu(t,a),s.shape));const i=_c(s);return fc(pl(t,tl(i,"float32")))}}}},My={kernelName:Mt,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[r,a,i,o]=t,l=null==o?Cl(1):o,u=Dl(a.shape,r.shape),c=[];if(1===a.rank){for(let e=0;e<r.shape.length-1;++e)c.push(r.shape[e]);c.push(1)}const h=sc(r,a),p=dl(e,l),d=vd(cl(i,Cl(s))),f=dl(dl(dl(d,d),d),Cl(-.5));return{x:()=>1===a.rank?bl(dl(dl(e,_u(bl(d,[1,1,1,a.shape[0]]),c)),l),r.shape):bl(dl(dl(e,d),l),r.shape),mean:()=>{let e=dl(dl(d,Cl(-1)),p);return 1===a.rank&&(e=uu(e,u)),bl(e,a.shape)},variance:()=>{let e=dl(dl(f,h),p);return 1===a.rank&&(e=uu(e,u)),bl(e,a.shape)},scale:()=>{const t=dl(h,d);let n=dl(e,t);return 1===a.rank&&(n=uu(n,u)),bl(n,a.shape)},offset:()=>{let t=e;return 1===a.rank&&(t=uu(t,u)),bl(t,a.shape)}}}},Ly={kernelName:Lt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,r]=t,{axis:a}=n,i=F(a,s.shape)[0];return{x:()=>{const t=s.shape,n=r.size,o=t.slice(0,i),l=o.length,u=t.slice(a,t.length).slice(1),c=u.length,h=zy(0,l),p=zy(l+1,l+1+c),d=By([o,[n],u]),f=bl(e,d),m=bl(r,[n]),g=By([[l],h,p]),y=Wc(f,g);let b=qd(y,m,s.shape[i]);const x=Cc(g);return b=Wc(b,x),b},indices:()=>r}}};function zy(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function By(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Py={kernelName:Pt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>kl(n),b:()=>kl(s)}}},Wy={kernelName:Wt,gradFunc:e=>({x:()=>tl(e,"float32")})},Uy={kernelName:Gt,gradFunc:e=>({x:()=>kl(e)})},Vy={kernelName:Ht,gradFunc:e=>({x:()=>kl(e)})},Gy={kernelName:jt,gradFunc:e=>({x:()=>kl(e)})},Hy={kernelName:qt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:r}=n,a=nc(s,0);return{x:()=>ic(a,e,dl(e,r))}}},jy={kernelName:Jt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,cl(n,1))}}},qy={kernelName:Zt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,tl(n,"float32"))}}},Ky={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;return{logits:()=>{const t=sh(s);return sc(e,dl(uu(e,r,!0),t))}}}};const Xy=Va({localResponseNormalizationBackprop_:function(e,t,n,s=5,r=1,a=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:r,alpha:a,beta:i};return Ea.runKernel(sn,o,l)}}),Yy={kernelName:nn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{depthRadius:a,bias:i,alpha:o,beta:l}=n;return{x:()=>Xy(s,r,e,a,i,o,l)}}};function Zy(e,t,n,s){return t.rank<n.rank&&(t=bl(t,Sc(t.shape,s))),e.rank<n.rank&&(e=bl(e,Sc(e.shape,s))),{x:()=>dl(e,tl(rp(n,t),e.dtype))}}const Jy={kernelName:rn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:r}=s,a=t[0],i=Zy(e,t[1],a,F(r,a.shape));return{x:()=>i.x()}}},Qy={kernelName:an,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>dl(e,tl(cc(n,s),"float32")),b:()=>dl(e,tl(hc(n,s),"float32"))}}};const eb=Va({maxPool3dGrad_:function(e,t,n,s,r,a,i){const o=Pa(e,"dy","maxPool3dGrad"),l=Pa(t,"input","maxPool3dGrad"),u=Pa(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=bl(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=bl(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=bl(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),b(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),b(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),b(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),Zl("maxPool3dGrad",a,i);const f={dy:c,input:h,output:p},m={filterSize:s,strides:r,pad:a,dimRoundingMode:i},g=Ea.runKernel(cn,f,m);return d?bl(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),tb={kernelName:un,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>eb(e,s,r,a,i,o,l)}}};const nb=Va({maxPoolGrad_:function(e,t,n,s,r,a,i){const o=Pa(e,"dy","maxPoolGrad"),l=Pa(t,"input","maxPoolGrad"),u=Pa(n,"output","maxPoolGrad");b(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),b(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),b(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Zl("maxPoolGrad",a,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:r,pad:a,dimRoundingMode:i};return Ea.runKernel(ln,c,h)}}),sb={kernelName:Cn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xl(e,a,s.shape)}}};function rb(e,t,n){const s=e.shape.length,r=s-n.length,a=Tm.getAxesPermutation(n,s);let i=e;null!=a&&(i=Wc(e,a));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const r=bl(t,s),a=Jh(e,n,!0,!1),i=Jh(e,n,!0,!0),o=dl(a,i);return dl(r,o)}(i.reshape(o),t,r);if(u=u.reshape(i.shape),null!=a){const e=Tm.getUndoAxesPermutation(a);u=Wc(u,e)}return u}const ab={kernelName:is,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:r}=n;return{x:()=>Fh(e,s,r)}}},ib={kernelName:os,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>ml(e,s)}}};const ob=[Yg,Zg,Jg,Qg,ey,ty,ny,sy,ry,ay,iy,oy,uy,hy,py,dy,fy,my,gy,yy,by,xy,vy,wy,Iy,Sy,Ny,Ty,Cy,$y,{kernelName:kt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{const t=pl(e,tl(s,"float32")),a=Dl(n.shape,r);return a.length>0?bl(uu(t,a),n.shape):t},b:()=>{let t=dl(e,tl(n,"float32"));const a=Dl(s.shape,r);a.length>0&&(t=bl(uu(t,a),s.shape));const i=_c(s);return fc(pl(t,tl(i,"float32")))}}}},Ey,Ay,Ry,Fy,_y,Oy,Dy,My,Ly,Py,Wy,Uy,Vy,Gy,Hy,jy,qy,Ky,Yy,Jy,Jy,Qy,tb,{kernelName:on,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,r]=t,{filterSize:a,strides:i,pad:o}=n;return{x:()=>nb(e,s,r,a,i,o)}}},{kernelName:pn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n,a=F(r,s.shape),i=v(Ic(s.shape,a)[1]);return{x:()=>{const t=s.shape.slice();a.forEach((e=>{t[e]=1}));const n=bl(e,t);return pl(dl(n,qc(s.shape,"float32")),i)}}}},{kernelName:dn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:r}=s,[a,i]=t,o=Zy(e,i,a,F(r,a.shape));return{x:()=>o.x()}}},{kernelName:fn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>dl(e,tl(tc(n,s),"float32")),b:()=>dl(e,tl(nc(n,s),"float32"))}}},{kernelName:mn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:r}=n,a=r.map((e=>e[0]));return{x:()=>xl(e,a,s.shape)}}},{kernelName:gn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{const t=Dl(n.shape,r);return t.length>0?bl(uu(e,t),n.shape):e},b:()=>{const t=dl(e,fc(pp(pl(n,s)))),a=Dl(s.shape,r);return a.length>0?bl(uu(t,a),s.shape):t}}}},{kernelName:bn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{const t=dl(e,tl(s,"float32")),a=Dl(n.shape,r);return a.length>0?bl(uu(t,a),n.shape):t},b:()=>{const t=dl(e,tl(n,"float32")),a=Dl(s.shape,r);return a.length>0?bl(uu(t,a),s.shape):t}}}},{kernelName:xn,gradFunc:e=>({x:()=>fc(e)})},{kernelName:Nn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>vl(n.shape,"float32")}}},{kernelName:Sn,gradFunc:e=>({x:()=>kl(e)})},{kernelName:Tn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return gc(e,s).map((e=>()=>e))}},sb,sb,{kernelName:$n,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,r]=t,a=n,i=s,o=Ol(a.shape,i.shape);return{a:()=>{const t=tl(i,"float32");let n=dl(e,dl(t,Rc(a,sc(t,Cl(1)))));const s=Dl(a.shape,o);return s.length>0&&(n=uu(n,s)),bl(n,a.shape)},b:()=>{const t=nc(a,0),n=ic(t,Qc(a),kl(a));let s=dl(e,dl(r,n));const l=Dl(i.shape,o);return l.length>0&&(s=uu(s,l)),bl(s,i.shape)}}}},{kernelName:En,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,r=nc(n,0);return{x:()=>ic(r,e,dl(e,s)),alpha:()=>{let t=ic(r,kl(e),dl(e,n));const a=Dl(s.shape,e.shape);return a.length>0&&(t=uu(t,a)),bl(t,s.shape)}}}},{kernelName:An,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:r}=n;let a=[];return a=null==r?s.shape.map(((e,t)=>t)):"number"==typeof r?[r]:r,{x:()=>rb(s,e,a)}}},{kernelName:Mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,fc(_c(n)))}}},{kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=dl(tc(n,6),lu(n));return{x:()=>dl(e,tl(s,"float32"))}}},{kernelName:Ln,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,tl(lu(n),"float32"))}}},{kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>bl(e,n.shape)}}},{kernelName:Wn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Ea.runKernel(Un,r,n)}}},{kernelName:Bn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,r={dy:e,images:s};return{images:()=>Ea.runKernel(Pn,r,n)}}},{kernelName:Gn,gradFunc:(e,t,n)=>{const{dims:s}=n,r=F(s,e.shape);return{x:()=>Tl(e,r)}}},{kernelName:Hn,gradFunc:e=>({x:()=>kl(e)})},{kernelName:jn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>fc(pl(e,dl(Rc(n,1.5),2)))}}},{kernelName:Yn,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>tl(kl(n),"float32"),t:()=>dl(e,tl(n,e.dtype)),e:()=>dl(e,tl(kp(n),e.dtype))}}},{kernelName:Zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=nc(n,Cl(0)),s=Cl(eg),r=Cl(tg),a=dl(e,r),i=dl(dl(e,s),sh(tl(n,"float32")));return ic(t,a,i)}}}},{kernelName:ns,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,dl(n,sc(Cl(1),n)))}}},{kernelName:ts,gradFunc:e=>({x:()=>kl(e)})},{kernelName:Qn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(Yh(tl(n,"float32")),e)}}},{kernelName:es,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(Zh(tl(n,"float32")),e)}}},{kernelName:Jn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:r,size:a}=n,i=s.shape,[o,l]=Im(s,r,a),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>Up(e,u)}}},{kernelName:ls,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:r}=n,a=dl(e,s);return{logits:()=>sc(a,dl(uu(a,[r],true),s))}}},{kernelName:ss,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,ou(n))}}},ab,ab,ib,ib,{kernelName:rs,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,dl(Fc(tl(n,"float32")),2))}}},{kernelName:fs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Cl(2);return{a:()=>dl(e,dl(r,sc(n,s))),b:()=>dl(e,dl(r,sc(s,n)))}}},{kernelName:ms,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(e,dl(tl(n,"float32"),2))}}},{kernelName:Fs,gradFunc:e=>({x:()=>kl(e)})},{kernelName:vs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,r=Ol(n.shape,s.shape);return{a:()=>{let t=e;const s=Dl(n.shape,r);return s.length>0&&(t=uu(t,s)),bl(t,n.shape)},b:()=>{let t=e;const n=Dl(s.shape,r);return n.length>0&&(t=uu(t,n)),bl(fc(t),s.shape)}}}},{kernelName:as,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,r=s.shape.slice(),{axis:a}=n;F(a,s.shape).forEach((e=>{r[e]=1}));const i=bl(e,r),o=dl(i,qc(s.shape,"float32"));return{x:()=>o}}},{kernelName:ks,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>pl(e,_c(Yh(n)))}}},{kernelName:Is,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>dl(sc(Cl(1),_c(n)),e)}}},{kernelName:Ss,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:r}=n;return{x:()=>{let t=kl(s);if(1===s.rank)for(let n=0;n<r[0];++n)t=cl(t,xl(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)t=cl(t,xl(e,[n*s.shape[0],a*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)t=cl(t,xl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<r[0];++n)for(let a=0;a<r[1];++a)for(let i=0;i<r[2];++i)for(let o=0;o<r[3];++o)t=cl(t,xl(e,[n*s.shape[0],a*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:Cs,gradFunc:(e,t,n)=>{const s=n,{perm:r}=s,a=Cc(r);return{x:()=>Wc(e,a)}}},{kernelName:Es,gradFunc:(e,t,n)=>{const s=n,{axis:r}=s;return{value:()=>mc(e,r)}}},{kernelName:As,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=Fp(t,kl(t)),s=dp(e,n);let r=cc(t,Cl(0,"int32"));const a=s.rank-r.rank;for(let e=0;e<a;++e)r=zc(r,e+1);r=pc(r,qc(s.shape,"bool"));const i=kl(s);return ic(r,s,i)}(e,n)}}},{kernelName:Rs,gradFunc:e=>({x:()=>kl(e)})}];for(const e of ob)qs(e);function lb(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(r.recurse){if(pb(e)){const r=Array.isArray(e)?[]:{};s.add(e);for(const a in e){const i=lb(e[a],t,n,s);r[a]=i}return s.delete(e),e.__proto__&&(r.__proto__=e.__proto__),r}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,r.value),r.value}function ub(e,t=hb){return cb(e,t)}function cb(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const r=t(e);if(r.recurse&&null!==r.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(r.recurse){if(pb(s)){const r=Array.isArray(s)?[]:{};n.add(s);for(const a in s){const s=cb(e.map((e=>e[a])),t,n);r[a]=s}return n.delete(s),r}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return r.value}function hb(e){return null===e?null:pb(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function pb(e){let t=!1;if(oe().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:n}=a("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof na)&&!(e instanceof Promise)&&!t)}function db(e){return lb(e,fb)}function fb(e){return e instanceof na?{value:e.clone(),recurse:!1}:pb(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}sa().prototype.abs=function(){return this.throwIfDisposed(),xc(this)},sa().prototype.acos=function(){return this.throwIfDisposed(),gh(this)},sa().prototype.acosh=function(){return this.throwIfDisposed(),yh(this)},sa().prototype.add=function(e){return this.throwIfDisposed(),cl(this,e)},sa().prototype.all=function(e,t){return this.throwIfDisposed(),xh(this,e,t)},sa().prototype.any=function(e,t){return this.throwIfDisposed(),wh(this,e,t)},sa().prototype.argMax=function(e){return this.throwIfDisposed(),vh(this,e)},sa().prototype.argMin=function(e){return this.throwIfDisposed(),kh(this,e)},sa().prototype.asScalar=function(){return this.throwIfDisposed(),b(1===this.size,(()=>"The array must have only 1 element.")),bl(this,[])},sa().prototype.asType=function(e){return this.throwIfDisposed(),tl(this,e)},sa().prototype.as1D=function(){return this.throwIfDisposed(),bl(this,[this.size])},sa().prototype.as2D=function(e,t){return this.throwIfDisposed(),bl(this,[e,t])},sa().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),bl(this,[e,t,n])},sa().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),bl(this,[e,t,n,s])},sa().prototype.as5D=function(e,t,n,s,r){return this.throwIfDisposed(),bl(this,[e,t,n,s,r])},sa().prototype.asin=function(){return this.throwIfDisposed(),Ih(this)},sa().prototype.asinh=function(){return this.throwIfDisposed(),Sh(this)},sa().prototype.atan=function(){return this.throwIfDisposed(),Nh(this)},sa().prototype.atan2=function(e){return this.throwIfDisposed(),Th(this,e)},sa().prototype.atanh=function(){return this.throwIfDisposed(),Ch(this)},sa().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),$h(this,e,t,n,s)},sa().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Fh(this,e,t)},sa().prototype.batchNorm=function(e,t,n,s,r){return this.throwIfDisposed(),_h(this,e,t,n,s,r)},sa().prototype.broadcastTo=function(e){return this.throwIfDisposed(),ac(this,e)},sa().prototype.cast=function(e){return this.throwIfDisposed(),tl(this,e)},sa().prototype.ceil=function(){return this.throwIfDisposed(),Bh(this)},sa().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Ph(this,e,t)},sa().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof na&&(e=[e]),ml([this,...e],t)},sa().prototype.conv1d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Hh(this,e,t,n,s,r,a)},sa().prototype.conv2dTranspose=function(e,t,n,s,r){return this.throwIfDisposed(),jh(this,e,t,n,s,r)},sa().prototype.conv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Jl(this,e,t,n,s,r,a)},sa().prototype.cos=function(){return this.throwIfDisposed(),Yh(this)},sa().prototype.cosh=function(){return this.throwIfDisposed(),Zh(this)},sa().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),Jh(this,e,t,n)},sa().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Qh(this,e,t,n)},sa().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),tp(this,e,t)},sa().prototype.depthwiseConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),mu(this,e,t,n,s,r,a)},sa().prototype.dilation2d=function(e,t,n,s,r){return this.throwIfDisposed(),sp(this,e,t,n,s,r)},sa().prototype.divNoNan=function(e){return this.throwIfDisposed(),ap(this,e)},sa().prototype.div=function(e){return this.throwIfDisposed(),pl(this,e)},sa().prototype.dot=function(e){return this.throwIfDisposed(),ip(this,e)},sa().prototype.elu=function(){return this.throwIfDisposed(),nu(this)},sa().prototype.equal=function(e){return this.throwIfDisposed(),rp(this,e)},sa().prototype.erf=function(){return this.throwIfDisposed(),up(this)},sa().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),cp(this,e,t)},sa().prototype.exp=function(){return this.throwIfDisposed(),sh(this)},sa().prototype.expandDims=function(e){return this.throwIfDisposed(),zc(this,e)},sa().prototype.expm1=function(){return this.throwIfDisposed(),hp(this)},sa().prototype.fft=function(){return this.throwIfDisposed(),Il(this)},sa().prototype.flatten=function(){return this.throwIfDisposed(),bl(this,[this.size])},sa().prototype.floor=function(){return this.throwIfDisposed(),pp(this)},sa().prototype.floorDiv=function(e){return this.throwIfDisposed(),hl(this,e)},sa().prototype.gather=function(e,t,n){return this.throwIfDisposed(),dp(this,e,t,n)},sa().prototype.greaterEqual=function(e){return this.throwIfDisposed(),cc(this,e)},sa().prototype.greater=function(e){return this.throwIfDisposed(),nc(this,e)},sa().prototype.ifft=function(){return this.throwIfDisposed(),Nl(this)},sa().prototype.irfft=function(){return this.throwIfDisposed(),$l(this)},sa().prototype.isFinite=function(){return this.throwIfDisposed(),fp(this)},sa().prototype.isInf=function(){return this.throwIfDisposed(),mp(this)},sa().prototype.isNaN=function(){return this.throwIfDisposed(),gp(this)},sa().prototype.leakyRelu=function(e){return this.throwIfDisposed(),su(this,e)},sa().prototype.lessEqual=function(e){return this.throwIfDisposed(),tc(this,e)},sa().prototype.less=function(e){return this.throwIfDisposed(),hc(this,e)},sa().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),bp(this,e,t,n,s)},sa().prototype.logSigmoid=function(){return this.throwIfDisposed(),wp(this)},sa().prototype.logSoftmax=function(e){return this.throwIfDisposed(),vp(this,e)},sa().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),ih(this,e,t)},sa().prototype.log=function(){return this.throwIfDisposed(),Qc(this)},sa().prototype.log1p=function(){return this.throwIfDisposed(),rh(this)},sa().prototype.logicalAnd=function(e){return this.throwIfDisposed(),pc(this,e)},sa().prototype.logicalNot=function(){return this.throwIfDisposed(),kp(this)},sa().prototype.logicalOr=function(e){return this.throwIfDisposed(),Ip(this,e)},sa().prototype.logicalXor=function(e){return this.throwIfDisposed(),Sp(this,e)},sa().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),xu(this,e,t,n)},sa().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),Ep(this,e,t,n,s)},sa().prototype.max=function(e,t){return this.throwIfDisposed(),Ec(this,e,t)},sa().prototype.maximum=function(e){return this.throwIfDisposed(),Fp(this,e)},sa().prototype.mean=function(e,t){return this.throwIfDisposed(),Hc(this,e,t)},sa().prototype.min=function(e,t){return this.throwIfDisposed(),Ac(this,e,t)},sa().prototype.minimum=function(e){return this.throwIfDisposed(),dc(this,e)},sa().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Dp(this,e,t)},sa().prototype.mod=function(e){return this.throwIfDisposed(),Op(this,e)},sa().prototype.mul=function(e){return this.throwIfDisposed(),dl(this,e)},sa().prototype.neg=function(){return this.throwIfDisposed(),fc(this)},sa().prototype.norm=function(e,t,n){return this.throwIfDisposed(),Oc(this,e,t,n)},sa().prototype.notEqual=function(e){return this.throwIfDisposed(),jc(this,e)},sa().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Bp(this,e,t,n)},sa().prototype.onesLike=function(){return this.throwIfDisposed(),Pp(this)},sa().prototype.pad=function(e,t){return this.throwIfDisposed(),Up(this,e,t)},sa().prototype.pool=function(e,t,n,s,r,a){return this.throwIfDisposed(),Kp(this,e,t,n,s,r,a)},sa().prototype.pow=function(e){return this.throwIfDisposed(),Rc(this,e)},sa().prototype.prelu=function(e){return this.throwIfDisposed(),ru(this,e)},sa().prototype.prod=function(e,t){return this.throwIfDisposed(),Xp(this,e,t)},sa().prototype.reciprocal=function(){return this.throwIfDisposed(),gd(this)},sa().prototype.relu=function(){return this.throwIfDisposed(),au(this)},sa().prototype.relu6=function(){return this.throwIfDisposed(),iu(this)},sa().prototype.reshapeAs=function(e){return this.throwIfDisposed(),bl(this,e.shape)},sa().prototype.reshape=function(e){return this.throwIfDisposed(),bl(this,e)},sa().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),Ju(this,e,t,n)},sa().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),Qu(this,e,t,n)},sa().prototype.reverse=function(e){return this.throwIfDisposed(),Tl(this,e)},sa().prototype.rfft=function(){return this.throwIfDisposed(),Sl(this)},sa().prototype.round=function(){return this.throwIfDisposed(),rc(this)},sa().prototype.rsqrt=function(){return this.throwIfDisposed(),vd(this)},sa().prototype.selu=function(){return this.throwIfDisposed(),kd(this)},sa().prototype.separableConv2d=function(e,t,n,s,r,a){return this.throwIfDisposed(),Id(this,e,t,n,s,r,a)},sa().prototype.sigmoid=function(){return this.throwIfDisposed(),ou(this)},sa().prototype.sign=function(){return this.throwIfDisposed(),Nd(this)},sa().prototype.sin=function(){return this.throwIfDisposed(),Td(this)},sa().prototype.sinh=function(){return this.throwIfDisposed(),Cd(this)},sa().prototype.slice=function(e,t){return this.throwIfDisposed(),xl(this,e,t)},sa().prototype.softmax=function(e){return this.throwIfDisposed(),Fd(this,e)},sa().prototype.softplus=function(){return this.throwIfDisposed(),xp(this)},sa().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),qp(this,e,t)},sa().prototype.split=function(e,t){return this.throwIfDisposed(),wl(this,e,t)},sa().prototype.sqrt=function(){return this.throwIfDisposed(),Fc(this)},sa().prototype.square=function(){return this.throwIfDisposed(),_c(this)},sa().prototype.squaredDifference=function(e){return this.throwIfDisposed(),th(this,e)},sa().prototype.squeeze=function(e){return this.throwIfDisposed(),Mc(this,e)},sa().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof na?[this,e]:[this,...e];return mc(n,t)},sa().prototype.step=function(e){return this.throwIfDisposed(),lu(this,e)},sa().prototype.stridedSlice=function(e,t,n,s,r,a,i,o){return this.throwIfDisposed(),_d(this,e,t,n,s,r,a,i,o)},sa().prototype.sub=function(e){return this.throwIfDisposed(),sc(this,e)},sa().prototype.sum=function(e,t){return this.throwIfDisposed(),uu(this,e,t)},sa().prototype.tan=function(){return this.throwIfDisposed(),Dd(this)},sa().prototype.tanh=function(){return this.throwIfDisposed(),Ah(this)},sa().prototype.tile=function(e){return this.throwIfDisposed(),_u(this,e)},sa().prototype.toBool=function(){return this.throwIfDisposed(),tl(this,"bool")},sa().prototype.toFloat=function(){return this.throwIfDisposed(),tl(this,"float32")},sa().prototype.toInt=function(){return this.throwIfDisposed(),tl(this,"int32")},sa().prototype.topk=function(e,t){return this.throwIfDisposed(),Gd(this,e,t)},sa().prototype.transpose=function(e){return this.throwIfDisposed(),Wc(this,e)},sa().prototype.unique=function(e){return this.throwIfDisposed(),jd(this,e)},sa().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),qd(this,e,t)},sa().prototype.unstack=function(e){return this.throwIfDisposed(),gc(this,e)},sa().prototype.where=function(e,t){return this.throwIfDisposed(),ic(e,this,t)},sa().prototype.zerosLike=function(){return this.throwIfDisposed(),kl(this)};class mb{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class gb extends mb{constructor(){super(gb.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function yb(e){return new vb(e)}function bb(e){return new kb(e)}function xb(e,t){return new _b(e,t)}gb.INITIAL_CAPACITY=32;class wb{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Eb(this,e)}filter(e){return new Cb(this,e)}map(e){return new $b(this,e)}mapAsync(e){return new Ab(this,e)}serialMapAsync(e){return new Ab(this,e).serial()}flatmap(e){return new Fb(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Tb(this,e,t)}columnMajorBatch(e,t=!0,n=hb){return this.rowMajorBatch(e,t).map((e=>ub(e,n)))}concatenate(e,t){return new _b(yb([this,e]),t)}take(e){return e<0||null==e?this:new Nb(this,e)}skip(e){return e<0||null==e?this:new Sb(this,e)}prefetch(e){return new Ob(this,e)}shuffle(e,t){return new Mb(this,e,t)}serial(){return new Ib(this)}}class vb extends wb{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:db(e),done:!1}}}class kb extends wb{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Ib extends wb{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Sb extends wb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;ol(e.value)}return this.upstream.next()}}class Nb extends wb{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Tb extends wb{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Cb extends wb{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ol(e.value)}}}class $b extends wb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=fa.getTensorsInContainer(e.value),n=this.transform(e.value),s=fa.getTensorsInContainer(n);for(const e of t)fa.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Eb extends wb{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class Ab extends wb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=fa.getTensorsInContainer(e.value),n=await this.transform(e.value),s=fa.getTensorsInContainer(n);for(const e of t)fa.isTensorInList(e,s)||e.dispose();return{value:n,done:!1}}}class Rb extends wb{constructor(){super(),this.outputQueue=new gb,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Fb extends Rb{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=fa.getTensorsInContainer(e.value),n=this.transform(e.value),s=fa.getTensorsInContainer(n);this.outputQueue.pushAll(n);for(const e of t)fa.isTensorInList(e,s)||e.dispose();return!0}}class _b extends wb{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Db;!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(Db||(Db={}));class Ob extends wb{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new mb(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Mb extends Ob{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=ed.alea(n||Xs.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class Lb{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return Xs.assert(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),zb((async()=>(await n.iterator()).columnMajorBatch(e,t,Bb)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,zb((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,zb((async()=>(await t.iterator()).filter((t=>il((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return zb((async()=>(await t.iterator()).map((t=>il((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return zb((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return zb((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,zb((async()=>xb(bb((async()=>({value:await t.iterator(),done:!1}))).take(e))),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,zb((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,r=ed.alea(t||Xs.now().toString());return zb((async()=>{let t=r.int32();return n&&(t+=r.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,zb((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function zb(e,t=null){return new class extends Lb{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function Bb(e){if(null===e)return null;const t=e[0];if(null==(n=t)||null===(s=n)||"object"!=typeof s&&"function"!=typeof s||Array.isArray(n)||"object"==typeof n&&n instanceof na||Xs.isTypedArray(n)){return{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof na?mc(e):ja(e)}(e),recurse:!1}}var n,s;return{value:null,recurse:!0}}Lb.MAX_BUFFER_SIZE=1e4;Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");function Pb(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Xs.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Wb(e){return(t,n,s)=>{const r=Xs.getArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)r[n]=e(t[n],s);return r}}function Ub(e,t,n){return Vb(e,Wb(t),n)}function Vb(e,t,n){return({inputs:s,attrs:r,backend:a})=>{const{x:i}=s;Pb(i,e);const o=a,l=o.data.get(i.dataId).values;let u;if("string"===i.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Tm.fromUint8ToStringArray(l)}else u=l;const c=n||i.dtype,h=t(u,c,r);return o.makeTensorInfo(i.shape,c,h)}}const Gb=Ub(St,(e=>e>=0?e:Math.exp(e)-1)),Hb={kernelName:St,backendName:"cpu",kernelFunc:Gb};function jb(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const qb={kernelName:Wt,backendName:"cpu",kernelFunc:jb};function Kb(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s;Pb([r],"leakyRelu");const i=Xs.sizeFromShape(r.shape),o=n.data.get(r.dataId).values,l=Xs.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?a*o[e]:o[e];return n.makeTensorInfo(r.shape,"float32",l)}const Xb={kernelName:qt,backendName:"cpu",kernelFunc:Kb};function Yb(e){return(t,n,s,r,a)=>{const i=Tm.assertAndGetBroadcastShape(t,n),o=i.length,l=Xs.computeStrides(i),u=Xs.sizeFromShape(i),c=Xs.getTypedArrayFromDType(a,u),h=t.length,p=n.length,d=Xs.computeStrides(t),f=Xs.computeStrides(n),m=Tm.getBroadcastDims(t,i),g=Tm.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<c.length;++t)c[t]=e(s[t%s.length],r[t%r.length]);else for(let t=0;t<c.length;++t){const n=Xs.indexToLoc(t,o,l),a=n.slice(-h);m.forEach((e=>a[e]=0));const i=Xs.locToIndex(a,h,d),u=n.slice(-p);g.forEach((e=>u[e]=0));const y=Xs.locToIndex(u,p,f);c[t]=e(s[i],r[y])}return[c,i]}}const Zb=Yb(((e,t)=>e<0?t*e:e));function Jb(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t;Pb([s,r],"prelu");const a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,[o,l]=Zb(s.shape,r.shape,a,i,"float32");return n.makeTensorInfo(l,"float32",o)}const Qb={kernelName:En,backendName:"cpu",kernelFunc:Jb},ex=Ub(Ln,(e=>Math.max(0,e))),tx={kernelName:Ln,backendName:"cpu",kernelFunc:ex},nx=Ub(Vn,(e=>Math.min(Math.max(0,e),6))),sx={kernelName:Vn,backendName:"cpu",kernelFunc:nx},rx=Wb((e=>1/(1+Math.exp(-e)))),ax=Ub(ns,(e=>1/(1+Math.exp(-e)))),ix={kernelName:ns,backendName:"cpu",kernelFunc:ax};function ox(e,t,n,s,r){if("linear"===n)return jb({inputs:{x:t},backend:e});if("relu"===n)return ex({inputs:{x:t},backend:e});if("elu"===n)return Gb({inputs:{x:t},backend:e});if("relu6"===n)return nx({inputs:{x:t},backend:e});if("prelu"===n)return Jb({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return Kb({inputs:{x:t},backend:e,attrs:{alpha:r}});if("sigmoid"===n)return ax({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function lx(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",a),imag:n.makeTensorInfo(r.shape,"float32",i)},o}const ux={kernelName:Qe,backendName:"cpu",kernelFunc:lx};function cx(e,t,n="float32"){if("complex64"===n){return lx({inputs:{real:cx(e,t,"float32"),imag:cx(e,t,"float32")},backend:e})}const s=Xs.makeZerosTypedArray(Xs.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}function hx(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.real,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const px={kernelName:On,backendName:"cpu",kernelFunc:hx};function dx(e,t,n,s){if("int32"===s){return[t,"int32",Int32Array.from(e)]}if("bool"===s){const s=Xs.toTypedArray([0],n),[r,a]=Yb(((e,t)=>e!==t?1:0))(t,[],e,s,"bool");return[a,"bool",r]}throw new Error(`Error in Cast: failed to cast ${n} to ${s}`)}function fx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dtype:a}=s;if("complex64"===a){if("complex64"===r.dtype)return jb({inputs:{x:r},backend:n});const e=cx(n,r.shape,r.dtype),t=fx({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),s=lx({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===r.dtype){const e=hx({inputs:{input:r},backend:n}),t=fx({inputs:{x:e},backend:n,attrs:{dtype:a}});return n.disposeIntermediateTensorInfo(e),t}if(!Xs.hasEncodingLoss(r.dtype,a)){const e=jb({inputs:{x:r},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:a}}const i=n.data.get(r.dataId).values,[o,l,u]=dx(i,r.shape,r.dtype,a);return n.makeTensorInfo(o,l,u)}const mx={kernelName:Ye,backendName:"cpu",kernelFunc:fx};function gx(e,t,n,s){return null==n?({inputs:n,backend:r})=>{const{a:a,b:i}=n,o=r;Pb([a,i],e);const l=o.data.get(a.dataId).values,u=o.data.get(i.dataId).values,c="string"===a.dtype?Tm.fromUint8ToStringArray(l):l,h="string"===a.dtype?Tm.fromUint8ToStringArray(u):u,p=s||a.dtype,[d,f]=t(a.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:r})=>{const{a:a,b:i}=e,o=r;if("complex64"===a.dtype||"complex64"===i.dtype){const e=fx({inputs:{x:a},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,r=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(r.dataId).values,c=fx({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(a.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),v=lx({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),v}{const e=o.data.get(a.dataId).values,n=o.data.get(i.dataId).values,r=s||a.dtype,[l,u]=t(a.shape,i.shape,e,n,r);return o.makeTensorInfo(u,r,l)}}}function yx(e){return(t,n,s,r,a,i)=>{const o=Tm.assertAndGetBroadcastShape(t,n),l=Xs.sizeFromShape(o),u=o.length,c=Xs.computeStrides(o),h=Xs.getTypedArrayFromDType("float32",l),p=Xs.getTypedArrayFromDType("float32",l),d=Tm.getBroadcastDims(t,o),f=Tm.getBroadcastDims(n,o),m=Tm.mergeRealAndImagArrays(s,r),g=Tm.mergeRealAndImagArrays(a,i),y=t.length,b=Xs.computeStrides(t),x=n.length,w=Xs.computeStrides(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,r=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=r.real,p[t]=r.imag}else for(let t=0;t<h.length;t++){const n=Xs.indexToLoc(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const r=Xs.locToIndex(s,y,b),a=n.slice(-x);f.forEach((e=>a[e]=0));const i=Xs.locToIndex(a,x,w),o=e(m[2*r],m[2*r+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const bx=Yb(((e,t)=>e+t)),xx=yx(((e,t,n,s)=>({real:e+n,imag:t+s}))),wx=gx(Ae,bx,xx),vx={kernelName:Ae,backendName:"cpu",kernelFunc:wx};function kx(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=Xs.sizeFromShape(r.shape),o=Xs.inferFromImplicitShape(a,i),l=Xs.sizeFromShape(o);Xs.assert(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(r.dataId);const u=n.data.get(r.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:r.dataId,shape:o,dtype:r.dtype}}const Ix={kernelName:zn,backendName:"cpu",kernelFunc:kx};function Sx(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;Pb([r,a],"matMul");const l=r.shape.length,u=a.shape.length,c=i?r.shape[l-2]:r.shape[l-1],h=o?a.shape[u-1]:a.shape[u-2],p=i?r.shape[l-1]:r.shape[l-2],d=o?a.shape[u-2]:a.shape[u-1],f=r.shape.slice(0,-2),m=a.shape.slice(0,-2),g=Xs.sizeFromShape(f),y=Xs.sizeFromShape(m),b=Fl.assertAndGetBroadcastShape(r.shape.slice(0,-2),a.shape.slice(0,-2)).concat([p,d]);Xs.assert(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${a.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=kx({inputs:{x:r},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),v=kx({inputs:{x:a},backend:n,attrs:{shape:x}}),k=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],S=o?v.shape[1]:v.shape[2],N=Math.max(g,y),T=n.data.get(w.dataId).values,C=n.data.get(v.dataId).values,$=Xs.computeStrides(w.shape),E=Xs.computeStrides(v.shape),[A,R,F]=i?[$[0],1,$[1]]:[$[0],$[1],1],[_,D,O]=o?[1,E[1],E[0]]:[E[1],1,E[0]],M=I*S,L=el([N,I,S],w.dtype),z=L.values,B=n.blockSize;for(let e=0;e<N;e++){const t=e%g,n=e%y;for(let s=0;s<I;s+=B){const r=Math.min(s+B,I);for(let a=0;a<S;a+=B){const i=Math.min(a+B,S);for(let o=0;o<k;o+=B){const l=Math.min(o+B,k);for(let u=s;u<r;u++)for(let s=a;s<i;s++){let r=0;for(let e=o;e<l;e++){r+=T[t*A+u*R+e*F]*C[e*_+s*D+n*O]}z[e*M+(u*S+s)]+=r}}}}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(v),n.makeTensorInfo(b,L.dtype,L.values)}const Nx={kernelName:He,backendName:"cpu",kernelFunc:Sx};const Tx={kernelName:Os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Sx({inputs:{a:r,b:a},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=wx({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=ox(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Cx(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const $x={kernelName:Ce,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Pb(t,"abs");let s=new Float32Array(Xs.sizeFromShape(t.shape));return s=Cx(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},Ex=Ub($e,(e=>Math.acos(e))),Ax={kernelName:$e,backendName:"cpu",kernelFunc:Ex},Rx=Ub(Ee,(e=>Math.acosh(e))),Fx={kernelName:Ee,backendName:"cpu",kernelFunc:Rx};const _x={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;Pb(t,"addN");const r=s.map((e=>n.data.get(e.dataId).values)),a=el(s[0].shape,s[0].dtype),i=a.values;for(let e=0;e<s.length;e++){const t=r[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}};function Dx(e,t,n,s,r){const a=t.length,i=Xs.sizeFromShape(t),o=Xs.computeStrides(t),l=Xs.computeStrides(r),u=Xs.getTypedArrayFromDType(n,Xs.sizeFromShape(r));for(let t=0;t<i;++t){const n=Xs.indexToLoc(t,a,o),r=new Array(n.length);for(let e=0;e<r.length;e++)r[e]=n[s[e]];u[Xs.locToIndex(r,a,l)]=e[t]}return u}function Ox(e){const{inputs:t,attrs:n,backend:s}=e,{x:r}=t,{perm:a}=n;Pb(r,"transpose");const i=r.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=r.shape[a[e]];const l=Dx(s.data.get(r.dataId).values,r.shape,r.dtype,a,o);return{dataId:s.write(l,o,r.dtype),shape:o,dtype:r.dtype}}const Mx={kernelName:Cs,backendName:"cpu",kernelFunc:Ox};const Lx={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Pb(r,"all");const o=Xs.parseAxisParam(a,r.shape);let l=o;const u=Tm.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ox({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tm.getInnerMostAxes(l.length,r.shape.length)),Tm.assertAxesAreInnerMostDims("all",l,c.shape.length);const[h,p]=Tm.computeOutAndReduceShapes(c.shape,l),d=Xs.sizeFromShape(p),f=Xs.makeZerosTypedArray(Xs.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=kx({inputs:{x:g},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const zx={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Pb(r,"any");const o=Xs.parseAxisParam(a,r.shape);let l=o;const u=Tm.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ox({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tm.getInnerMostAxes(l.length,r.shape.length)),Tm.assertAxesAreInnerMostDims("any",l,c.shape.length);const[h,p]=Tm.computeOutAndReduceShapes(c.shape,l),d=Xs.sizeFromShape(p),f=Xs.makeZerosTypedArray(Xs.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=kx({inputs:{x:g},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}};const Bx={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Pb(r,"argMax");let i=Xs.parseAxisParam(a,r.shape);const o=Tm.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ox({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tm.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Tm.assertAxesAreInnerMostDims("argMax",i,l.shape.length);const[c,h]=Tm.computeOutAndReduceShapes(l.shape,i),p=Xs.sizeFromShape(c),d=Xs.makeZerosTypedArray(p,"int32"),f=Xs.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r>n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}};const Px={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;Pb(r,"argMin");let i=Xs.parseAxisParam(a,r.shape);const o=Tm.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=Ox({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tm.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],Tm.assertAxesAreInnerMostDims("argMin",i,l.shape.length);const[c,h]=Tm.computeOutAndReduceShapes(l.shape,i),p=Xs.sizeFromShape(c),d=Xs.makeZerosTypedArray(p,"int32"),f=Xs.sizeFromShape(h),m=n.data.get(l.dataId).values;for(let e=0;e<d.length;++e){const t=e*f;let n=m[t],s=0;for(let e=0;e<f;++e){const r=m[t+e];r<n&&(n=r,s=e)}d[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",d)}},Wx=Ub(Me,(e=>Math.asin(e))),Ux={kernelName:Me,backendName:"cpu",kernelFunc:Wx},Vx=Ub(Le,(e=>Math.asinh(e))),Gx={kernelName:Le,backendName:"cpu",kernelFunc:Vx},Hx=Ub(ze,(e=>Math.atan(e))),jx={kernelName:ze,backendName:"cpu",kernelFunc:Hx},qx=Yb(((e,t)=>Math.atan2(e,t))),Kx=gx(Pe,qx),Xx={kernelName:Pe,backendName:"cpu",kernelFunc:Kx},Yx=Ub(Be,(e=>Math.atanh(e))),Zx={kernelName:Be,backendName:"cpu",kernelFunc:Yx};function Jx(e,t,n,s,r,a){const i=r.strideHeight,o=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,d=r.padInfo.left,f="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=el(r.outShape,n),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],x=r.outShape[3];for(let t=0;t<r.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<r.inChannels;++t)for(let y=0;y<r.outHeight;++y){const w=y*i-p,v=Math.max(0,w),k=Math.min(r.inHeight,c+w),I=n+y*b;for(let n=0;n<r.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(r.inWidth,h+i);let y=f,b=0,w=0;for(let n=v;n<k;n+=l){const r=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[r+n*s[2]+t];"max"===a&&i>y?y=i:"avg"===a&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===a?b/w:y}}}return m}function Qx(e,t,n,s,r=!1,a=!1){const i=el(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=el(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,v=r?a?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(v,e,n,o,t)}}return i}function ew(e,t,n,s,r,a){const i=r.strideDepth,o=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===a?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=el(r.outShape,n),w=x.values,v=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],S=r.outShape[4];for(let t=0;t<r.batchSize;++t){const n=t*v,x=t*s[0];for(let t=0;t<r.inChannels;++t)for(let v=0;v<r.outDepth;++v){const N=v*i-m;let T=N;for(;T<0;)T+=u;const C=Math.min(r.inDepth,p+N),$=n+v*k;for(let n=0;n<r.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(r.inHeight,d+i),v=$+n*I;for(let n=0;n<r.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(r.inWidth,f+i),g=v+n*S;let k=b,I=0,N=0;for(let n=T;n<C;n+=u){const r=x+n*s[1];for(let n=p;n<m;n+=c){const i=r+n*s[2];for(let n=o;n<d;n+=h){const r=e[i+n*s[3]+t];if("max"===a&&r>k?k=r:"avg"===a&&(I+=r,N++),isNaN(k))break}if(isNaN(k))break}if(isNaN(k))break}w[g+t]="avg"===a?I/Math.max(N,1):k}}}}return x}const tw={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Pb(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tm.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Xs.arraysEqual(u.inShape,u.outShape))c=jb({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Xs.computeStrides(r.shape),s=Jx(e,r.shape,r.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const nw={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Pb(r,"avgPool3d");const c=Tm.computePool3DInfo(r.shape,a,i,1,o,l,u),h=ew(n.data.get(r.dataId).values,r.shape,r.dtype,Xs.computeStrides(r.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}};const sw={kernelName:Ge,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Pb([r,a],"avgPool3DGrad");const c=Tm.computePool3DInfo(a.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,v=c.effectiveFilterHeight,k=c.effectiveFilterWidth,I=w-1-c.padInfo.front,S=k-1-c.padInfo.left,N=v-1-c.padInfo.top,T=el(a.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-I,i=s-N,o=r-S;let l=0;for(let n=0;n<w;n+=y){const s=(a+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<v;n+=b){const r=(i+n)/p;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<k;n+=x){const a=(o+n)/d;if(a<0||a>=c.outWidth||Math.floor(a)!==a)continue;l+=$.get(e,s,r,a,t)}}}T.set(l*C,e,n,s,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const rw={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;Pb([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Tm.computePool2DInfo(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,v=el(i.shape,"float32"),k=1/(d*f),I=n.data.get(r.dataId).values,S=el(r.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const r=n-w,a=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(r+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const r=(a+n)/p;if(r<0||r>=c.outWidth||Math.floor(r)!==r)continue;i+=S.get(e,s,r,t)}}v.set(i*k,e,n,s,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}};const aw={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,scale:a,offset:i,mean:o,variance:l}=t;Xs.assert(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Xs.assert(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Xs.assert(null==a||o.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),Pb([r,o,l,a,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(r.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=a?n.data.get(a.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,v=0,k=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[v++])*d[k++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),v>=x&&(v=0),k>=y&&(k=0),I>=b&&(I=0);return n.makeTensorInfo(r.shape,r.dtype,m)}};function iw(e,t,n,s,r){const a=lm.isSliceContinous(s,t,n),i=Xs.sizeFromShape(n),o=Xs.computeStrides(s);if(a){const n=lm.computeFlatOffset(t,o);return"string"===r?e.slice(n,n+i):e.subarray(n,n+i)}const l=el(s,r,"string"===r?Tm.fromUint8ToStringArray(e):e),u=el(n,r);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===r?Tm.fromStringArrayToUint8(u.values):u.values}function ow(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s;Pb(r,"slice");const[o,l]=lm.parseSliceParams(r,a,i);lm.assertParamsValid(r,o,l);const u=iw(n.data.get(r.dataId).values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,u)}const lw={kernelName:Jn,backendName:"cpu",kernelFunc:ow};const uw={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Pb([r],"batchToSpaceND");const o=a.reduce(((e,t)=>e*t)),l=Tm.getReshaped(r.shape,a,o),u=Tm.getPermuted(l.length,a.length),c=Tm.getReshapedPermuted(r.shape,a,o),h=Tm.getSliceBeginCoords(i,a.length),p=Tm.getSliceSize(c,i,a.length),d=kx({inputs:{x:r},backend:n,attrs:{shape:l}}),f=Ox({inputs:{x:d},backend:n,attrs:{perm:u}}),m=kx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=ow({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function cw(e,t,n,s,r){const a=Xs.sizeFromShape(s),i=Xs.makeZerosTypedArray(r,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=r||(i[s]+=a>0?t[n]:1)}return i}function hw(e,t,n,s=!1){const r=e.shape[0],a=e.shape[1],i=el([r,n],t.dtype);for(let o=0;o<r;o++)for(let r=0;r<a;r++){const a=e.get(o,r);if(a<0)throw new Error("Input x must be non-negative!");a>=n||(s?i.set(1,o,a):t.size>0?i.set(i.get(o,a)+t.get(o,r),o,a):i.set(i.get(o,a)+1,o,a))}return i}const pw={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=cw(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,o)}},dw=Yb(((e,t)=>e&t)),fw=gx(Ke,dw),mw={kernelName:Ke,backendName:"cpu",kernelFunc:fw};const gw={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.data.get(s.dataId).values,i=n.data.get(r.dataId).values,o=Tm.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},yw=Wb((e=>Math.ceil(e))),bw=Vb(Ze,yw),xw={kernelName:Ze,backendName:"cpu",kernelFunc:bw},ww=Ub(Je,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),vw={kernelName:Je,backendName:"cpu",kernelFunc:ww},kw={kernelName:et,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(Xs.sizeFromShape(t.shape)),r=n.data.get(t.dataId),a=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function Iw(e,t,n,s){const r=Xs.getArrayFromDType(n,Xs.sizeFromShape(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=Xs.sizeFromShape(e.shape);r.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const a="string"===n?Tm.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)r[o+t]=a[i++]}s+=e.shape[1]}))}return r}function Sw(e){const{inputs:t,backend:n}=e,{input:s}=t,r=n.data.get(s.dataId).complexTensorInfos.imag,a=n.data.get(r.dataId).values;return n.makeTensorInfo(r.shape,r.dtype,a)}const Nw={kernelName:Vt,backendName:"cpu",kernelFunc:Sw};function Tw(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Xs.parseAxisParam(r,t[0].shape)[0],i=t.map((e=>e.shape));Tm.assertParamsConsistent(i,a);let o=Tm.computeOutShape(t.map((e=>e.shape)),a);if(0===Xs.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>Xs.sizeFromShape(e.shape)>0));if(1===l.length)return jb({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){const e=l.map((e=>hx({inputs:{input:e},backend:n}))),t=l.map((e=>Sw({inputs:{input:e},backend:n}))),s=Tw({inputs:e,backend:n,attrs:{axis:a}}),r=Tw({inputs:t,backend:n,attrs:{axis:a}}),i=lx({inputs:{real:s,imag:r},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),i}const u=l.map((e=>{const t=Xs.sizeFromShape(e.shape.slice(a));return kx({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),c=u.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));o=Tm.computeOutShape(u.map((e=>e.shape)),1);const h=1===u[0].shape[0],p=Iw(c,o,t[0].dtype,h),d=Tm.computeOutShape(l.map((e=>e.shape)),a),f=n.makeTensorInfo(d,t[0].dtype,p);return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}const Cw={kernelName:tt,backendName:"cpu",kernelFunc:Tw};function $w(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Pb([r,a],"conv2d");const h=Tm.convertConv2DDataFormat(l),p=Tm.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new Jr(p.outShape,r.dtype),v=Xs.computeStrides(r.shape),k=Xs.computeStrides(a.shape),I=v[0],S=x?v[1]:v[2],N=x?v[2]:1,T=x?1:v[1],C=w.strides[0],$=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(r.dataId).values,F=n.data.get(a.dataId).values,_=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*C;for(let e=0;e<p.outHeight;++e){const s=n+e*$,r=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=r+e*m;if(n<0||n>=p.inHeight)continue;const a=e*k[0],i=t+n*S;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const r=i+s*N;let o=a+e*k[1];for(let e=0;e<p.inChannels;++e){const n=R[r+e*T];for(let e=0;e<p.outChannels;++e)_[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,_)}const Ew={kernelName:nt,backendName:"cpu",kernelFunc:$w};const Aw={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Pb([r,a],"conv2dBackpropFilter");const h=Tm.convertConv2DDataFormat(l),p=Tm.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new Jr(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=new Jr(r.shape,r.dtype,v),S=new Jr(a.shape,a.dtype,k);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const r=Math.max(0,Math.ceil((x-s)/f)),a=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=r;e<a;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*S.get(u,c,e,o):I.get(u,i,t,n)*S.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Rw={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;Pb([r,a],"conv2dBackpropInput");const h=Xs.computeStrides(a.shape),p=Xs.computeStrides(r.shape);let d=Tm.convertConv2DDataFormat(u);const f=Tm.computeConv2DInfo(i,a.shape,o,1,l,c,!1,d),m=new Jr(f.inShape,"float32"),g=m.values,y=n.data.get(r.dataId).values,b=n.data.get(a.dataId).values,[x,w,v]=h,{batchSize:k,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const _=I-1-f.padInfo.top,D=S-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],U=O?p[2]:1,V=O?1:p[1];for(let e=0;e<k;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){const s=n-_,r=Math.max(0,Math.ceil(s/R)),a=Math.min(E,(I+s)/R);for(let i=0;i<C;++i){const o=i-D,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F);let c=0;for(let n=r;n<a;++n){const r=n*R-s;for(let s=l;s<u;++s){const a=P*e+W*n+U*s,i=x*(I-1-r)+w*(S-1-(s*F-o))+v*t;for(let e=0;e<$;++e){c+=y[a+V*e]*b[i+e]}}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}};const Fw={kernelName:at,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s;Pb([r,a],"conv3d");const u=Tm.computeConv3DInfo(r.shape,a.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new Jr(u.outShape,r.dtype),v=n.data.get(r.dataId).values,k=n.data.get(a.dataId).values,I=w.values,S=Xs.computeStrides(r.shape),N=Xs.computeStrides(a.shape);for(let e=0;e<u.batchSize;++e){const t=e*S[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],r=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=r+e*d;if(n<0||n>=u.inDepth)continue;const a=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const r=a+e*N[1],o=i+s*S[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const a=r+e*N[2],i=o+t*u.inChannels;let l=a;for(let e=0;e<u.inChannels;++e){const t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*k[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const _w={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s;Pb([r,a],"conv3dBackpropFilterV2");const u=Xs.computeStrides(r.shape),c=Xs.computeStrides(a.shape),h=Tm.computeConv3DInfo(r.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new Jr(h.filterShape,"float32"),x=b.values,[w,v,k,I]=b.strides,S=n.data.get(a.dataId).values,[N,T,C,$]=c,E=n.data.get(r.dataId).values,[A,R,F,_]=u,D=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((D-e)/p)),n=Math.min(h.outDepth,(h.inDepth+D-e)/p),s=e*w;for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((M-r)/d)),i=Math.min(h.outHeight,(h.inHeight+M-r)/d),o=r*v+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*k+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*N;for(let m=t;m<n;++m){const t=(e+m*p-D)*R+h,n=m*T+y;for(let e=a;e<i;++e){const a=(r+e*d-M)*F+t,i=e*C+n;for(let e=l;e<u;++e){const t=e*$+i;g+=E[(s+e*f-O)*_+a+o]*S[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}};const Dw={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s;Pb([r],"conv3dBackpropInputV2");const u=Xs.computeStrides(r.shape),c=Xs.computeStrides(a.shape),h=Tm.computeConv3DInfo(l,a.shape,o,1,i),p=new Jr(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(r.dataId).values,[x,w,v,k]=u,I=n.data.get(a.dataId).values,[S,N,T,C]=c,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:_,inHeight:D,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:U}=h,V=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<_;++n){const s=n-V,r=Math.max(0,Math.ceil(s/P)),a=Math.min(L,(E+s)/P);for(let i=0;i<D;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/U)),$=Math.min(B,(R+h)/U);let F=0;for(let n=r;n<a;++n){const r=n*P-s;for(let s=l;s<u;++s){const a=s*W-o;for(let i=p;i<$;++i){const o=x*e+w*n+v*s+k*i,l=S*(E-1-r)+N*(A-1-a)+T*(R-1-(i*U-h))+C*t;for(let e=0;e<M;++e){F+=b[o+e]*I[l+e]}}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Ow=Ub(lt,(e=>Math.cos(e))),Mw={kernelName:lt,backendName:"cpu",kernelFunc:Ow},Lw=Ub(ut,(e=>Math.cosh(e))),zw={kernelName:ut,backendName:"cpu",kernelFunc:Lw};const Bw={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=r.shape,f=a.shape[0],[m,g]=o,y=el([f,m,g,d],"float32"),b=n.data.get(a.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(r.dataId).values,v=Xs.computeStrides(r.shape),k=Xs.computeStrides(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],r=b[t+2],a=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(r-n)*(h-1)/(m-1):0,f=g>1?(a-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+r)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}else if("bilinear"===l){const n=Math.floor(c),r=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+a)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*k[2]+t*k[1]+e*k[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let a=s+h*v[2]+n*v[1]+i*v[0];const u=w[a];a=s+m*v[2]+n*v[1]+i*v[0];const c=w[a];a=s+h*v[2]+r*v[1]+i*v[0];const p=w[a];a=s+m*v[2]+r*v[1]+i*v[0];const d=u+(c-u)*b,f=p+(w[a]-p)*b;a=s+l*k[2]+t*k[1]+e*k[0],y.values[a]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const r=g>1?s*(p-1)+n*f:.5*(s+a)*(p-1);if(r<0||r>p-1){for(let s=0;s<d;s++){const r=s+n*k[2]+t*k[1]+e*k[0];y.values[r]=u}continue}const o=Math.round(r),l=Math.round(c);for(let s=0;s<d;s++){const r=s+o*v[2]+l*v[1]+i*v[0],a=s+n*k[2]+t*k[1]+e*k[0];y.values[a]=w[r]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const Pw={kernelName:ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Pb(r,"cumprod");const l=Tm.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Ox({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Tm.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ga(u.dtype,"int32"),p=Xs.makeOnesTypedArray(Xs.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?1:d[n];else{const s=m(e,t-1);p[n]=i?d[s]*p[s]:d[n]*p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Ox({inputs:{x:g},backend:n,attrs:{perm:Tm.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const Ww={kernelName:ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;Pb(r,"cumsum");const l=Tm.getAxesPermutation([a],r.shape.length);let u=r;null!=l&&(u=Ox({inputs:{x:r},backend:n,attrs:{perm:l}}));const c=Tm.getInnerMostAxes(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ga(u.dtype,"int32"),p=Xs.makeZerosTypedArray(Xs.sizeFromShape(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Ox({inputs:{x:g},backend:n,attrs:{perm:Tm.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}};const Uw={kernelName:dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=cw(n.data.get(r.dataId).values,n.data.get(a.dataId).values,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,e)}if(2===r.shape.length){const e=hw(n.bufferSync(r),n.bufferSync(a),i,o);return n.makeTensorInfo(e.shape,a.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};const Vw={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s;Xs.assert("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*a,p=u*a,d=c/(a*a),f=n.data.get(r.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/a),s=t%a;for(let t=0;t<p;++t){const r=Math.floor(t/a),i=(s*a+t%a)*d;for(let t=0;t<d;++t){const s=t+i+c*(r+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],r.dtype,m)}};function Gw(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;Pb([r,a],"depthwiseConv2DNative");const c=Xs.computeStrides(r.shape),h=Xs.computeStrides(a.shape);let p=l;null==p&&(p=[1,1]),Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Tm.computeConv2DInfo(r.shape,a.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,v=d.outChannels/d.inChannels,k=new Jr(d.outShape,r.dtype),I=n.data.get(r.dataId).values,S=n.data.get(a.dataId).values,N=k.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*k.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*k.strides[1],r=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=r+e*g;if(n<0||n>=d.inHeight)continue;const a=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*k.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const r=a+e*h[1],o=i+s*d.inChannels;let l=t,u=r;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<v;++e)N[l+e]+=t*S[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}const Hw={kernelName:mt,backendName:"cpu",kernelFunc:Gw};const jw={kernelName:gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;Pb([r,a],"depthwiseConv2dNativeBackpropFilter");const h=Tm.computeConv2DInfo(r.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new Jr(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(r.dataId).values,v=new Jr(r.shape,r.dtype,w),k=n.data.get(a.dataId).values,I=new Jr(a.shape,a.dtype,k);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const r=Math.max(0,Math.ceil((y-s)/d)),a=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=r;e<a;++e){const n=s+e*d-y;u+=v.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const qw={kernelName:yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;Pb([r,a],"depthwiseConv2DNativeBackpropInput");const h=Xs.computeStrides(r.shape),p=Xs.computeStrides(a.shape),d=Tm.computeConv2DInfo(c,a.shape,i,o,l,u,!0),f=new Jr(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(r.dataId).values,[w,v,k]=h,I=n.data.get(a.dataId).values,[S,N,T]=p,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:_,outHeight:D,outWidth:O,strideHeight:M,strideWidth:L}=d,z=$-1-d.padInfo.top,B=E-1-d.padInfo.left,P=_/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,r=Math.max(0,Math.ceil(s/M)),a=Math.min(D,($+s)/M);for(let i=0;i<F;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=r;n<a;++n){const r=n*M-s;for(let s=l;s<u;++s){const a=w*e+v*n+k*s,i=S*($-1-r)+N*(E-1-(s*L-o))+T*t;for(let e=0;e<P;++e){c+=x[a+(t*P+e)]*I[i+e]}}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}};const Kw={kernelName:bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=Xs.sizeFromShape(s.shape),a=n.data.get(s.dataId).values,i=el([r,r],s.dtype),o=i.values;for(let e=0;e<a.length;e++)o[e*r+e]=a[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},Xw={kernelName:xt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r}=e,{strides:a,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,p=r.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:v,filterHeight:k,filterWidth:I,dilationHeight:S,dilationWidth:N,outShape:T}=Tm.computeDilation2DInfo(s.shape,r.shape,a,i,"NHWC",o),C=Xs.sizeFromShape(T),$=T.length,E=Xs.getArrayFromDType(s.dtype,C);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let a=0;a<b;++a){const i=a*v-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<k;++t){const a=n+t*S;if(a>=0&&a<f)for(let n=0;n<I;++n){const d=i+n*N;if(d>=0&&d<m){const i=Xs.locToIndex([e,a,d,o],c,Xs.computeStrides(s.shape)),f=Xs.locToIndex([t,n,o],p,Xs.computeStrides(r.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[Xs.locToIndex([e,t,a,o],$,Xs.computeStrides(T))]=l}}}return{dataId:l.write(Xs.toTypedArray(E,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},Yw={kernelName:vt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Xs.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Xs.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Tm.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Xs.assert(a.rank===N.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Xs.toNestedArray(N,u.data.get(a.dataId).values),C=Xs.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=t,l=n)}}}C[o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Xs.toTypedArray(C,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Zw={kernelName:wt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:r,dy:a}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=Xs.toNestedArray(s.shape,u.data.get(s.dataId).values),h=Xs.toNestedArray(r.shape,u.data.get(r.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:v,filterWidth:k,dilationHeight:I,dilationWidth:S,outShape:N}=Tm.computeDilation2DInfo(s.shape,r.shape,i,o,"NHWC",l);Xs.assert(a.rank===N.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${N.length}, but got ${a.rank}`));const T=Xs.toNestedArray(N,u.data.get(a.dataId).values),C=Xs.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const r=s*w-b.left;for(let a=0;a<m;++a){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=r<0?0:r;for(let t=0;t<v;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<k;++n){const u=r+n*S;if(u>=0&&u<f){const r=c[e][s][u][a]+h[t][n][a];r>i&&(i=r,o=s,l=u)}}}C[e][o][l][a]+=T[e][t][s][a]}}}return{dataId:u.write(Xs.toTypedArray(C,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Jw=Yb(((e,t)=>e*t)),Qw=yx(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),ev=gx(bn,Jw,Qw),tv={kernelName:bn,backendName:"cpu",kernelFunc:ev};function nv(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;let o;Pb(r,"sum"),o="bool"===r.dtype?fx({inputs:{x:r},backend:n,attrs:{dtype:"int32"}}):jb({inputs:{x:r},backend:n});const l=o.shape.length,u=Xs.parseAxisParam(a,o.shape),c=Tm.getAxesPermutation(u,l);let h=u,p=o;null!=c&&(p=Ox({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Tm.getInnerMostAxes(h.length,l)),Tm.assertAxesAreInnerMostDims("sum",h,p.shape.length);const[d,f]=Tm.computeOutAndReduceShapes(p.shape,h);let m=cx(n,d,Tm.upcastType(p.dtype,"int32"));const g=Xs.sizeFromShape(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=kx({inputs:{x:m},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const sv={kernelName:as,backendName:"cpu",kernelFunc:nv};const rv={kernelName:It,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Tm.decodeEinsumEquation(r,a.length);Tm.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Tm.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Tm.getEinsumPermutation(d,l[t]);let r;Tm.isIdentityPermutation(e)?r=a[t]:(r=Ox({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Xs.arraysEqual(r.shape,i)||(r=kx({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=ev({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=nv({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}};const av={kernelName:Nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:r}=t;Pb([s,r],"eluGrad");const a=new Float32Array(Xs.sizeFromShape(r.shape)),i=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];a[e]=t>=0?o[e]:o[e]*(t+1)}return n.makeTensorInfo(r.shape,"float32",a)}},iv=Yb(((e,t)=>e===t?1:0)),ov=gx(Ct,iv,null,"bool"),lv={kernelName:Ct,backendName:"cpu",kernelFunc:ov},uv=Tm.ERF_P,cv=Tm.ERF_A1,hv=Tm.ERF_A2,pv=Tm.ERF_A3,dv=Tm.ERF_A4,fv=Tm.ERF_A5,mv=Ub(Tt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+uv*n);return t*(1-((((fv*s+dv)*s+pv)*s+hv)*s+cv)*s*Math.exp(-n*n))})),gv={kernelName:Tt,backendName:"cpu",kernelFunc:mv},yv=Wb((e=>Math.exp(e))),bv=Vb($t,yv,"float32"),xv={kernelName:$t,backendName:"cpu",kernelFunc:bv};function wv(e){const{inputs:t,backend:n,attrs:s}=e,{input:r}=t,{dim:a}=s,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(Xs.assert(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),kx({inputs:{x:r},backend:n,attrs:{shape:o}})}const vv={kernelName:Et,backendName:"cpu",kernelFunc:wv},kv=Wb((e=>Math.expm1(e))),Iv=Vb(At,kv),Sv={kernelName:At,backendName:"cpu",kernelFunc:Iv},Nv=Yb(((e,t)=>e/t)),Tv=gx(kt,Nv),Cv={kernelName:kt,backendName:"cpu",kernelFunc:Tv},$v=Yb(((e,t)=>e-t)),Ev=yx(((e,t,n,s)=>({real:e-n,imag:t-s}))),Av=gx(vs,$v,Ev),Rv={kernelName:vs,backendName:"cpu",kernelFunc:Av};function Fv(e,t,n){const s=e.shape,r=s[0],a=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[r,a],c=Xs.sizeFromShape(u),h=Xs.getTypedArrayFromDType("float32",c),p=Xs.getTypedArrayFromDType("float32",c);for(let e=0;e<r;e++){const s=ow({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,a]}}),r=ow({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,a]}}),i=lx({inputs:{real:s,imag:r},backend:n}),{real:u,imag:c}=_v(i,t,n),d=Tm.mergeRealAndImagArrays(u,c);for(let t=0;t<a;t++){const n=Tm.getComplexWithIndex(d,t);h[e*a+t]=n.real,p[e*a+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=lx({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function _v(e,t,n){const s=Xs.sizeFromShape(e.shape),r=n.data.get(e.dataId),a=n.data.get(r.complexTensorInfos.real.dataId).values,i=n.data.get(r.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const r=Dv(a,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",r.real),t=n.makeTensorInfo(o,"float32",r.imag),a=n.makeTensorInfo([],"float32",Xs.createScalarValue(s,"float32")),i=jb({inputs:{x:a},backend:n}),l=Cv.kernelFunc({inputs:{a:e,b:a},backend:n}),u=Cv.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return r}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let a=0,i=0;for(let s=0;s<t;s++){const o=Tm.exponent(r*s,t,n),l=Tm.getComplexWithIndex(e,s);a+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(a/=t,i/=t),Tm.assignToTypedArray(s,a,i,r)}return s}(Tm.mergeRealAndImagArrays(a,i),s,t);return Tm.splitRealAndImagArrays(e)}var o}function Dv(e,t,n,s,r){if(1===n)return{real:e,imag:t};const a=Tm.mergeRealAndImagArrays(e,t),i=n/2,o=Tm.complexWithEvenIndex(a),l=o.real,u=o.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),p=r.makeTensorInfo(c,"float32",u),d=lx({inputs:{real:h,imag:p},backend:r}),f=Tm.complexWithOddIndex(a),m=f.real,g=f.imag,y=[m.length],b=r.makeTensorInfo(y,"float32",m),x=r.makeTensorInfo(y,"float32",g),w=lx({inputs:{real:b,imag:x},backend:r}),v=Dv(l,u,i,s,r),k=v.real,I=v.imag,S=[k.length],N=r.makeTensorInfo(S,"float32",k),T=r.makeTensorInfo(S,"float32",I),C=lx({inputs:{real:N,imag:T},backend:r}),$=Dv(m,g,i,s,r),E=$.real,A=$.imag,R=[E.length],F=r.makeTensorInfo(R,"float32",E),_=r.makeTensorInfo(R,"float32",A),D=lx({inputs:{real:F,imag:_},backend:r}),O=Tm.exponents(n,s),M=[O.real.length],L=r.makeTensorInfo(M,"float32",O.real),z=r.makeTensorInfo(M,"float32",O.imag),B=lx({inputs:{real:L,imag:z},backend:r}),P=ev({inputs:{a:B,b:D},backend:r}),W=wx({inputs:{a:C,b:P},backend:r}),U=Av({inputs:{a:C,b:P},backend:r}),V=hx({inputs:{input:W},backend:r}),G=hx({inputs:{input:U},backend:r}),H=Sw({inputs:{input:W},backend:r}),j=Sw({inputs:{input:U},backend:r}),q=Tw({inputs:[V,G],backend:r,attrs:{axis:0}}),K=Tw({inputs:[H,j],backend:r,attrs:{axis:0}}),X=r.data.get(q.dataId).values,Y=r.data.get(K.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(F),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(D),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(B),r.disposeIntermediateTensorInfo(P),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(V),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(j),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const Ov={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Xs.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=kx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Fv(i,!1,n),l=kx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function Mv(e){const{backend:t,attrs:n}=e,{shape:s,value:r,dtype:a}=n,i=a||Xs.inferDtype(r),o=Xs.getArrayFromDType(i,Xs.sizeFromShape(s));return function(e,t,n){e.fill(t)}(o,r),t.makeTensorInfo(s,i,o)}const Lv={kernelName:Ft,backendName:"cpu",kernelFunc:Mv};const zv={kernelName:_t,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,r=n,a=Xs.getTypedArrayFromDType(s.dtype,Xs.sizeFromShape(s.shape)),[i,o,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let r=0;r<u;r++){const i=Math.round(l-e-1),o=t+n+s+r;let h=c[o];if(i>=0&&i<l){h=c[t+n+i*u+r]}a[o]=h}}}}return{dataId:r.write(a,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Bv=Wb((e=>Math.floor(e))),Pv=Vb(Dt,Bv),Wv={kernelName:Dt,backendName:"cpu",kernelFunc:Pv},Uv=Yb(((e,t)=>Math.floor(e/t))),Vv=gx(Ot,Uv,null,"int32"),Gv={kernelName:Ot,backendName:"cpu",kernelFunc:Vv};const Hv={kernelName:Ms,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=$w({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=kx({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=wx({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=wx({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=kx({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=ox(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=ox(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}};const jv={kernelName:Ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Gw({inputs:{x:r,filter:a},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=wx({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=ox(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function qv(e,t,n,s,r,a,i,o,l){const u=el([s,a],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<r;t++){const a=e[n*r+t];c+=a*i[t],s.push(a)}if(c<0||c>=l/a)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<a;e++)u.values[n*a+e]=t.get(...t.indexToLoc(c*a+e))}return u}const Kv={kernelName:zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=Xs.sizeFromShape(s.shape),i=r.shape,o=i[i.length-1],[l,u,c,h]=Tm.prepareAndValidate(s,r);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=qv(n.data.get(r.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,a);return n.makeTensorInfo(l,s.dtype,p.values)}};function Xv(e,t,n){const s=el(n,e.dtype);for(let n=0;n<s.size;++n){const r=s.indexToLoc(n).slice(),a=r[0],i=r[2],o=t.locToIndex([a,i]);r[2]=t.values[o];const l=e.locToIndex(r);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const Yv={kernelName:Lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s;Pb([r,a],"gatherV2");const l=Xs.parseAxisParam(i,r.shape)[0],u=n.data.get(a.dataId).values,c=r.shape[l];for(let e=0;e<u.length;++e){const t=u[e];Xs.assert(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=Xs.sizeFromShape(a.shape),d=Tm.segment_util.collectGatherOpShapeInfo(r,a,l,h),f=kx({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=kx({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=Xv(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},Zv=Yb(((e,t)=>e>t?1:0)),Jv=gx(Bt,Zv,null,"bool"),Qv={kernelName:Bt,backendName:"cpu",kernelFunc:Jv},ek=Yb(((e,t)=>e>=t?1:0)),tk=gx(Pt,ek,null,"bool"),nk={kernelName:Pt,backendName:"cpu",kernelFunc:tk};const sk={kernelName:Ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,r=Xs.sizeFromShape(s.shape),a=s.shape[s.shape.length-1],i=kx({inputs:{x:s},backend:n,attrs:{shape:[r/a,a]}}),o=Fv(i,!0,n),l=kx({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},rk=Ub(Gt,(e=>Number.isFinite(e)?1:0),"bool"),ak={kernelName:Gt,backendName:"cpu",kernelFunc:rk},ik=Ub(Ht,(e=>Math.abs(e)===1/0?1:0),"bool"),ok={kernelName:Ht,backendName:"cpu",kernelFunc:ik},lk=Ub(jt,(e=>Number.isNaN(e)?1:0),"bool"),uk={kernelName:jt,backendName:"cpu",kernelFunc:lk},ck=Yb(((e,t)=>e<t?1:0)),hk=gx(Kt,ck,null,"bool"),pk={kernelName:Kt,backendName:"cpu",kernelFunc:hk},dk=Yb(((e,t)=>e<=t?1:0)),fk=gx(Xt,dk,null,"bool"),mk={kernelName:Xt,backendName:"cpu",kernelFunc:fk};function gk(e,t,n){const s=(t-e)/(n-1),r=Xs.makeZerosTypedArray(n,"float32");r[0]=e;for(let e=1;e<r.length;e++)r[e]=r[e-1]+s;return r}const yk={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=gk(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},bk=Wb((e=>Math.log(e))),xk=Vb(Zt,bk),wk={kernelName:Zt,backendName:"cpu",kernelFunc:xk},vk=Ub(Jt,(e=>Math.log1p(e))),kk={kernelName:Jt,backendName:"cpu",kernelFunc:vk},Ik=Yb(((e,t)=>e&&t)),Sk=gx(Qt,Ik,null,"bool"),Nk={kernelName:Qt,backendName:"cpu",kernelFunc:Sk},Tk=Ub(en,(e=>e?0:1),"bool"),Ck={kernelName:en,backendName:"cpu",kernelFunc:Tk},$k=Yb(((e,t)=>e||t)),Ek=gx(tn,$k,null,"bool"),Ak={kernelName:tn,backendName:"cpu",kernelFunc:Ek};const Rk={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s;Pb(r,"LRN");const u=r.shape[3],c=u-1,h=n.data.get(r.dataId).values,p=Xs.sizeFromShape(r.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-a);const s=e-t+Math.min(t+a,c);let r=0;for(;n<=s;n++){const e=h[n];r+=e*e}return r}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(r.shape,r.dtype,d)}};const Fk={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;Pb(i,"LRNGrad");const h=Xs.sizeFromShape(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(r.dataId).values,m=n.data.get(a.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let r=0;for(let e=n;e<s;e++)r+=Math.pow(f[e],2);r=u*r+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/r;e===t&&(n+=Math.pow(r,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,r.dtype,g)}};function _k(e,t,n,s){const r=Xs.getTypedArrayFromDType(s,Xs.sizeFromShape(n));for(let n=0;n<r.length;++n){const s=n*t;let a=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>a)&&(a=t)}r[n]=a}return r}function Dk(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=n;let l=r.shape;const u=l.length,c=Xs.parseAxisParam(a,l);let h=c;const p=Tm.getAxesPermutation(h,u);let d=o.data.get(r.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=Dx(d,l,r.dtype,p,e),h=Tm.getInnerMostAxes(h.length,u),l=e}Pb(r,"max"),Tm.assertAxesAreInnerMostDims("max",h,u);const[f,m]=Tm.computeOutAndReduceShapes(l,h),g=_k(d,Xs.sizeFromShape(m),f,r.dtype),y=o.write(g,f,r.dtype);let b=f;if(i){b=Tm.expandShapeToKeepDim(f,c)}return{dataId:y,shape:b,dtype:r.dtype}}const Ok={kernelName:rn,backendName:"cpu",kernelFunc:Dk},Mk=Yb(((e,t)=>Math.max(e,t))),Lk=gx(an,Mk),zk={kernelName:an,backendName:"cpu",kernelFunc:Lk};const Bk={kernelName:on,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;Pb(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tm.computePool2DInfo(r.shape,a,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&Xs.arraysEqual(u.inShape,u.outShape))c=jb({inputs:{x:r},backend:n});else{const e=n.data.get(r.dataId).values,t=Xs.computeStrides(r.shape),s=Jx(e,r.shape,r.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,r.dtype,s.values)}return c}};const Pk={kernelName:un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;Pb(r,"maxPool3d");const c=Tm.computePool3DInfo(r.shape,a,i,1,o,l,u),h=ew(n.data.get(r.dataId).values,r.shape,r.dtype,Xs.computeStrides(r.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}};const Wk={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;Pb([r,a],"maxPool3DGrad");const c=Tm.computePool3DInfo(a.shape,i,o,1,l,u),h=function(e,t){const n=el(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,a=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*r-d;let p=u;for(;p<0;)p+=o;const v=Math.min(t.inHeight,c+u);for(let r=0;r<t.outWidth;++r){const d=r*a-f;let k=d;for(;k<0;)k+=l;const I=Math.min(t.inWidth,h+d);let S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<v;s+=o){const r=s-u;for(let a=k;a<I;a+=l){const i=a-d,o=e.get(m,t,s,a,g);o>=S&&(S=o,N=n*c*h+r*c+i)}}}n.set(N,m,y,s,r,g)}}}return n}(n.bufferSync(a),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,v=b-1-c.padInfo.front,k=w-1-c.padInfo.left,I=x-1-c.padInfo.top,S=el(a.shape,"float32"),N=n.bufferSync(r);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let r=0;r<c.inWidth;++r){const a=n-v,i=s-I,o=r-k;let l=0;for(let n=0;n<b;n+=m){const s=(a+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let r=0;r<x;r+=g){const a=(i+r)/d;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,a,u,t)===n*x*w+r*w+i?1:0;if(0===p)continue;l+=N.get(e,s,a,u,t)*p}}}S.set(l,e,n,s,r,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}};const Uk={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;Pb([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Tm.computePool2DInfo(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=el(p.outShape,o.dtype,Qx(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,v=w-1-p.padInfo.left,k=x-1-p.padInfo.top,I=el(o.shape,"float32"),S=n.data.get(r.dataId).values,N=el(r.shape,"float32",S);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const r=n-k,a=s-v;let i=0;for(let n=0;n<x;n+=y){const s=(r+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let r=0;r<w;r+=b){const o=(a+r)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+r?1:0;if(0===l)continue;i+=N.get(e,s,o,t)*l}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const Vk={kernelName:hn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Pb(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Tm.computePool2DInfo(s.shape,r,a,[1,1],i),[h,p]=function(e,t,n,s,r){const a=Jx(e,0,n,Xs.computeStrides(t),r,"max"),i=Qx(e,t,n,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}};const Gk={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=Xs.parseAxisParam(a,r.shape),l=Tm.computeOutAndReduceShapes(r.shape,o)[1],u=Xs.sizeFromShape(l),c=[],h=n.makeTensorInfo([],"float32",new Float32Array([u]));c.push(h);const p=fx({inputs:{x:r},backend:n,attrs:{dtype:"float32"}});c.push(p);const d=Tv({inputs:{a:p,b:h},backend:n});c.push(d);const f=nv({inputs:{x:d},backend:n,attrs:{axis:a,keepDims:i}});return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};const Hk={kernelName:dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Pb(r,"min");const o=Xs.parseAxisParam(a,r.shape);let l=o;const u=Tm.getAxesPermutation(l,r.shape.length);let c=r;null!=u&&(c=Ox({inputs:{x:r},backend:n,attrs:{perm:u}}),l=Tm.getInnerMostAxes(l.length,r.shape.length)),Tm.assertAxesAreInnerMostDims("min",l,c.shape.length);const[h,p]=Tm.computeOutAndReduceShapes(c.shape,l),d=Xs.sizeFromShape(p),f=Xs.makeZerosTypedArray(Xs.sizeFromShape(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=kx({inputs:{x:g},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},jk=Yb(((e,t)=>Math.min(e,t))),qk=gx(fn,jk),Kk={kernelName:fn,backendName:"cpu",kernelFunc:qk};const Xk={kernelName:mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,mode:i}=s;Pb(r,"mirrorPad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=a.map(((e,t)=>e[0]+r.shape[t])),c="reflect"===i?0:1,h=n.data.get(r.dataId).values,p=r.shape.length,d=Xs.computeStrides(r.shape),f=Xs.sizeFromShape(o),m=o.length,g=Xs.computeStrides(o),y=Xs.getTypedArrayFromDType(r.dtype,f);for(let e=0;e<f;e++){let t=Xs.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=Xs.locToIndex(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,r.dtype),shape:o,dtype:r.dtype}}},Yk=Yb(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),Zk=gx(gn,Yk),Jk={kernelName:gn,backendName:"cpu",kernelFunc:Zk};function Qk(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=r.shape.length;let o=a;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=Xs.parseAxisParam([o],r.shape),u=Dk({inputs:{x:r},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Tm.expandShapeToKeepDim(u.shape,l),h=kx({inputs:{x:u},backend:n,attrs:{shape:c}}),p=Av({inputs:{a:r,b:h},backend:n}),d=bv({inputs:{x:p},backend:n}),f=nv({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=kx({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Tv({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const eI={kernelName:ls,backendName:"cpu",kernelFunc:Qk};const tI={kernelName:yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s;Pb(r,"multinomial");const l=o?r:Qk({inputs:{logits:r},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,a],d=Xs.makeZerosTypedArray(Xs.sizeFromShape(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=ed.alea(i.toString()),r=e*a;for(let e=0;e<a;++e){const t=s();d[r+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[r+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function nI(e,t,n){const s=Xs.createScalarValue(-1,n);return Jw([],t,s,e,n)}const sI={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;Pb(s,"neg");const r=n.data.get(s.dataId).values,[a,i]=nI(r,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,a)}},rI=jg.nonMaxSuppressionV3Impl;const aI={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;Pb(r,"NonMaxSuppression");const u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,{selectedIndices:h}=rI(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},iI=jg.nonMaxSuppressionV4Impl;const oI={kernelName:kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;Pb(r,"NonMaxSuppressionPadded");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,{selectedIndices:p,validOutputs:d}=iI(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},lI=jg.nonMaxSuppressionV5Impl;const uI={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;Pb(r,"NonMaxSuppressionWithScore");const c=n.data.get(r.dataId).values,h=n.data.get(a.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=lI(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},cI=Yb(((e,t)=>e!==t?1:0)),hI=gx(wn,cI,null,"bool"),pI={kernelName:wn,backendName:"cpu",kernelFunc:hI};const dI={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s;Pb(r,"oneHot");const u=Xs.sizeFromShape(r.shape),c=new Float32Array(u*i);c.fill(l);const h=n.data.get(r.dataId).values;for(let e=0;e<u;++e)h[e]>=0&&h[e]<i&&(c[e*i+h[e]]=o);return n.makeTensorInfo([...r.shape,i],a,c)}};function fI(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=hx({inputs:{input:s},backend:n}),t=fI({inputs:{x:e},backend:n}),r=Sw({inputs:{input:s},backend:n}),a=fI({inputs:{x:r},backend:n}),i=lx({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return Mv({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const mI={kernelName:Rs,backendName:"cpu",kernelFunc:fI};const gI={kernelName:Sn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const t=hx({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=Sw({inputs:{input:r},backend:s}),i=fI({inputs:{x:a},backend:s}),o=lx({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return Mv({backend:s,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function yI(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return wv({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Xs.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Xs.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=Tw({inputs:t.map((e=>{const t=wv({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const bI={kernelName:Tn,backendName:"cpu",kernelFunc:yI};const xI={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;Pb(r,"pad");const o=a.map(((e,t)=>e[0]+r.shape[t]+e[1])),l=a.map((e=>e[0])),u=n.data.get(r.dataId).values,c=Xs.sizeFromShape(r.shape),h=r.shape.length,p=Xs.computeStrides(r.shape),d=Xs.sizeFromShape(o),f=o.length,m=Xs.computeStrides(o),g=Xs.getTypedArrayFromDType(r.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++){const t=Xs.indexToLoc(e,h,p).map(((e,t)=>e+l[t]));g[Xs.locToIndex(t,f,m)]=u[e]}return{dataId:n.write(g,o,r.dtype),shape:o,dtype:r.dtype}}},wI=Yb(((e,t)=>Math.pow(e,t))),vI=gx($n,wI),kI={kernelName:$n,backendName:"cpu",kernelFunc:vI};function II(e,t,n,s){const[r,a]=Tm.computeOutAndReduceShapes(e,s),i=ga(t,"int32"),o=Xs.makeZerosTypedArray(Xs.sizeFromShape(r),i),l=Xs.sizeFromShape(a);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:r,outDtype:i}}const SI={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;Pb(r,"prod");const o=r.shape.length,l=Xs.parseAxisParam(a,r.shape),u=Tm.getAxesPermutation(l,o);let c=l,h=r;const p=[];null!=u&&(h=Ox({inputs:{x:r},backend:n,attrs:{perm:u}}),p.push(h),c=Tm.getInnerMostAxes(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=II(h.shape,h.dtype,d,c);let y=m;return i&&(y=Tm.expandShapeToKeepDim(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function NI(e,t,n,s){const r=[];let a=0;const i=t.length-1+n.length,o=new Array(i).fill(null).map((()=>[0]));!function(e,t){for(let n=0;n<e.length;++n){const s=e[n],r=n===e.length-1?t:e[n+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let e=1;e<s.length;++e)if(s[e-1]>s[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,s);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];const n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let s=0;s<e.length;++s){let i=e[s],l=e[s]+1;for(let e=0;e<n.length;++e){const s=n[e],r=e+t.length-1;if(r>=0){const e=o[r],t=e[e.length-1]-s[i];for(let e=i;e<l;++e)o[r].push(s[e+1]+t)}i=s[i],l=s[l]}l!==i&&(r.push([i,l]),a+=l-i)}return{outSplits:o,valueSlices:r,numValues:a}}function TI(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let s=t;s<e.length;s++)n[t-1]*=e[s];return n}function CI(e,t,n,s,r){const a=t.slice();a[0]=r;const i=Xs.getArrayFromDType(n,Xs.sizeFromShape(a)),o=e.length;return function(e,t,n,s,r,a){const i=TI(t,2)[1],o=TI(a,2)[1];let l=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<s;++t)r[l*o+t]=e[n*i+t];++l}}(e,t,s,0===o?0:o/t[0],i,a),[i,a]}function $I(e,t,n,s,r,a,i,o){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach(((e,s)=>{if(e<0||e>=n){const r=Xs.indexToLoc(s,t.length,Xs.computeStrides(t)).join(",");throw new Error(`indices[${r}] = ${e} is not in [0, ${n})`)}}))}(a,i,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const l=s[0],{outSplits:u,valueSlices:c,numValues:h}=NI(a,i,e,l),p=function(e){const t=[];for(let n=0;n<e.length;++n){const s=e[n].length,r=Xs.getArrayFromDType("int32",s);t.push(r),e[n].forEach(((e,t)=>r[t]=e))}return t}(u),d=CI(n,s,r,c,h);return[p,d[0],d[1]]}const EI={kernelName:Rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.data.get(e.dataId).values)),u=r.map((e=>e.shape)),c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,[p,d,f]=$I(l,u,c,a.shape,a.dtype,h,i.shape),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}},AI=2147483647;function RI(e,t,n,s,r,a,i){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const o=0===t.length,l=0===r.length,u=0===i.length,c=[];o||c.push(t[0]),l||c.push(r[0]),u||c.push(i[0]);for(let e=1;e<c.length;++e)if(c[e]!==c[e-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],p=Xs.getArrayFromDType("int32",h+1);p[0]=0;for(let t=0;t<h;++t){const n=o?e[0]:e[t],r=l?s[0]:s[t],i=u?a[0]:a[t];if(0===i)throw new Error("Requires delta != 0");let c;if(i>0&&r<n||i<0&&r>n)c=0;else if(c=Math.ceil(Math.abs((r-n)/i)),c>AI)throw new Error("Requires ((limit - start) / delta) <= 2147483647");p[t+1]=p[t]+c}const d=p[h],f=Xs.getArrayFromDType(n,d);let m=0;for(let t=0;t<h;++t){const n=p[t+1]-p[t];let s=o?e[0]:e[t];const r=u?a[0]:a[t];for(let e=0;e<n;++e)f[m++]=s,s+=r}return[p,f]}const FI={kernelName:Fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=RI(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};var _I=Tm.RowPartitionType;class DI{constructor(e,t,n,s,r,a,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=s,this.valuesDType=r,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=Tm.getRowPartitionTypesHelper(u),this.raggedRank=Tm.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===_I.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===_I.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case _I.VALUE_ROWIDS:return DI.getMaxWidthValueRowID(t);case _I.ROW_SPLITS:return DI.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${_I[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let s=0;s<t-1;++s){const t=e[s+1]-e[s];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,s=e[0],r=0;for(let a=1;a<t;++a){const t=e[a];t!==s&&(s=t,r=Math.max(a-n,r),n=a)}return Math.max(t-n,r)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return MI(e,n)}calculateOutputSize(e){const t=this.valuesShape,n=this.defaultValueShape;Tm.validateDefaultValueShape(n,t);const s=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=Tm.combineRaggedTensorToTensorShapes(this.raggedRank,s,t);r[0]<0&&(r[0]=e);for(let e=1;e<=this.raggedRank;++e)r[e]<0&&(r[e]=this.getMaxWidth(e));return r}calculateFirstParentOutputIndex(e,t,n){const s=Math.min(e,n),r=[];let a=0;for(let e=0;e<s;++e,a+=t)r.push(a);for(let t=s;t<e;++t)r.push(-1);return Xs.assert(r.length===e,(()=>"Final length of result must be equal to firstDimension.")),r}calculateOutputIndexRowSplit(e,t,n,s){const r=e.length,a=[];for(let i=0;i<r-1;++i){const r=e[i+1]-e[i];let o=Math.min(s,r),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)a.push(l),l+=n;for(let e=0;e<r-o;++e)a.push(-1)}if(r>0&&a.length!==e[r-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(e,t,n,s){const r=e.length,a=[];if(0===r)return[];let i=0,o=e[0];if(o>=t.length)throw new Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];a.push(l);for(let u=1;u<r;++u){const r=e[u];if(r===o)l>=0&&(++i,i<s?l+=n:l=-1);else{if(i=0,o=r,r>=t.length)throw new Error(`Got nextValueRowId=${r} which is not less than ${t.length}`);l=t[r]}a.push(l)}if(a.length!==e.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(e,t,n,s){const r=this.getRowPartitionTensor(e),a=this.getRowPartitionTypeByDimension(e);switch(a){case _I.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(r,t,n,s);case _I.ROW_SPLITS:if(r.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${r.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(r,t,n,s);default:throw new Error(`Unsupported partition type: ${_I[a]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case _I.FIRST_DIM_SIZE:return e[0];case _I.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case _I.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${_I[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const s=MI(t,!1),r=Xs.getArrayFromDType(this.valuesDType,Xs.sizeFromShape(s));if(n[0]*t[0]>0){let a=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e){a=this.calculateOutputIndex(e-1,a,n[e],t[e])}this.setOutput(this.raggedRank,a,r,s)}return[s,r]}setOutput(e,t,n,s){if(0===n.length)return;const r=this.values,a=n;let i=s.slice();i=i.slice(e+1);const o=Xs.sizeFromShape(i),l=t.length;let u=this.defaultValue;if(u.length!==o&&1!==u.length){const e=this.defaultValueShape;il((()=>{const t=bl(u,e),n=ac(t,i);u=n.dataSync()}))}let c=0,h=0,p=0;for(let e=0;e<=l;++e){let s=e<l?t[e]:-1;if(s!==p){if(h<p){const e=r.subarray(c*o);OI(a.subarray(h*o),e,(p-h)*o)}if(e>=l){const e=n.length;s=Math.floor(e/o)}if(s>p)if(1===this.defaultValue.length)a.subarray(p*o,s*o).fill(this.defaultValue[0]),p=s;else for(;s>p;){OI(a.slice(p*o),u,o),++p}s<0?(c=e+1,h=p):(c=e,h=p,p=h+1)}else++p}}}function OI(e,t,n){for(let s=0;s<n;s++)e[s]=t[s]}function MI(e,t){const n=[];for(let s of e){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}n.push(s)}return n}function LI(e,t,n,s,r,a,i,o,l,u){return new DI(e,t,n,s,r,a,i,o,l,u).compute()}const zI={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.data.get(r.dataId).values,c=n.data.get(a.dataId).values,h=n.data.get(i.dataId).values,p=o.map((e=>n.data.get(e.dataId).values)),d=o.map((e=>e.shape)),[f,m]=LI(u,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,a.dtype,m)}};function BI(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return Xs.makeZerosTypedArray(0,s);const r=Math.abs(Math.ceil((t-e)/n)),a=Xs.makeZerosTypedArray(r,s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const PI={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,dtype:a,step:i}=n,o=BI(s,r,i,a);return t.makeTensorInfo([o.length],a,o)}},WI=Ub(Mn,(e=>1/e)),UI={kernelName:Mn,backendName:"cpu",kernelFunc:WI};const VI={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Pb(r,"resizeBilinear");const l=Xs.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(Xs.sizeFromShape([h,u,c,f])),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c];let x=0;const w=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),r=n-s,a=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+a*l[1];for(let e=0;e<c;e++){let t;t=i?v*(e+.5)-.5:v*e;const n=Math.max(0,Math.floor(t)),s=t-n,a=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+a*l[2],y=u+a*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],a=t+(m[p+e]-t)*s,i=a+(n+(m[y+e]-n)*s-a)*r;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}};const GI={kernelName:Un,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Pb([a,r],"resizeBilinearGrad");const o=Xs.computeStrides(r.shape),[l,u,c,h]=r.shape,[,p,d]=a.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(a.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),r=Math.min(Math.ceil(n),u-1),a=t+s*o[1],i=t+r*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),r=t-n,u=1-r,d=a+n*o[2],m=a+s*o[2],g=i+n*o[2],y=i+s*o[2],v=p*u,k=p*r,I=l*u,S=l*r;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*v,f[m+e]+=t*k,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}};const HI={kernelName:Bn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s;Pb(r,"resizeNearestNeighbor");const l=Xs.computeStrides(r.shape),[u,c]=o,[h,p,d,f]=r.shape,m=n.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[a&&u>1?p-1:p,a&&c>1?d-1:d],b=[a&&u>1?u-1:u,a&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let v=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,a?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const r=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,a?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=r+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[v++]=t}}}}return n.makeTensorInfo([h,u,c,f],r.dtype,g)}};const jI={kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s;Pb([a,r],"resizeNearestNeighborGrad");const o=Xs.computeStrides(r.shape),l=Xs.computeStrides(a.shape),[u,c,h,p]=r.shape,[,d,f]=a.shape,m=new Float32Array(u*c*h*p),g=n.data.get(a.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],v=1/x,k=1/w,I=2*Math.ceil(v)+2,S=2*Math.ceil(k)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*v),r=Math.floor(s-I/2);for(let s=0;s<h;s++){const a=n+s*o[2],u=Math.floor(s*k),y=Math.floor(u-S/2);for(let n=0;n<p;n++){let o=0;for(let a=0;a<I;a++){const u=a+r;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<S;e++){const t=e+y;if(t<0||t>=f)continue;const r=p+t*l[2],a=t*w;s===Math.min(h-1,i?Math.round(a):Math.floor(a))&&(o+=g[r+n])}}m[a+n]=o}}}}return n.makeTensorInfo(r.shape,r.dtype,m)}};const qI={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s;Pb(r,"reverse");const i=r.shape.length,o=Xs.parseAxisParam(a,r.shape);if(0===i)return jb({inputs:{x:r},backend:n});const l=new Jr(r.shape,r.dtype),u=n.bufferSync(r);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=r.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},KI={kernelName:Ds,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=Xs.getTypedArrayFromDType(s.dtype,Xs.sizeFromShape(s.shape)),[u,c,h,p]=s.shape,[d,f]=Tm.getImageCenter(i,c,h),m=Math.sin(r),g=Math.cos(r),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const r=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,v=(b-d)*m+(x-f)*g;w=Math.round(w+d),v=Math.round(v+f);let k=a;if("number"!=typeof a&&(k=3===i?255:a[i]),w>=0&&w<h&&v>=0&&v<c){k=y[t+v*(h*p)+w*p+i]}l[t+n+r+i]=k}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},XI=Ub(Hn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),YI={kernelName:Hn,backendName:"cpu",kernelFunc:XI},ZI=Wb((e=>1/Math.sqrt(e))),JI=Vb(jn,ZI),QI={kernelName:jn,backendName:"cpu",kernelFunc:JI};function eS(e,t,n,s,r,a,i,o,l,u){const c=[s/r,r],h=e.values,p=t.values;if(0===s)return el(n,t.dtype);const d=l instanceof Jr?l:el(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<a;e++){const a=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];a.push(n),l+=n*o[t]}if(l<0||l>=s/r)throw new Error(`Invalid indices: ${a} does not index into ${n}`);for(let n=0;n<r;n++)u?d.values[l*r+n]+=p[e*r+n]:d.values[l*r+n]=0===t.rank?p[0]:p[e*r+n]}return d}const tS={kernelName:qn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tm.calculateShapes(a,r,i),p=eS(n.bufferSync(r),n.bufferSync(a),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function nS(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<t?n=r+1:s=r;return s}function sS(e,t){let n=0,s=e.length,r=0;for(;n<s;)r=Math.floor((n+s)/2),e[r]<=t?n=r+1:s=r;return s}const rS={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=function(e,t,n,s,r,a){const i=Xs.getArrayFromDType("int32",n*r);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*r;for(let e=0;e<r;++e)i[l+e]="left"===a?nS(n,t[e+l]):sS(n,t[e+l])}return i}(n.data.get(r.dataId).values,n.data.get(a.dataId).values,r.shape[0],r.shape[1],a.shape[1],i);return n.makeTensorInfo(a.shape,"int32",o)}};const aS={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t;Pb([s,r,a],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=ga(r.dtype,a.dtype),h=Xs.makeZerosTypedArray(Xs.sizeFromShape(r.shape),c);let p=0;const d=0===i||i>1||1===r.shape.length?1:Xs.sizeFromShape(r.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(r.shape,c,h)}},iS=Tm.SELU_SCALEALPHA,oS=Tm.SELU_SCALE,lS=Ub(Zn,(e=>e>=0?oS*e:iS*(Math.exp(e)-1))),uS={kernelName:Zn,backendName:"cpu",kernelFunc:lS},cS=Ub(ts,(e=>e<0?-1:e>0?1:0)),hS={kernelName:ts,backendName:"cpu",kernelFunc:cS},pS=Ub(Qn,(e=>Math.sin(e))),dS={kernelName:Qn,backendName:"cpu",kernelFunc:pS},fS=Ub(es,(e=>Math.sinh(e))),mS={kernelName:es,backendName:"cpu",kernelFunc:fS},gS=Math.log(1.1920928955078125e-7)+2,yS=Ub(ss,(e=>{const t=e>-gS,n=e<gS,s=Math.exp(e);let r;return r=n?s:t?e:Math.log(1+s),r})),bS={kernelName:ss,backendName:"cpu",kernelFunc:yS};const xS={kernelName:is,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Pb([r],"spaceToBatchND");const o=Xs.sizeFromShape(a),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=xI.kernelFunc({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),c=Tm.getReshaped(u.shape,a,o,!1),h=Tm.getPermuted(c.length,a.length,!1),p=Tm.getReshapedPermuted(u.shape,a,o,!1),d=kx({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Ox({inputs:{x:d},backend:n,attrs:{perm:h}}),m=kx({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function wS(e,t,n,s,r,a,i){const o=t[0],l=a[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Tm.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));return[Xs.getArrayFromDType(n,0),[0,h],Xs.getArrayFromDType(r,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(Tm.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw new Error(Tm.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],a=Xs.getArrayFromDType(n,t*h),p=Xs.getArrayFromDType(r,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],r=d[n],i=(0===n?0:f[n-1])+r;d[n]++;for(let n=0;n<h;++n)a[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e){if(0===d[e]){const t=0===e?0:f[e-1];a[t*h+0]=e;for(let e=1;e<h;++e)a[t*h+e]=0;p[t]=i}}return[a,[t,h],p,u,c]}}const vS={kernelName:us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=wS(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function kS(e,t,n,s,r){const a=Xs.sizeFromShape(s),i=t[0],o=r.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=r[e];if(-1===t){if(-1!==c)throw new Error(Tm.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Tm.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error(Tm.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(a/u);if(u*e!==a)throw new Error(Tm.getSparseReshapeInputOutputMultipleErrorMessage(s,l));l[c]=e}if(Xs.sizeFromShape(l)!==a)throw new Error(Tm.getSparseReshapeInputOutputMismatchErrorMessage(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=Xs.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*p[s];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],l]}const IS={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.data.get(r.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(a.dataId).values),[u,c,h]=kS(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};function SS(e,t,n,s,r,a=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?r[o-1]+1:0;if(c<0)throw new Error(Tm.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=c;const p=h.reduce(((e,t)=>e*t),1),d=Xs.getArrayFromDType(n,p);if(0===o)return c>0&&d.fill(i),[d,h];if(c<=0)throw new Error(Tm.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=r[f];for(;;){let t=0;if(m<o){if(t=r[m],y===t){++m;continue}if(y>=t)throw new Error(Tm.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=c)throw new Error(Tm.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,c));y>g&&d.fill(i,g*u,y*u);for(let t=f;t<m;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(Tm.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,s[t],l[0]));for(let t=0;t<u;t++)d[y*u+t]+=e[n*u+t]}if(a)for(let e=0;e<u;e++)d[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<c&&d.fill(i,g*u,c*u),[d,h]}const NS={kernelName:hs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=SS(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const TS={kernelName:ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${a.shape}`);if(r.shape[0]!==a.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,[u,c]=SS(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const CS={kernelName:ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Tm.calculateShapes(a,r,o),d=!1,f=n.bufferSync(r);let m;switch(a.dtype){case"bool":m=eS(f,n.bufferSync(a),o,p,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),d);break;case"float32":m=eS(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"int32":m=eS(f,n.bufferSync(a),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"string":m=eS(f,n.bufferSync(a),o,p,c,u,l,h,Xs.decodeString(n.data.get(i.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${a.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}};const $S={kernelName:os,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Xs.parseAxisParam(i,r.shape)[0],l=Tm.prepareSplitSize(r,a,o),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=ow({inputs:{x:r},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},ES=Wb((e=>Math.sqrt(e))),AS=Ub(rs,(e=>Math.sqrt(e))),RS={kernelName:rs,backendName:"cpu",kernelFunc:AS},FS={kernelName:ms,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;Pb(n,"square");const r=s.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){const t=r[e];a[e]=t*t}return{dataId:s.write(a,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},_S=Yb(((e,t)=>{const n=e-t;return n*n})),DS=gx(fs,_S),OS={kernelName:fs,backendName:"cpu",kernelFunc:DS},MS=Wb(((e,t)=>{const{pattern:n,replaceGlobal:s,rewrite:r}=t;return e.replace(new RegExp(n,s?"g":""),r)})),LS=Vb(gs,MS),zS={kernelName:gs,backendName:"cpu",kernelFunc:LS},BS=Ub(Fs,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),PS={kernelName:Fs,backendName:"cpu",kernelFunc:BS};function WS(e,t,n,s){const r=el(e,t.dtype);for(let e=0;e<r.size;e++){const a=r.indexToLoc(e),i=new Array(a.length);for(let e=0;e<i.length;e++)i[e]=a[e]*n[e]+s[e];r.set(t.get(...i),...a)}return r}const US={kernelName:ys,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;Pb(r,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=lm.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=kx({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Xs.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=lm.computeOutShape(b,x,w),t=ow({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=kx({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=WS(d,n.bufferSync(r),w,b);v=n.makeTensorInfo(f,e.dtype,e.values)}return v}};class VS{constructor(e,t,n,s,r,a){this.separator=Xs.encodeString(e),this.nGramWidths=t,this.leftPad=Xs.encodeString(n),this.rightPad=Xs.encodeString(s),this.padWidth=r,this.preserveShort=a}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,r,a){for(let i=0;i<r;++i){const o=this.getPadWidth(a),l=Math.max(0,o-i),u=Math.max(0,o-(r-(i+1))),c=a-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length;p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let r=1;r<s;++r){let s=t[r]>=e;if(s=s&&t[r]<=n,!s)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const r=s-1,a=Xs.getArrayFromDType("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=r;++e)a[e]=0;return[e,a]}a[0]=0;for(let e=1;e<=r;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),a[e]=a[e-1]+s}const i=new Array(a[r]);for(let n=0;n<r;++n){const s=t[n];let r=a[n];if(this.nGramWidths.forEach((a=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,a);this.createNGrams(e,s,i,r,l,a),r+=l})),this.preserveShort&&r===a[n]){const a=t[n+1]-t[n];if(0===a)continue;const o=a+2*this.padWidth,l=1;this.createNGrams(e,s,i,r,l,o)}}return[i,a]}}function GS(e,t,n,s,r,a,i,o){return new VS(n,s,r,a,i,o).compute(e,t)}const HS={kernelName:bs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=GS(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function jS(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const r=t[0];let a=e.indexOf(r);for(;-1!==a;){const t=e.subarray(0,a);n&&0===t.length||s.push(t),a=(e=e.subarray(a+1)).indexOf(r)}return void(n&&0===e.length||s.push(e))}let r=0;for(let a=0;a<e.length+1;a++)if(a===e.length||-1!==t.indexOf(e[a])){const t=e.subarray(r,a);n&&0===t.length||s.push(t),r=a+1}}function qS(e,t,n){const s=e.length,r=[];let a=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=r.length;jS(e[l],t,n,r);const u=r.length-s;o[l]=u,a+=u,i=Math.max(i,u)}const l=Xs.getArrayFromDType("int32",2*a),u=new Array(a),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=r[h],++h;return[l,u,c]}const KS={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(a.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=qS(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function XS(e,t){const n=Xs.getArrayFromDType("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Xs.fingerPrint64(e[s]).modulo(t).getLowBitsUnsigned();return n}const YS={kernelName:ws,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=XS(n.data.get(a.dataId).values,r);return n.makeTensorInfo(a.shape,"int32",i)}},ZS=Ub(ks,(e=>Math.tan(e))),JS={kernelName:ks,backendName:"cpu",kernelFunc:ZS},QS=Ub(Is,(e=>Math.tanh(e)));function eN(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=el(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const a=e.locToIndex(r);s.values[t]=e.values[a]}return s}const tN=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function nN(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const r=s-n+1,a=t-n+1,i=Math.log(r),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(r-o)/r)*Math.sign(a-r/2);nN(e,t,Math.max(n,Math.floor(t-a*o/r+l)),Math.min(s,Math.floor(t+(r-a)*o/r+l)))}const r=e[t];let a=n,i=s;for(Xs.swap(e,n,t),tN(e[s],r)>0&&Xs.swap(e,n,s);a<i;){for(Xs.swap(e,a,i),a++,i--;tN(e[a],r)<0;)a+=1;for(;tN(e[i],r)>0;)i-=1}0===tN(e[n],r)?Xs.swap(e,n,i):(i+=1,Xs.swap(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function sN(e,t,n,s,r){const a=t[t.length-1],[i,o]=[e.length/a,a],l=Xs.getTypedArrayFromDType(n,i*s),u=Xs.getTypedArrayFromDType("int32",i*s);for(let t=0;t<i;t++){const n=t*o,a=e.subarray(n,n+o);let i=new Array(a.length);a.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(nN(i,s),i=i.slice(0,s)),r&&i.sort(tN);const c=t*s,h=l.subarray(c,c+s),p=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[el(c,n,l),el(c,"int32",u)]}const rN={kernelName:Ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=Xs.computeStrides(r.shape),b=y[0],x=y[1],w=y[2],v=Xs.computeStrides(g),k=v[0],I=v[1],S=v[2],N=Xs.getTypedArrayFromDType(r.dtype,Xs.sizeFromShape(g));N.fill(l);const T=s.data.get(r.dataId).values,C=s.data.get(a.dataId).values;for(let e=0;e<c;++e){const t=1===a.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let r=0;r<d;++r){let a;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=aN(c,p,o),m=aN(d,h,o);switch(i){case"nearest":a=oN(T,h,p,b,x,w,e,m,f,r,l);break;case"bilinear":a=lN(T,h,p,b,x,w,e,m,f,r,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[e*k+n*I+s*S+r]=a}return s.makeTensorInfo(g,r.dtype,N)}return{dataId:s.write(N,g,r.dtype),shape:r.shape,dtype:r.dtype}}};function aN(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return Xs.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return Xs.clamp(0,n,t-1)}(e,t);case"nearest":return function(e,t){return Xs.clamp(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function iN(e,t,n,s,r,a,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*r+l*a+u]:c}function oN(e,t,n,s,r,a,i,o,l,u,c){return iN(e,t,n,s,r,a,i,Math.round(o),Math.round(l),u,c)}function lN(e,t,n,s,r,a,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*iN(e,t,n,s,r,a,i,h,p,u,c)+(l-p)*iN(e,t,n,s,r,a,i,h,f,u,c))+(o-h)*((f-l)*iN(e,t,n,s,r,a,i,d,p,u,c)+(l-p)*iN(e,t,n,s,r,a,i,d,f,u,c))}function uN(e,t,n,s){const r=Xs.parseAxisParam(t,n)[0],a=[1,n[0],1];for(let e=0;e<r;e++)a[0]*=n[e];a[1]=n[r];for(let e=r+1;e<n.length;e++)a[2]*=n[e];const i=new Map,o=new Int32Array(n[r]),l=new Jr(a,s,e),u=[],c=1===a[0]&&1===a[2];for(let t=0;t<n[r];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)e.push(l.get(n,t,s));n=e.join(",")}const s=i.get(n);if(null!=s)o[t]=s;else{const e=i.size;i.set(n,e),o[t]=e,u.push(t)}}const h=a.slice();h[1]=i.size;const p=new Jr(h,s);u.forEach(((e,t)=>{for(let n=0;n<a[0];n++)for(let s=0;s<a[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[r]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const cN=[Tx,$x,Ax,Fx,vx,_x,Lx,zx,Bx,Px,Ux,Gx,jx,Xx,Zx,tw,nw,sw,rw,Nx,aw,uw,pw,mw,gw,mx,xw,vw,ux,kw,Cw,Ew,Aw,Rw,Fw,_w,Dw,Mw,zw,Bw,Pw,Ww,Uw,Vw,Hw,jw,qw,Kw,Xw,Yw,Zw,rv,Hb,av,lv,gv,xv,vv,Sv,Ov,Lv,zv,Wv,Gv,Hv,jv,Kv,Yv,Qv,nk,qb,sk,Nw,ak,ok,uk,Xb,pk,mk,yk,wk,kk,Nk,Ck,Ak,Rk,Fk,Ok,zk,Bk,Pk,Wk,Uk,Vk,Gk,Hk,Kk,Xk,Jk,tI,tv,sI,aI,oI,uI,pI,dI,gI,bI,xI,kI,Qb,SI,EI,FI,zI,PI,px,Cv,UI,tx,sx,Ix,VI,GI,HI,jI,qI,KI,YI,QI,tS,rS,aS,uS,ix,hS,dS,mS,lw,eI,bS,xS,vS,IS,NS,TS,CS,$S,RS,FS,OS,zS,PS,US,HS,KS,YS,Rv,sv,JS,{kernelName:Is,backendName:"cpu",kernelFunc:QS},{kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{tensor:s,indices:r,updates:a}=t,{sliceRank:i,numUpdates:o,sliceSize:l,strides:u,outputSize:c}=Tm.calculateShapes(a,r,s.shape),h=n.bufferSync(r),p=n.bufferSync(a),d=n.bufferSync(s),f=eS(h,p,s.shape,c,l,o,i,u,d,!1);return n.makeTensorInfo(s.shape,f.dtype,f.values)}},{kernelName:Ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;Pb(r,"tile");const i=eN(n.bufferSync(r),a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:Ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s;Pb(r,"topk");const o=n.data.get(r.dataId).values,[l,u]=sN(o,r.shape,r.dtype,a,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},rN,Mx,{kernelName:$s,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;Pb(a,"unique");const i=s.data.get(a.dataId).values,{outputValues:o,outputShape:l,indices:u}=uN(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Es,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r.shape.length,o=r.shape[a],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==a&&(l[u++]=r.shape[e]);const c=new Array(i).fill(0),h=r.shape.slice();h[a]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[a]=e;const t=ow({inputs:{x:r},backend:n,attrs:{begin:c,size:h}});p[e]=kx({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},{kernelName:As,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s;Pb(r,"unsortedSegmentSum");const o=[],l=[],u=r.shape.length-a.shape.length;let c=a;for(let e=0;e<u;++e){const t=wv({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=Xs.createScalarValue(e,"int32"),s=n.makeTensorInfo([],"int32",t),a=ov({inputs:{a:s,b:c},backend:n}),i=fx({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),u=ev({inputs:{a:i,b:r},backend:n}),h=nv({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(a),l.push(i),l.push(u),l.push(h)}const h=yI({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},mI];for(const e of cN)js(e);const hN=jg.whereImpl;class pN extends o{nextDataId(){return pN.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new i(this,rl())}write(e,t,n){this.firstUse&&(this.firstUse=!1,oe().get("IS_NODE")&&Tm.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Xs.isString(n[0])){const r=n.map((e=>Xs.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,s,r){this.data.set(e,{values:t,dtype:s,refCount:r})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return Tm.mergeRealAndImagArrays(e,t)}return Xs.convertBackendValuesAndArrayBuffer(this.data.get(e).values,t)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Xs.decodeString(e)));return el(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return el(e.shape,e.dtype,t)}makeOutput(e,t,n){return rl().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Xs.now();e();return{kernelMs:Xs.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Pb([e],"where");const t=this.readSync(e.dataId);return hN(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}pN.nextDataId=0;function dN(){let e,t,n,s,r,a,i,o,l,u;return 2===oe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",r="texture",a="outputColor",i="out vec4 outputColor;",o=oe().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",r="texture2D",a="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:r,output:a,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function fN(e,t,n="index"){const s=Xs.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${t}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${t}`:`index -= ${e[r]} * ${t}`};`)).join("")}function mN(e,t,n="index"){const s=Xs.computeStrides(t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / outShapeStrides[${r}]`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * outShapeStrides[${r}]`:`index -= ${e[r]} * outShapeStrides[${r}]`};`)).join("")}function gN(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),r=new Array(n-1);r[n-2]=s[n-1];for(let e=n-3;e>=0;--e)r[e]=`(${r[e+1]} * ${s[e+1]})`;return r}(e.map(((e,t)=>t)),t);return s.map(((t,r)=>`${`int ${e[r]} = ${n} / ${s[r]}`}; ${r===s.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${s[r]}`:`index -= ${e[r]} * ${s[r]}`};`)).join("")}function yN(e){const t=Xs.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}ul("cpu",(()=>new pN),1);const bN="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:xN}=Tm;function wN(e,t,n){const s=[];if(e.forEach((e=>{const t=Xs.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=RN(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const r=s.join("\n"),a=e.map((e=>function(e,t,n=!1,s){let r="";r+=n?kN(e,s):vN(e,s);const a=e.shapeInfo.logicalShape,i=t.logicalShape;a.length<=i.length&&(r+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=xN(e.shapeInfo.logicalShape,t.logicalShape),l=AN(i),u=i-a;let c;const h=["x","y","z","w","u","v"];c=0===a?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&a>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===Xs.sizeFromShape(e.shapeInfo.logicalShape),m=1===Xs.sizeFromShape(t.logicalShape);if(1!==a||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=a-2,t=a-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),r="get"+s+"AtOutCoords",a=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&Xs.arraysEqual(i,a))return`\n      float ${r}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=AN(l),c=xN(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", ");return`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t));return r}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=dN(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${IN}\n    ${SN}\n    ${NN}\n  `}(o);t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return CN();case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===s[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `;if(1===s[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Xs.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[2]/2),a=r*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(e[e.length-1]/2),a=r*Math.ceil(e[e.length-2]/2);let i=a,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${a};\n      index -= b * ${a};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return CN();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;return n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(Xs.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;return n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${mN(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const s=fN(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${mN(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const s=fN(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=fN(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=fN(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=TN);return[h,l,c,r,u,a,n.userCode].join("\n")}function vN(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[r,a]=e.shapeInfo.texShape;if(1===r&&1===a)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=$N(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${EN(e)}\n      }\n    `;const r=e.shapeInfo.texShape,a=r[0],i=r[1];if(1===i&&1===a)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=$N(n);if(1===i)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${a}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===a)return t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;return t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${a}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape;if(null!=a&&Xs.arraysEqual(n,a)){if(t)return`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=a[0];return`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${a[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=Xs.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${vN(FN(e,l),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${_N(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${EN(e)}\n      }\n    `;const u=a[0],c=a[1],h=$N(s);if(1===c)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;if(1===u)return t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `;return t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=Xs.squeezeShape(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${vN(FN(e,u),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${_N(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${a}, ${i}, 1)));\n        ${EN(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===a&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=$N(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${a} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=n[3],i=n[2]*a,o=n[1]*i,{newShape:l,keptDims:u}=Xs.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${vN(FN(e,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${_N(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${a}, 1)));\n        ${EN(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===a&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=$N(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${a} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t[4],a=t[3]*r,i=t[2]*a,o=t[1]*i,{newShape:l,keptDims:u}=Xs.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${vN(FN(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${_N(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${a}, ${r})) +\n          depth3;\n        ${EN(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${a}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const f=$N(n);return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${a} +\n          depth2 * ${r} + depth3 + ${f};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:r,keptDims:a}=Xs.squeezeShape(t);if(r.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${vN(FN(e,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${_N(t,a)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${EN(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const m=$N(n);return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${m};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function kN(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),s=dN();return`\n    vec4 ${n}() {\n      return ${s.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=e.shapeInfo.texShape,a=dN();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=a[0],o=a[1],l=dN();if(null!=a&&Xs.arraysEqual(n,a))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)],c=Math.ceil(n[1]/2);return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),a=e.shapeInfo.texShape,i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];if(1===n[0]){const s=[1,2],a=["b","row","col"];return`\n        ${kN(FN(e,n.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${_N(a,s)});\n        }\n      `}const o=dN();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2),h=c*Math.ceil(n[1]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${h}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),r=dN();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${n}, uv);\n    }\n  `;const a=e.shapeInfo.logicalShape,i=a.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(a[i-1]/2);let p=h*Math.ceil(a[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=a[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const IN="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",SN="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",NN="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",TN="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function CN(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function $N(e){return`offset${e}`}function EN(e){const t=e.name,n=Xs.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function AN(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function RN(e,t,n){const{newShape:s,keptDims:r}=Xs.squeezeShape(t),a=t.length,i=e&&3===a&&1===t[0],o=i?t.slice(1):s,l=!e&&a>1&&!Xs.arraysEqual(t,n)&&s.length<a||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:r}}function FN(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function _N(e,t){return t.map((t=>e[t])).join(", ")}const DN={},ON={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function MN(e,t){if(!(e in DN)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if(oe().getBool("IS_SAFARI")||"undefined"==typeof OffscreenCanvas||2!==e){if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}return new OffscreenCanvas(300,150)}(e):t;n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete DN[e]}),!1),oe().getBool("SOFTWARE_WEBGL_ENABLED")&&(ON.failIfMajorPerformanceCaveat=!1);return 1===e?n.getContext("webgl",ON)||n.getContext("experimental-webgl",ON):n.getContext("webgl2",ON)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;DN[e]=n}const n=DN[e];return null==n||n.isContextLost()?(delete DN[e],MN(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),DN[e])}var LN,zN,BN;function PN(e,t){return[t,e]}function WN(e){const t=Xs.sizeFromShape(e),n=Math.ceil(t/4);return Xs.sizeToSquarishShape(n)}function UN(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function VN(e,t){const n=e;let s,r,a,i,o,l,u,c,h,p;return 2===oe().getNumber("WEBGL_VERSION")?(s=n.R32F,r=n.R16F,a=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,r=e.RGBA,a=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function GN(e,t){const n=t();return oe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(LN||(LN={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(zN||(zN={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(BN||(BN={}));function HN(e){return!!(oe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function jN(e,t){return tT(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const qN=/ERROR: [0-9]+:([0-9]+):/g;function KN(e,t){const n=qN.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],r=e.split("\n"),a=r.length.toString().length+2,i=r.map(((e,t)=>Xs.rightPad((t+1).toString(),a)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${Xs.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function XN(e,t){if(GN(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function YN(e,t,n,s,r,a,i){const o=e.getAttribLocation(t,n);return-1!==o&&(GN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),GN(e,(()=>e.vertexAttribPointer(o,r,e.FLOAT,!1,a,i))),GN(e,(()=>e.enableVertexAttribArray(o))),!0)}function ZN(e,t,n,s){GN(e,(()=>function(e,t,n){nT(e,n),GN(e,(()=>e.activeTexture(e.TEXTURE0+n))),GN(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),GN(e,(()=>e.uniform1i(n,s)))}function JN(e,t,n){GN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),GN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function QN(e,t){GN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),GN(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function eT(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function tT(e,t,n){const s=GN(e,(()=>t()));if(null==s)throw new Error(n);return s}function nT(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function sT(e,t=2){return Xs.sizeFromShape(e.slice(0,e.length-t))}function rT(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function aT(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[sT(e),...rT(e)]),t}function iT(e){return e%2==0}function oT(e,t){if(e=e.slice(-2),t=t.slice(-2),Xs.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e[e.length-1],s=t[t.length-1];if(n===s)return!0;if(iT(n)&&iT(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&iT(e[0])&&iT(t[0])}let lT,uT;function cT(e,t){return null!=e.getExtension(t)}function hT(e){try{if(null!=MN(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function pT(e){if(0===e)return!1;const t=MN(e);if(1!==e){if(cT(t,"EXT_color_buffer_float"))return dT(t);const e="EXT_color_buffer_half_float";if(cT(t,e)){const n=t.getExtension(e);return function(e,t){const n=VN(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s);const r=1,a=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,r,a,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const o=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(i),o}(t,n)}return!1}if(!cT(t,"OES_texture_float"))return!1;if(!cT(t,"WEBGL_color_buffer_float"))return!1;return dT(t)}function dT(e){const t=VN(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),r}function fT(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&Xs.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}function mT(e,t,n,s){const r=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),a=r.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=wN(r,i,t),l=function(e,t){const n=tT(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(GN(e,(()=>e.shaderSource(n,t))),GN(e,(()=>e.compileShader(n))),oe().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw KN(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return oe().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(e.buildVao(u),Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:a,outShapeInfo:i},gT(e,t,u)))}function gT(e,t,n){const s=[],r=[];let a,i,o,l=null,u=null;u=e.getUniformLocation(n,"NAN",!1),1===oe().getNumber("WEBGL_VERSION")&&(l=e.getUniformLocation(n,"INFINITY",!1));const c=!1;for(const r of t.variableNames){const a={name:r,uniform:e.getUniformLocation(n,r,c),offset:e.getUniformLocation(n,`offset${r}`,c)};t.enableShapeUniforms&&(a.shape=e.getUniformLocation(n,`${r}Shape`,c),a.texShape=e.getUniformLocation(n,`${r}TexShape`,c)),s.push(a)}if(t.enableShapeUniforms&&(a=e.getUniformLocation(n,"outShape",c),o=e.getUniformLocation(n,"outShapeStrides",c),i=e.getUniformLocation(n,"outTexShape",c)),t.customUniforms)for(const s of t.customUniforms)r.push(e.getUniformLocation(n,s.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:a,outShapeStridesLocation:o,outTexShapeLocation:i}}function yT(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,r=t[n],a=r.shape;if(!Xs.arraysEqual(s,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${a} must match`);if(e.isUniform&&r.isUniform)return;const i=e.texShape,o=r.isUniform?null:r.texData.texShape;if(!Xs.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function bT(e){return oe().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class xT{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Tm.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=bT(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}function wT(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function vT(e,t){return 1===t?[e]:wT(e,t)}const kT="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class IT{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Tm.assertAndGetBroadcastShape(t,n);const r=this.outputShape.length;this.enableShapeUniforms=bT(r);let a="";if(s)if(0===r||1===Xs.sizeFromShape(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(a=`\n          ${AN(r)} coords = getOutputCoords();\n        `,1===r)this.enableShapeUniforms?a+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":a+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=vT("coords",r);this.enableShapeUniforms?a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= outShape[${r} - 2];\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= outShape[${r} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:a+=`\n            bool nextRowOutOfBounds =\n              (${e[r-2]} + 1) >= ${this.outputShape[r-2]};\n            bool nextColOutOfBounds =\n              (${e[r-1]} + 1) >= ${this.outputShape[r-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function ST(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const NT={kernelName:Wt,backendName:"webgl",kernelFunc:ST};function TT(e){const{inputs:t,backend:n}=e,{real:s,imag:r}=t,a=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(a.dataId),o=ST({inputs:{x:s},backend:n}),l=ST({inputs:{x:r},backend:n});return i.complexTensorInfos={real:o,imag:l},a}const CT={kernelName:Qe,backendName:"webgl",kernelFunc:TT},$T="return (a < 0.) ? b * a : a;",ET="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const AT={kernelName:qt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{alpha:a}=s,i=n.makeTensorInfo([],"float32",Xs.createScalarValue(a,"float32")),o=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new IT(ET,r.shape,i.shape):new xT($T,r.shape,i.shape),l=n.runWebGLProgram(o,[r,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},RT="return (a < 0.) ? b * a : a;",FT="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const _T={kernelName:En,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:r}=t,a=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new IT(FT,s.shape,r.shape):new xT(RT,s.shape,r.shape);return n.runWebGLProgram(a,[s,r],"float32")}};class DT{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const OT="return abs(x);";const MT="return x;";class LT{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}function zT({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:r,backend:a})=>{const{x:i}=r,o=a,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new LT(i.shape,t):new DT(i.shape,e),o.runWebGLProgram(u,[i],l)}}function BT({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:a}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,r]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,r={dataId:n.dataId,dtype:n.dtype,shape:l.shape},a={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new xT(e,l.shape,u.shape);return c.runWebGLProgram(i,[r,a],ga(n.dtype,s.dtype))})),a=TT({inputs:{real:s,imag:r},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(r),a}const h=a||ga(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Tm.fromUint8ToStringArray(e):e,s="string"===l.dtype?Tm.fromUint8ToStringArray(t):t,[a,i]=r(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=a,o}let p;return p=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new IT(t,l.shape,u.shape,n):new xT(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function PT(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?FT:RT;if("leakyrelu"===e)return t?ET:$T;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class WT{constructor(e,t,n,s=!1,r=!1,a=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=bT(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=r?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`imod(rc.x, ${e[0]})`:t[0]<e[0]&&(x=`imod(rc.x, ${t[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${b};\n        int batchB = ${x};\n        for (int i = 0; i < ${c}; i++) {\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const UT="return areal * breal - aimag * bimag;",VT="return areal * bimag + aimag * breal;";class GT{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Tm.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}var HT={};t(HT,"simpleAbsImpl",(()=>Cx)),t(HT,"addImpl",(()=>bx)),t(HT,"bincountImpl",(()=>cw)),t(HT,"bincountReduceImpl",(()=>hw)),t(HT,"bitwiseAndImpl",(()=>dw)),t(HT,"castImpl",(()=>dx)),t(HT,"ceilImpl",(()=>yw)),t(HT,"concatImpl",(()=>Iw)),t(HT,"equalImpl",(()=>iv)),t(HT,"expImpl",(()=>yv)),t(HT,"expm1Impl",(()=>kv)),t(HT,"floorImpl",(()=>Bv)),t(HT,"floorDivImpl",(()=>Uv)),t(HT,"gatherNdImpl",(()=>qv)),t(HT,"gatherV2Impl",(()=>Xv)),t(HT,"greaterImpl",(()=>Zv)),t(HT,"greaterEqualImpl",(()=>ek)),t(HT,"lessImpl",(()=>ck)),t(HT,"lessEqualImpl",(()=>dk)),t(HT,"linSpaceImpl",(()=>gk)),t(HT,"logImpl",(()=>bk)),t(HT,"maxImpl",(()=>_k)),t(HT,"maximumImpl",(()=>Mk)),t(HT,"minimumImpl",(()=>jk)),t(HT,"multiplyImpl",(()=>Jw)),t(HT,"negImpl",(()=>nI)),t(HT,"notEqualImpl",(()=>cI)),t(HT,"prodImpl",(()=>II)),t(HT,"raggedGatherImpl",(()=>$I)),t(HT,"raggedRangeImpl",(()=>RI)),t(HT,"raggedTensorToTensorImpl",(()=>LI)),t(HT,"rangeImpl",(()=>BI)),t(HT,"rsqrtImpl",(()=>ZI)),t(HT,"scatterImpl",(()=>eS)),t(HT,"sigmoidImpl",(()=>rx)),t(HT,"sliceImpl",(()=>iw)),t(HT,"sparseFillEmptyRowsImpl",(()=>wS)),t(HT,"sparseReshapeImpl",(()=>kS)),t(HT,"sparseSegmentReductionImpl",(()=>SS)),t(HT,"sqrtImpl",(()=>ES)),t(HT,"squaredDifferenceImpl",(()=>_S)),t(HT,"staticRegexReplaceImpl",(()=>MS)),t(HT,"stridedSliceImpl",(()=>WS)),t(HT,"stringNGramsImpl",(()=>GS)),t(HT,"stringSplitImpl",(()=>qS)),t(HT,"stringToHashBucketFastImpl",(()=>XS)),t(HT,"subImpl",(()=>$v)),t(HT,"tileImpl",(()=>eN)),t(HT,"topKImpl",(()=>sN)),t(HT,"transposeImpl",(()=>Dx)),t(HT,"uniqueImpl",(()=>uN));const{addImpl:jT,bincountImpl:qT,bincountReduceImpl:KT,castImpl:XT,ceilImpl:YT,concatImpl:ZT,equalImpl:JT,expImpl:QT,expm1Impl:eC,floorImpl:tC,gatherNdImpl:nC,gatherV2Impl:sC,greaterImpl:rC,greaterEqualImpl:aC,lessImpl:iC,lessEqualImpl:oC,linSpaceImpl:lC,logImpl:uC,maxImpl:cC,maximumImpl:hC,minimumImpl:pC,multiplyImpl:dC,negImpl:fC,notEqualImpl:mC,prodImpl:gC,raggedGatherImpl:yC,raggedRangeImpl:bC,raggedTensorToTensorImpl:xC,rangeImpl:wC,rsqrtImpl:vC,scatterImpl:kC,sigmoidImpl:IC,simpleAbsImpl:SC,sliceImpl:NC,sparseFillEmptyRowsImpl:TC,sparseReshapeImpl:CC,sparseSegmentReductionImpl:$C,sqrtImpl:EC,staticRegexReplaceImpl:AC,stridedSliceImpl:RC,stringNGramsImpl:FC,stringSplitImpl:_C,stringToHashBucketFastImpl:DC,subImpl:OC,tileImpl:MC,topKImpl:LC,transposeImpl:zC,uniqueImpl:BC}=HT,PC="return a * b;";function WC(e){const{inputs:t,backend:n}=e,{a:s,b:r}=t,a=Tm.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),a=new GT(UT,s.shape,r.shape),i=new GT(VT,s.shape,r.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape}],l=n.runWebGLProgram(a,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=TT({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,r])){const e=n.texData.get(s.dataId),t=n.texData.get(r.dataId),[i,o]=dC(s.shape,r.shape,e.values,t.values,a),l=n.makeTensorInfo(o,a);return n.texData.get(l.dataId).values=i,l}let i;return i=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new IT(PC,s.shape,r.shape):new xT(PC,s.shape,r.shape),n.runWebGLProgram(i,[s,r],a)}const UC={kernelName:bn,backendName:"webgl",kernelFunc:WC};class VC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,r;this.userCode=`\n      ${s=t,r=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${r?gN(["r","c","d"],"inputShape"):fN(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}function GC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{shape:a}=s,i=n,o=Xs.sizeFromShape(r.shape),l=Xs.inferFromImplicitShape(a,o),u=Xs.sizeFromShape(l);Xs.assert(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(r.dataId);return!c.isPacked||oT(r.shape,l)||null!==c.texture&&oT(c.shape,l)?(i.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function(e,t,n){const s=[sT(e.shape),...rT(e.shape)],r={dtype:e.dtype,shape:s,dataId:e.dataId},a=[sT(t),...rT(t)],i=new VC(a,s),o=[s],l=n.runWebGLProgram(i,[r],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(r,l,i)}const HC={kernelName:zn,backendName:"webgl",kernelFunc:GC};class jC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${Xs.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";r%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class qC{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:r,outSize:a}=e;this.outputShape=[s,a];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";r%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function KC(e,t,n,s){const r=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=Tm.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let a=e;for(let i=0;i<r.length;i++){const{inSize:o,windowSize:l,outSize:u}=r[i];let c,h;c="mean"===n?0===i?new jC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new jC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new qC({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=a,a=s.runWebGLProgram(c,[a],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return a}class XC{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=AN(this.rank),r=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${r}));\n    }\n    `}}class YC{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=AN(this.rank),r=wT("rc",this.rank),a=new Array(this.rank);for(let e=0;e<t.length;e++)a[t[e]]=r[e];const i=`vec2(${a.slice(-2).join()})`,o=`++${r[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${r[this.rank-1]};\n      if(++${r[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function ZC(e,t,n){const s=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YC(e.shape,t):new XC(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function JC(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s;return function(e,t,n,s){const r=t,a=e.shape.length,i=Xs.parseAxisParam(r,e.shape);let o=i;const l=Tm.getAxesPermutation(o,a),u=null!=l;let c=e;u&&(c=ZC(e,l,s),o=Tm.getInnerMostAxes(o.length,a)),Tm.assertAxesAreInnerMostDims("sum",o,a);const[h,p]=Tm.computeOutAndReduceShapes(c.shape,o);let d=h;n&&(d=Tm.expandShapeToKeepDim(h,i));const f=Xs.sizeFromShape(p),m=GC({inputs:{x:c},attrs:{shape:[Xs.sizeFromShape(e.shape)/f,f]},backend:s}),g=KC(m,ya(e.dtype),"sum",s),y=GC({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(r,a,i,n)}const QC={kernelName:as,backendName:"webgl",kernelFunc:JC};function e$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{perm:a}=s,i=n,o=r.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=r.shape[a[e]];let u;if(i.shouldExecuteOnCPU([r])){const e=i.texData.get(r.dataId).values,t=zC(e,r.shape,r.dtype,a,l);u=i.makeTensorInfo(l,r.dtype);i.texData.get(u.dataId).values=t}else u=ZC(r,a,i);return u}const t$={kernelName:Cs,backendName:"webgl",kernelFunc:e$};function n$({a:e,b:t,transposeA:n,transposeB:s,backend:r,bias:a=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=Xs.sizeFromShape(m),b=Xs.sizeFromShape(g),x=Fl.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);Xs.assert(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],v=s?[b,f,p]:[b,p,f],k=GC({inputs:{x:e},backend:r,attrs:{shape:w}}),I=GC({inputs:{x:t},backend:r,attrs:{shape:v}}),S=[k,I],N=Math.max(y,b),T=n?k.shape[1]:k.shape[2],C=null!=a,$=null!=i,E="leakyrelu"===l,A=null!=l?PT(l,!0):null;let R;if((1===d||1===f)&&T>1e3&&!1===(C||$||E||null!=A)){let e=k,t=I;n&&(e=e$({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),S.push(e)),s&&(t=e$({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),S.push(t));const a=1===f;let i=e;1!==f&&(i=GC({inputs:{x:e},backend:r,attrs:{shape:[N,T,1]}}),S.push(i));const o=1===f?2:1;let l=t;a&&(l=GC({inputs:{x:t},backend:r,attrs:{shape:[N,1,T]}}),S.push(l));const u=WC({inputs:{a:i,b:l},backend:r});R=JC({inputs:{x:u},backend:r,attrs:{axis:o,keepDims:!0}}),S.push(u)}else{const l=ga(e.dtype,t.dtype),u=new WT(w,v,[N,d,f],n,s,C,A,$,E),c=[k,I];if(null!=a&&c.push(a),$&&c.push(i),E){const e=r.makeTensorInfo([],"float32",Xs.createScalarValue(o,"float32"));c.push(e),S.push(e)}R=r.runWebGLProgram(u,c,l)}const F=GC({inputs:{x:R},backend:r,attrs:{shape:x}});S.push(R);for(const e of S)r.disposeIntermediateTensorInfo(e);return F}const s$={kernelName:Os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return n$({a:r,b:a,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},r$="return abs(x);";const a$={kernelName:Ce,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=SC(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let r;return r=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new LT(s.shape,r$):new DT(s.shape,r$),n.runWebGLProgram(r,[s],s.dtype)}},i$=zT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),o$={kernelName:$e,backendName:"webgl",kernelFunc:i$},l$=zT({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),u$={kernelName:Ee,backendName:"webgl",kernelFunc:l$},c$="return a + b;",h$=BT({opSnippet:c$,packedOpSnippet:c$,supportsComplex:!0,cpuKernelImpl:jT}),p$={kernelName:Ae,backendName:"webgl",kernelFunc:h$};class d${constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class f${constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const m$={kernelName:Re,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,r=n;if(1===r.length)return ST({inputs:{x:r[0]},backend:s});if(r.length>oe().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(r.length/2),n=e({inputs:r.slice(0,t),backend:s}),a=e({inputs:r.slice(t),backend:s});return e({inputs:[n,a],backend:s})}const a=r.map((e=>e.dtype)).reduce(((e,t)=>ga(e,t))),i=r.map((e=>e.shape)),o=oe().getBool("WEBGL_PACK")?new f$(r[0].shape,i):new d$(r[0].shape,i);return s.runWebGLProgram(o,r,a)}};const g$={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Xs.parseAxisParam(a,r.shape);let u=l;const c=Tm.getAxesPermutation(u,o);let h=r;null!=c&&(h=e$({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tm.getInnerMostAxes(u.length,o)),Tm.assertAxesAreInnerMostDims("all",u,o);const[p,d]=Tm.computeOutAndReduceShapes(h.shape,u),f=GC({inputs:{x:h},backend:n,attrs:{shape:[-1,Xs.sizeFromShape(d)]}}),m=KC(f,f.dtype,"all",n);let g;if(i){g=GC({inputs:{x:m},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(p,l)}})}else g=GC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};const y$={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Xs.parseAxisParam(a,r.shape);let u=l;const c=Tm.getAxesPermutation(u,o);let h=r;null!=c&&(h=e$({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tm.getInnerMostAxes(u.length,o)),Tm.assertAxesAreInnerMostDims("any",u,o);const[p,d]=Tm.computeOutAndReduceShapes(h.shape,u),f=GC({inputs:{x:h},backend:n,attrs:{shape:[-1,Xs.sizeFromShape(d)]}}),m=KC(f,f.dtype,"any",n);let g;if(i){g=GC({inputs:{x:m},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(p,l)}})}else g=GC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class b${constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:r,outSize:a}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[r,a];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class x${constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,Xs.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const r=e[e.length-1],a=Math.ceil(r/t);this.outputShape=e.slice(0,-1),a>1&&this.outputShape.push(a),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=AN(o),u=vT("coords",o);let c,h;if(1===a){h=o+1;const e=AN(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=vT("sourceLocR",h-1).concat("inIdx.r"),g=vT("sourceLocG",h-1).concat("inIdx.g"),y=vT("sourceLocB",h-1).concat("inIdx.b"),b=vT("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,v=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,k=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${v};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${v};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function w$(e,t,n,s=null){let r=t.shape[0],a=t.shape[1];null!=s&&(r=s.shape[0],a=s.shape[1]);const i=Tm.computeOptimalWindowSize(a),o={windowSize:i,inSize:a,batchSize:r,outSize:Math.ceil(a/i)},l=new b$(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=w$(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function v$(e,t,n,s=null){const r=null!=s?s.shape:t.shape,a=r[r.length-1],i=Tm.computeOptimalWindowSize(a),o=new x$(r,i,n,null==s),l=null==s?[t]:[t,s],u=e.runWebGLProgram(o,l,"int32");if(u.shape.length===t.shape.length){const s=v$(e,t,n,u);return e.disposeIntermediateTensorInfo(u),s}return u}function k$(e,t,n,s){const r=[n];if(Tm.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!oe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],a=e.texData.get(t.dataId);let i=t;null!==a&&a.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=Tm.computeOutAndReduceShapes(i.shape,r),u=Xs.sizeFromShape(l),c=GC({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=w$(e,c,s);n.push(h);const p=GC({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return v$(e,t,s)}const I$={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Xs.parseAxisParam(a,r.shape);const o=Tm.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=e$({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tm.getInnerMostAxes(i.length,l.shape.length)),Tm.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const c=k$(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}};const S$={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a}=s;let i=Xs.parseAxisParam(a,r.shape);const o=Tm.getAxesPermutation(i,r.shape.length);let l=r;const u=[];null!=o&&(l=e$({inputs:{x:r},backend:n,attrs:{perm:o}}),u.push(l),i=Tm.getInnerMostAxes(i.length,l.shape.length)),Tm.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const c=k$(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},N$=zT({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),T$={kernelName:Me,backendName:"webgl",kernelFunc:N$},C$=zT({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),$$={kernelName:Le,backendName:"webgl",kernelFunc:C$},E$=zT({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),A$={kernelName:ze,backendName:"webgl",kernelFunc:E$},R$=BT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),F$={kernelName:Pe,backendName:"webgl",kernelFunc:R$},_$=zT({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),D$={kernelName:Be,backendName:"webgl",kernelFunc:_$};class O${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?r?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / max(count, 1.0)");const x=4*Math.floor(a/4),w=a%4,v=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${v}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${v}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${v}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class M${constructor(e,t,n,s=!1,r=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const a=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?r?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / max(count, 1.0)");const v=4*Math.floor(a/4),k=a%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${v}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${v};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n        }\n        setOutput(${w});\n      }\n    `}}const L$={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;fT(r,"avgPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tm.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Xs.arraysEqual(u.inShape,u.outShape))return ST({inputs:{x:r},backend:n});const c=new O$(u,"avg",!1);return n.runWebGLProgram(c,[r],"float32")}};const z$={kernelName:Ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=Tm.computePool3DInfo(r.shape,a,i,[1,1,1],o,l,u),h=new M$(c,"avg",!1);return n.runWebGLProgram(h,[r],"float32")}};class B${constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${a}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class P${constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${r}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const W$={kernelName:Ge,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Tm.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new P$(h);return n.runWebGLProgram(p,[r],i.dtype)}};const U$={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a;fT([r,a],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=Tm.computePool2DInfo(i.shape,o,l,1,u),h=new B$(c);return n.runWebGLProgram(h,[r],i.dtype)}};const V$={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a:r,b:a}=t,{transposeA:i,transposeB:o}=s;return n$({a:r,b:a,transposeA:i,transposeB:o,backend:n})}};class G${constructor(e,t,n,s,r,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Tm.assertAndGetBroadcastShape(e,t),Tm.assertAndGetBroadcastShape(e,n);let i="0.0";null!=s&&(Tm.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=r&&(Tm.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class H${constructor(e,t,n,s,r,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Tm.assertAndGetBroadcastShape(e,t),Tm.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=s&&(Tm.assertAndGetBroadcastShape(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=r&&(Tm.assertAndGetBroadcastShape(e,r),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const j$={kernelName:Mt,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:r,variance:a,offset:i,scale:o}=e;Xs.assert(r.shape.length===a.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),Xs.assert(null==i||r.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),Xs.assert(null==o||r.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,r,a];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=oe().getBool("WEBGL_PACK_NORMALIZATION")?new H$(s.shape,r.shape,a.shape,c,h,l):new G$(s.shape,r.shape,a.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class q${constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=AN(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return K$.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${K$[t]} = start[${t}] + coords.${K$[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const K$=["x","y","z","w","u","v"];class X${constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=AN(this.rank),n=vT("coords",this.rank),s=vT("sourceLoc",this.rank),r=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,a=`getChannel(getSource(${s.join()}), ${r})`,i=`\n      result.x = ${a};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${a};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${a};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function Y$(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,size:i}=s,[o,l]=lm.parseSliceParams(r,a,i);if(lm.assertParamsValid(r,o,l),0===Xs.sizeFromShape(l))return n.makeTensorInfo(l,r.dtype,[]);if(n.shouldExecuteOnCPU([r])||"string"===r.dtype){const e=n.texData.get(r.dataId),t=NC(e.values,o,l,r.shape,r.dtype);return n.makeTensorInfo(l,r.dtype,t)}const{isPacked:u}=n.texData.get(r.dataId),c=lm.isSliceContinous(r.shape,o,l);if(u||!c){const e=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new X$(l):new q$(l),t=[o];return n.runWebGLProgram(e,[r],r.dtype,t)}return n.uploadToGPU(r.dataId),function(e,t,n,s){const r=s.texData.get(e.dataId),a=s.makeTensorInfo(n,e.dtype),i=s.texData.get(a.dataId);Object.assign(i,r),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=lm.computeFlatOffset(t,Xs.computeStrides(e.shape));r.slice&&(o+=r.slice.flatOffset),i.slice={flatOffset:o,origDataId:r.slice&&r.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),a}(r,o,l,n)}const Z$={kernelName:Jn,backendName:"webgl",kernelFunc:Y$},J$={kernelName:je,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,crops:i}=s;Xs.assert(r.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=Tm.getReshaped(r.shape,a,o),u=Tm.getPermuted(l.length,a.length),c=Tm.getReshapedPermuted(r.shape,a,o),h=Tm.getSliceBeginCoords(i,a.length),p=Tm.getSliceSize(c,i,a.length),d=[],f=GC({inputs:{x:r},backend:n,attrs:{shape:l}}),m=e$({inputs:{x:f},backend:n,attrs:{perm:u}}),g=GC({inputs:{x:m},backend:n,attrs:{shape:c}}),y=Y$({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const Q$={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i}=s,o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=qT(o,l,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,u)}};const eE={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:r}=t,a=n.readSync(s.dataId),i=n.readSync(r.dataId),o=Tm.assertAndGetBroadcastShape(Array.from(a),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},tE=BT({opSnippet:"return float(a != b);",cpuKernelImpl:mC,dtype:"bool"}),nE={kernelName:wn,backendName:"webgl",kernelFunc:tE};function sE(e){const{inputs:t,backend:n}=e,{input:s}=t;return ST({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const rE={kernelName:On,backendName:"webgl",kernelFunc:sE};const aE={kernelName:Ye,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:r}=t,{x:a}=n,{dtype:i}=r;if("complex64"===i){if("complex64"===a.dtype)return ST({inputs:{x:a},backend:s});const t=vl(a.shape),n=e({inputs:{x:a},backend:s,attrs:{dtype:"float32"}}),r=TT({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),r}if("complex64"===a.dtype){const t=sE({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!Xs.hasEncodingLoss(a.dtype,i)){const e=ST({inputs:{x:a},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(s.shouldExecuteOnCPU([a])){const e=s.texData.get(a.dataId).values,[t,n,r]=XT(e,a.shape,a.dtype,i);return s.makeTensorInfo(t,n,r)}if("int32"===i)return function(e,t){const n=new DT(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(a,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",Xs.getTypedArrayFromDType("bool",1)),t=tE({inputs:{a:a,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${i}`)}},iE="return ceil(x);",oE=zT({opSnippet:iE,packedOpSnippet:iE,cpuKernelImpl:YT}),lE={kernelName:Ze,backendName:"webgl",kernelFunc:oE};class uE{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class cE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const hE={kernelName:Je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{clipValueMin:a,clipValueMax:i}=s;let o;o=oe().getBool("WEBGL_PACK_CLIP")?new cE(r.shape):new uE(r.shape);const l=[[a],[i]];return n.runWebGLProgram(o,[r],r.dtype,l)}};class pE{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function dE(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const fE={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=n.texData.get(s.dataId),a=new pE(s.shape),i=[dE(s,r.complexTensorInfos.real),dE(s,r.complexTensorInfos.imag)];return n.runWebGLProgram(a,i,i[0].dtype)}};class mE{constructor(e){this.outputShape=[],this.outputShape=Tm.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,r=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${r}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class gE{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Tm.computeOutShape(e,t);const n=this.outputShape,s=n.length,r=AN(s),a=vT("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${yE(i,l,t)}),\n            vec2(${yE(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${yE(i,l,d)}),\n          vec2(${yE(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[s-1]} = ${a[s-1]} + 1;\n        if (${a[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[s-2]} = ${a[s-2]} + 1;\n        if (${a[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[s-1]} = ${a[s-1]} - 1;\n        if (${a[s-2]} < ${n[s-2]} &&\n            ${a[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function yE(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function bE(e){const{inputs:t,backend:n}=e,{input:s}=t;return ST({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const xE={kernelName:Vt,backendName:"webgl",kernelFunc:bE};function wE(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>sE({inputs:{input:e},backend:n}))),r=e.map((e=>bE({inputs:{input:e},backend:n}))),a=wE(s,t,n),i=wE(r,t,n),o=TT({inputs:{real:a,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),r.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i),o}let r=n.shouldExecuteOnCPU(e);if("string"===s&&(r=!0),r){const r=e.map((e=>{const s=Xs.sizeFromShape(e.shape.slice(t));return GC({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),a=r.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Tm.computeOutShape(r.map((e=>e.shape)),1),o=1===r[0].shape[0],l=ZT(a,i,s,o),u=Tm.computeOutShape(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}const a=e.filter((e=>Xs.sizeFromShape(e.shape)>0)),i=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&a[0].shape.length>1;if(1===a.length){const t=i?new DT(e[0].shape,MT):new LT(e[0].shape,MT);return n.runWebGLProgram(t,e,s)}const o=oe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(a.length>o){const e=[];for(let s=0;s<a.length;s+=o){const r=a.slice(s,s+o);e.push(wE(r,t,n))}const s=wE(e,t,n);for(const t of e)n.disposeIntermediateTensorInfo(t);return s}if(i){const e=new gE(a.map((e=>e.shape)),t);return n.runWebGLProgram(e,a,s)}const{tensors2D:l,outShape:u}=function(e,t,n){const s=Tm.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>GC({inputs:{x:e},attrs:{shape:[-1,Xs.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:s}}(a,t,n),c=new mE(l.map((e=>e.shape))),h=n.runWebGLProgram(c,l,s);l.forEach((e=>n.disposeIntermediateTensorInfo(e)));const p=GC({inputs:{x:h},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(h),p}function vE(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s,a=Xs.parseAxisParam(r,t[0].shape)[0],i=t.map((e=>e.shape));Tm.assertParamsConsistent(i,a);const o=Tm.computeOutShape(t.map((e=>e.shape)),a);if(0===Xs.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);const l=t.filter((e=>Xs.sizeFromShape(e.shape)>0));return 1===l.length?ST({inputs:{x:l[0]},backend:n}):wE(l,a,n)}const kE={kernelName:tt,backendName:"webgl",kernelFunc:vE};class IE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const a=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const v=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${v}\n        ${w}\n        setOutput(result);\n      }\n    `}}class SE{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${r}, ${a}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class NE{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bT(this.outputShape.length);const a=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,c=u;let h="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<u;e++)h+=`\n           vec4 xTexelC${2*e};\n           int xTexelC${2*e}Ready;\n           vec4 xTexelC${2*e+1};\n           int xTexelC${2*e+1}Ready;\n           vec4 xC${e};`;h+=`\n     for (int r = 0; r < ${l}; r++) {\n      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {\n       `;for(let e=0;e<u;e++)h+=`\n           xTexelC${2*e} = vec4(0.0);\n           xTexelC${2*e}Ready = 0;\n           xTexelC${2*e+1} = vec4(0.0);\n           xTexelC${2*e+1}Ready = 0;\n           xC${e} = vec4(0.0);`;h+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let t=0;t<(c+1)/2;t++){const n=2*t;if(h+=`\n           xC = xCCorner + ${n*o};\n           `,1===i){if(n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n               `,h+=1===o&&n>0?`\n                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);\n                   } else {\n                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\n                   }\n                   `):h+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xC${n} = xTexelC${n};\n                 `,n+1<u)){const e=a%2==0?Xs.nearestLargerEven(o):o;o%2==0&&a%2==1||o%2!=0&&a%2!=1?(h+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${n+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${n+1}Ready = 1;\n                   }\n                   `,h+=o>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);\n                     } else {\n                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);\n                     }\n                     `:`\n                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\n                     `):h+=1===e?`\n                     xC${n+1} = xTexelC${n};\n                     `:`\n                     xCOffset = xC + ${e};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${n+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${n+1}Ready = 1;\n                     }\n\n                     xC${n+1} = xTexelC${n+1};\n                     `}}else n<u&&(a%2==1?(h+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n               `,n+1<u&&(h+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\n                 `)):(h+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\n                   xTexelC${n} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${n}.zw = vec2(0.0);\n                   }\n                   xTexelC${n}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\n                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${n+1}.zw = vec2(0.);\n                   }\n                   xTexelC${n+1}Ready = 1;\n                 }\n\n                 xC${n} = vec4(\n                   xTexelC${n}.xy, xTexelC${n+1}.xy);\n               `,n+1<u&&(h+=`\n                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\n                 `)));n<u&&(h+=`\n             wTexel = getW(r, ${n}, d1, d2);\n             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${e.inChannels}) {\n               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,n+1<u&&(h+=`\n               wTexel = getW(r, ${n+1}, d1, d2);\n               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${e.inChannels}) {\n                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}h+="\n     }\n   ",h+="\n     }\n   ",h+="\n     }\n   ";let p="",d="";n&&(p=s?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${n}\n         }`:r?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${n}\n         }`:`vec4 activation(vec4 x) {\n           ${n}\n         }`,d="result = activation(result);");const f=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${h}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${f}\n         ${d}\n         setOutput(result);\n       }\n     `}}class TE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length);const{dataFormat:n}=t,s=dN(),r="channelsLast"===n,a=r?1:2,i=r?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.z + ${t};\n          pos = rc.y + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${r}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function CE(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function $E({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=a){const e=CE(a.shape,d);null!=e&&(a=GC({inputs:{x:a},backend:s,attrs:{shape:e}}),m.push(a))}if(null!=r){const e=CE(r.shape,d);null!=e&&(r=GC({inputs:{x:r},backend:s,attrs:{shape:e}}),m.push(r))}if(!((1===h||1===p)&&c>1e3)&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&Xs.arraysEqual(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,Xs.assert(oT(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const d=GC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=n$({a:h,b:d,backend:s,transposeA:false,transposeB:false,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i}),y=s.texData.get(g.dataId);Xs.assert(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,y.shape=n.outShape,f=ST({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=n.outHeight*n.outWidth,u=GC({inputs:{x:e},backend:s,attrs:{shape:d?[n.batchSize,l,n.inChannels]:[n.batchSize,n.inChannels,l]}}),c=GC({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=n$({a:d?u:c,b:d?c:u,transposeA:!d,transposeB:false,backend:s,bias:r,activation:o,preluActivationWeights:a,leakyreluAlpha:i});f=GC({inputs:{x:h},backend:s,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function EE({x:e,filter:t,convInfo:n,backend:s,bias:r=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[n.batchSize,m,g],b=[];if(null!=a){const e=CE(a.shape,f);null!=e&&(a=GC({inputs:{x:a},backend:s,attrs:{shape:e}}),b.push(a))}if(null!=r){const e=CE(r.shape,f);null!=e&&(r=GC({inputs:{x:r},backend:s,attrs:{shape:e}}),b.push(r))}const x=GC({inputs:{x:t},backend:s,attrs:{shape:[1,m,Xs.sizeFromShape(t.shape)/m]}});b.push(x);const w=new TE(y,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],k=s.runWebGLProgram(w,[e],"float32",v),I=GC({inputs:{x:k},backend:s,attrs:{shape:y}});b.push(k),b.push(I);const S=null!=r,N=null!=a,T="leakyrelu"===o,C=o?PT(o,!0):null,$=new WT(f?I.shape:x.shape,f?x.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,C,N,T),E=f?[I,x]:[x,I];if(r&&E.push(r),N&&E.push(a),T){const e=s.makeTensorInfo([],"float32",Xs.createScalarValue(i,"float32"));E.push(e),b.push(e)}const A=s.runWebGLProgram($,E,"float32"),R=GC({inputs:{x:A},backend:s,attrs:{shape:n.outShape}});b.push(A);for(const e of b)s.disposeIntermediateTensorInfo(e);return R}const AE={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Tm.convertConv2DDataFormat(l),p=Tm.computeConv2DInfo(r.shape,a.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===h&&oe().getBool("WEBGL_EXP_CONV")){const e=new NE(p),t=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];d=n.runWebGLProgram(e,[r,a],"float32",t)}else if(oe().getBool("WEBGL_CONV_IM2COL"))d=EE({x:r,filter:a,convInfo:p,backend:n});else{const e=new IE(p);d=n.runWebGLProgram(e,[r,a],"float32")}else d=$E({x:r,filter:a,convInfo:p,backend:n});const f=GC({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class RE{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              ${a?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class FE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=a?1:2,u=a?2:3,c=a?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class _E{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.padInfo.front,a=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${r};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${a};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DE{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,r=e.strideDepth,a=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${r}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${a}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const OE={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Tm.convertConv2DDataFormat(l),p=Tm.computeConv2DInfo(r.shape,c,i,1,o,u,!1,h),d=new RE(p);return n.runWebGLProgram(d,[r,a],"float32")}};class ME{constructor(e){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=e.inShape,this.enableShapeUniforms=bT(this.outputShape.length);const t=e.filterHeight,n=e.filterWidth,s=t-1-e.padInfo.top,r=n-1-e.padInfo.left;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${r});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            int wCPerm = ${n} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${e.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${e.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${e.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const LE={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Tm.convertConv2DDataFormat(u),p=Tm.computeConv2DInfo(i,a.shape,o,1,l,c,!1,h);if(oe().getBool("WEBGL_PACK")&&"channelsLast"===h){const e=[[p.strideHeight,p.strideWidth]],t=new ME(p);return n.runWebGLProgram(t,[r,a],"float32",e)}{const e=new FE(p);return n.runWebGLProgram(e,[r,a],"float32")}}};const zE={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Tm.computeConv3DInfo(r.shape,a.shape,i,l,o),c=new SE(u);return n.runWebGLProgram(c,[r,a],"float32")}};const BE={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,pad:o,filterShape:l}=s,u=Tm.computeConv3DInfo(r.shape,l,i,1,o),c=new _E(u);return n.runWebGLProgram(c,[r,a],"float32")}};const PE={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{pad:i,strides:o,inputShape:l}=s,u=Tm.computeConv3DInfo(l,a.shape,o,1,i),c=new DE(u);return n.runWebGLProgram(c,[r,a],"float32")}},WE=zT({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${kT}\n  return result;\n`}),UE={kernelName:lt,backendName:"webgl",kernelFunc:WE},VE=zT({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),GE={kernelName:ut,backendName:"webgl",kernelFunc:VE};class HE{constructor(e,t,n,s,r){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${r}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${r}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const jE={kernelName:pt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:r,boxes:a,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new HE(r.shape,a.shape,o,l,u);return n.runWebGLProgram(c,[r,a,i],"float32")}};var qE;!function(e){e.Prod="*",e.Sum="+"}(qE||(qE={}));class KE{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const r=this.outputShape.length,a=this.op===qE.Prod?"1.0":"0.0",i=n?a:`getX(${XE(r,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${AN(r)} coords = getOutputCoords();\n        int end = ${YE(r,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${YE(r,"coords",this.op)} = idx;\n          val ${this.op}= getX(${XE(r,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function XE(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function YE(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function ZE(e,t,n,s,r,a){const i=t.shape.length,o=Tm.getAxesPermutation([s],i);let l=t;null!=o&&(l=e$({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=Tm.getInnerMostAxes(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=ST({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new KE(e,l.shape,!1,a),r=[[t]],i=h;h=n.runWebGLProgram(s,[h],h.dtype,r),n.disposeIntermediateTensorInfo(i)}if(r){const t=new KE(e,l.shape,r,a),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=e$({inputs:{x:h},backend:n,attrs:{perm:Tm.getUndoAxesPermutation(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const JE={kernelName:ct,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return ZE(qE.Prod,r,n,a,i,o)}};const QE={kernelName:ht,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,exclusive:i,reverse:o}=s;return ZE(qE.Sum,r,n,a,i,o)}};const eA={kernelName:dt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,weights:a}=t,{size:i,binaryOutput:o}=s;if(1===r.shape.length){const e=n.readSync(r.dataId),t=n.readSync(a.dataId),s=qT(e,t,a.dtype,a.shape,i);return n.makeTensorInfo([i],a.dtype,s)}if(2===r.shape.length){const e=n.bufferSync(r),t=n.bufferSync(a),s=KT(e,t,i,o);return n.makeTensorInfo(s.shape,a.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class tA{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const nA={kernelName:ft,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockSize:a,dataFormat:i}=s,o=r.shape[0],l=("NHWC"===i?r.shape[1]:r.shape[2])*a,u=("NHWC"===i?r.shape[2]:r.shape[3])*a,c=("NHWC"===i?r.shape[3]:r.shape[1])/(a*a),h=new tA("NHWC"===i?[o,l,u,c]:[o,c,l,u],a,i);return n.runWebGLProgram(h,[r],r.dtype)}};class sA{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bT(this.outputShape.length);const a=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class rA{constructor(e,t=!1,n=null,s=!1,r=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=bT(this.outputShape.length);const a=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?Xs.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,p+=l>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);\n                    } else {\n                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);\n                    }\n                    `:`\n                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                    `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:r?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),r&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const aA={kernelName:mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Tm.computeConv2DInfo(r.shape,a.shape,i,c,o,u,!0);let p;p=oe().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new rA(h):new sA(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[r,a],"float32",d)}};class iA{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,r=e.padInfo.left,a=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${a} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${r};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class oA{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,r=e.strideWidth,a=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${r}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const lA={kernelName:gt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,dy:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Tm.computeConv2DInfo(r.shape,c,i,o,l,u,!0),p=new iA(h);return n.runWebGLProgram(p,[r,a],"float32")}};const uA={kernelName:yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,filter:a}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Tm.computeConv2DInfo(c,a.shape,i,o,l,u,!0),p=new oA(h);return n.runWebGLProgram(p,[r,a],"float32")}};class cA{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const hA={kernelName:bt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,r=[...s.shape,...s.shape],a=Xs.sizeFromShape(s.shape),i=GC({inputs:{x:s},backend:n,attrs:{shape:[a]}}),o=new cA(a),l=n.runWebGLProgram(o,[i],i.dtype),u=GC({inputs:{x:l},backend:n,attrs:{shape:r}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class pA{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:r,strideWidth:a,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${r}, ${a});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const dA={kernelName:xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a}=t,{strides:i,pad:o,dilations:l}=s,u=Tm.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);let c;const h=new pA(u);c=n.runWebGLProgram(h,[r,a],"float32");const p=GC({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}};const fA={kernelName:It,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:r}=s,a=t,{allDims:i,summedDims:o,idDims:l}=Tm.decodeEinsumEquation(r,a.length);Tm.checkEinsumDimSizes(i.length,l,a);const{path:u,steps:c}=Tm.getEinsumComputePath(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Tm.getEinsumPermutation(d,l[t]);let r;Tm.isIdentityPermutation(e)?r=a[t]:(r=e$({inputs:{x:a[t]},backend:n,attrs:{perm:e}}),f.push(r));const i=r.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);Xs.arraysEqual(r.shape,i)||(r=GC({inputs:{x:r},backend:n,attrs:{shape:i}}),f.push(r)),null===p?p=r:(p=WC({inputs:{a:r,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=JC({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},mA=zT({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),gA={kernelName:St,backendName:"webgl",kernelFunc:mA},yA={kernelName:Nt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:r}=t,a=oe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new IT("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new xT("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return n.runWebGLProgram(a,[s,r],s.dtype)}},bA=BT({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:JT}),xA={kernelName:Ct,backendName:"webgl",kernelFunc:bA},wA=zT({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${Tm.ERF_P};\n  float a1 = ${Tm.ERF_A1};\n  float a2 = ${Tm.ERF_A2};\n  float a3 = ${Tm.ERF_A3};\n  float a4 = ${Tm.ERF_A4};\n  float a5 = ${Tm.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),vA={kernelName:Tt,backendName:"webgl",kernelFunc:wA},kA=zT({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:QT,dtype:"float32"}),IA={kernelName:$t,backendName:"webgl",kernelFunc:kA};function SA(e){const{inputs:t,attrs:n,backend:s}=e,{dim:r}=n,{input:a}=t,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(Xs.assert(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),GC({inputs:{x:a},backend:s,attrs:{shape:o}})}const NA={kernelName:Et,backendName:"webgl",kernelFunc:SA},TA="return exp(x) - 1.0;",CA=zT({opSnippet:TA,packedOpSnippet:TA,cpuKernelImpl:eC}),$A={kernelName:At,backendName:"webgl",kernelFunc:CA};class EA{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const r=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${r};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function AA(e,t,n){const s=n.texData.get(e.dataId),r=Xs.sizeFromShape(e.shape),a=e.shape[e.shape.length-1],i=GC({inputs:{x:e},backend:n,attrs:{shape:[r/a,a]}}),o=i.shape,l=new EA("real",o,t),u=new EA("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=TT({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=GC({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const RA={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return AA(s,!1,n)}};class FA{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function _A(e){const{backend:t,attrs:n}=e,{shape:s,value:r}=n;let{dtype:a}=n;if(a=a||Xs.inferDtype(r),"string"===a){const e=Xs.getArrayFromDType(a,Xs.sizeFromShape(s));return e.fill(r),t.makeTensorInfo(s,a,e)}{const e=new FA(s,r),n=[[r]];return t.runWebGLProgram(e,[],a,n)}}const DA={kernelName:Ft,backendName:"webgl",kernelFunc:_A};class OA{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const MA={kernelName:_t,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,r=new OA(n.shape);return s.runWebGLProgram(r,[n],n.dtype)}},LA="return floor(x);",zA=zT({opSnippet:LA,packedOpSnippet:LA,cpuKernelImpl:tC}),BA={kernelName:Dt,backendName:"webgl",kernelFunc:zA},PA=BT({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),WA={kernelName:Ot,backendName:"webgl",kernelFunc:PA};class UA{constructor(e){this.variableNames=["A"];const t=dN(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class VA{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=dN(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const GA={kernelName:_s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:r}=t;const{numChannels:a}=s,i="undefined"!=typeof HTMLVideoElement&&r instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&r instanceof HTMLImageElement,[l,u]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,a];if(o||i){const e=oe().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");null!=HA&&e===jA||(jA=e,HA=document.createElement("canvas").getContext("2d",{willReadFrequently:jA})),HA.canvas.width=l,HA.canvas.height=u,HA.drawImage(r,0,0,l,u),r=HA.canvas}const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=zN.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),r);const d=oe().getBool("WEBGL_PACK")?new VA(h):new UA(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let HA,jA=oe().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const qA={kernelName:Ms,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Tm.convertConv2DDataFormat(c),g=Tm.computeConv2DInfo(r.shape,a.shape,l,h,u,p,!1,m);let y;const b=[],x=null!=i,w=null!=o,v="leakyrelu"===d,k=()=>{const e=[r,a],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=GC({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(i,c)),w&&e.push(t(o,c)),v){const t=n.makeTensorInfo([],"float32",Xs.createScalarValue(f,"float32"));e.push(t),b.push(t)}return e};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===m&&oe().getBool("WEBGL_EXP_CONV")){const e=d?PT(d,!0):null,t=new NE(g,x,e,w,v),s=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],r=k();y=n.runWebGLProgram(t,r,"float32",s)}else if(oe().getBool("WEBGL_CONV_IM2COL"))y=EE({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=d?PT(d,!1):null,t=new IE(g,x,e,w,v),s=k();y=n.runWebGLProgram(t,s,"float32")}else y=$E({x:r,filter:a,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const I=GC({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};const KA={kernelName:Ls,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,filter:a,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),Xs.assert(Tm.eitherStridesOrDilationsAreOne(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Tm.computeConv2DInfo(r.shape,a.shape,l,m,u,h,!0),y=oe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?PT(p,y):null,x=[r,a],w=null!=i,v=null!=o,k="leakyrelu"===p;if(w&&x.push(i),v&&x.push(o),k){const e=n.makeTensorInfo([],"float32",Xs.createScalarValue(d,"float32"));x.push(e),f.push(e)}let I;I=y?new rA(g,w,b,v,k):new sA(g,w,b,v,k);const S=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],N=n.runWebGLProgram(I,x,"float32",S);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),N}};class XA{constructor(e,t,n,s){this.sliceDim=e,this.strides=t,this.paramsShape=s,this.variableNames=["x","indices"],this.outputShape=n;const r=AN(n.length);let a="\n    int index;";for(let e=0;e<this.sliceDim;e++)a+=`\n          index = round(getIndices(coords[0], ${e}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};\n          flattenIndex += index * ${this.strides[e]};`;this.userCode=`\n         void main() {\n          ${r} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const YA={kernelName:zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:r}=t,a=r.shape,i=a[a.length-1],o=Xs.sizeFromShape(s.shape),[l,u,c,h]=Tm.prepareAndValidate(s,r),p=GC({inputs:{x:r},backend:n,attrs:{shape:[u,i]}}),d=GC({inputs:{x:s},backend:n,attrs:{shape:[Xs.sizeFromShape(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const e=n.readSync(r.dataId),t=n.bufferSync(s),a=nC(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,a.values)}const f=new XA(i,h,[u,c],s.shape),m=n.runWebGLProgram(f,[d,p],d.dtype),g=GC({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class ZA{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=AN(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function JA(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,indices:a}=t,{axis:i,batchDims:o}=s,l=Xs.parseAxisParam(i,r.shape)[0];if(oe().get("DEBUG")){const e=n.readSync(a.dataId),t=r.shape[l];for(let n=0;n<e.length;++n){const s=e[n];Xs.assert(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=Tm.segment_util.collectGatherOpShapeInfo(r,a,l,o),c=Xs.sizeFromShape(a.shape),h=[],p=GC({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=GC({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(p),h.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=sC(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new ZA(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=GC({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const QA={kernelName:Lt,backendName:"webgl",kernelFunc:JA},eR=BT({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:rC,dtype:"bool"}),tR={kernelName:Bt,backendName:"webgl",kernelFunc:eR},nR=BT({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:aC}),sR={kernelName:Pt,backendName:"webgl",kernelFunc:nR};const rR={kernelName:Ut,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return AA(s,!0,n)}},aR=zT({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),iR={kernelName:Gt,backendName:"webgl",kernelFunc:aR},oR=zT({opSnippet:"return float(isinf(x));",dtype:"bool"}),lR={kernelName:Ht,backendName:"webgl",kernelFunc:oR},uR=zT({opSnippet:"return float(isnan(x));",dtype:"bool"}),cR={kernelName:jt,backendName:"webgl",kernelFunc:uR},hR=BT({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:iC,dtype:"bool"}),pR={kernelName:Kt,backendName:"webgl",kernelFunc:hR},dR=BT({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:oC,dtype:"bool"}),fR={kernelName:Xt,backendName:"webgl",kernelFunc:dR};const mR={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:r,num:a}=n,i=lC(s,r,a);return t.makeTensorInfo([i.length],"float32",i)}},gR=zT({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:uC}),yR={kernelName:Zt,backendName:"webgl",kernelFunc:gR},bR=zT({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),xR={kernelName:Jt,backendName:"webgl",kernelFunc:bR},wR=BT({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),vR={kernelName:Qt,backendName:"webgl",kernelFunc:wR},kR=zT({opSnippet:"return float(!(x >= 1.0));"}),IR={kernelName:en,backendName:"webgl",kernelFunc:kR},SR=BT({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),NR={kernelName:tn,backendName:"webgl",kernelFunc:SR};class TR{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[];const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class CR{constructor(e,t,n,s,r){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===r?`inversesqrt(${l})`:1===r?`1.0/(${l})`:`exp(log(${l}) * float(-${r}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const $R={kernelName:nn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{depthRadius:a,bias:i,alpha:o,beta:l}=s,u=oe().getBool("WEBGL_PACK_NORMALIZATION")?new CR(r.shape,a,i,o,l):new TR(r.shape,a,i,o,l);return n.runWebGLProgram(u,[r],r.dtype)}};class ER{constructor(e,t,n,s,r){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=r,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${r})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${r});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const AR={kernelName:sn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r,y:a,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new ER(r.shape,o,l,u,c);return n.runWebGLProgram(h,[r,a,i],r.dtype)}};function RR(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reductionIndices:a,keepDims:i}=s,o=r.shape.length,l=Xs.parseAxisParam(a,r.shape);let u=l;const c=Tm.getAxesPermutation(u,o),h=null!=c,p=n.shouldExecuteOnCPU([r]);let d=r;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=r.shape[c[e]];const s=zC(e,r.shape,r.dtype,c,t);d=n.makeTensorInfo(t,r.dtype);n.texData.get(d.dataId).values=s}else d=ZC(r,c,n);u=Tm.getInnerMostAxes(u.length,o)}Tm.assertAxesAreInnerMostDims("max",u,o);const[f,m]=Tm.computeOutAndReduceShapes(d.shape,u);let g,y=f;if(i&&(y=Tm.expandShapeToKeepDim(f,l)),p){const e=n.texData.get(d.dataId).values,t=cC(e,Xs.sizeFromShape(m),y,r.dtype);g=n.makeTensorInfo(y,r.dtype);n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const r=Xs.sizeFromShape(t),a=GC({inputs:{x:e},attrs:{shape:[Xs.sizeFromShape(e.shape)/r,r]},backend:s}),i=KC(a,e.dtype,"max",s),o=GC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const FR={kernelName:rn,backendName:"webgl",kernelFunc:RR},_R=BT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:hC}),DR={kernelName:an,backendName:"webgl",kernelFunc:_R};const OR={kernelName:on,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;fT(r,"maxPool");const{filterSize:a,strides:i,pad:o,dimRoundingMode:l}=s;Xs.assert(Tm.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=Tm.computePool2DInfo(r.shape,a,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&Xs.arraysEqual(u.inShape,u.outShape))return ST({inputs:{x:r},backend:n});const c=new O$(u,"max",!1);return n.runWebGLProgram(c,[r],r.dtype)}};const MR={kernelName:un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{filterSize:a,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=Tm.computePool3DInfo(r.shape,a,i,[1,1,1],o,u,l),h=new M$(c,"max",!1);return n.runWebGLProgram(h,[r],r.dtype)}};class LR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,r=e.effectiveFilterHeight,a=e.effectiveFilterWidth,i=r-1-e.padInfo.top,o=a-1-e.padInfo.left,l=r*a-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${r};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zR{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,r=e.dilationDepth,a=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${r}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${a}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const BR={kernelName:cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a}=t,i=a,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=Tm.computePool3DInfo(i.shape,o,l,[1,1,1],u,c),p=new M$(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new zR(h),m=n.runWebGLProgram(f,[r,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}};const PR={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:r,input:a,output:i}=t,o=a;fT([a,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=Tm.computePool2DInfo(o.shape,l,u,1,c,h),d=new O$(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new LR(p),g=n.runWebGLProgram(m,[r,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}};const WR={kernelName:hn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:r,strides:a,pad:i,includeBatchInIndex:o}=t,l=n;Xs.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];Xs.assert(Tm.eitherStridesOrDilationsAreOne(a,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`));const c=Tm.computePool2DInfo(s.shape,r,a,u,i),[h,p]=function(e,t,n,s){let r=new O$(n,"max",!1);const a=s.runWebGLProgram(r,[e],"float32");return r=new O$(n,"max",!0,!0,t),[a,s.runWebGLProgram(r,[e],"float32")]}(s,o,c,l);return[h,p]}};const UR={kernelName:pn,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:r,axis:a}=t,i=n,o=s.shape.length,l=Xs.parseAxisParam(a,s.shape);let u=l;const c=Tm.getAxesPermutation(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=zC(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype);i.texData.get(f.dataId).values=n}else f=ZC(s,c,i);d.push(f),u=Tm.getInnerMostAxes(u.length,o)}Tm.assertAxesAreInnerMostDims("sum",u,o);const[m,g]=Tm.computeOutAndReduceShapes(f.shape,u);let y=m;r&&(y=Tm.expandShapeToKeepDim(m,l));const b=function(e,t,n,s){const r=Xs.sizeFromShape(t),a=GC({inputs:{x:e},attrs:{shape:[Xs.sizeFromShape(e.shape)/r,r]},backend:s}),i=KC(a,"float32","mean",s),o=GC({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}};const VR={kernelName:dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=Xs.parseAxisParam(a,r.shape);let u=l;const c=Tm.getAxesPermutation(u,o);let h=r;null!=c&&(h=e$({inputs:{x:r},backend:n,attrs:{perm:c}}),u=Tm.getInnerMostAxes(u.length,r.shape.length)),Tm.assertAxesAreInnerMostDims("min",u,o);const[p,d]=Tm.computeOutAndReduceShapes(h.shape,u),f=GC({inputs:{x:h},backend:n,attrs:{shape:[-1,Xs.sizeFromShape(d)]}}),m=KC(f,f.dtype,"min",n);let g;if(i){g=GC({inputs:{x:m},backend:n,attrs:{shape:Tm.expandShapeToKeepDim(p,l)}})}else g=GC({inputs:{x:m},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},GR=BT({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:pC}),HR={kernelName:fn,backendName:"webgl",kernelFunc:GR};class jR{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=AN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${r} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class qR{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=AN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=vT("rc",s),l=vT("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${r} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${r} source = rc;\n        ${r} lt = ${r}(lessThan(source, start));\n        ${r} gte = ${r}(greaterThanEqual(source, end));\n        ${r} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${r} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const KR={kernelName:mn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:r,mode:a}=n,i=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qR(s.shape,r,a):new jR(s.shape,r,a);return t.runWebGLProgram(i,[s],s.dtype)}},XR=BT({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),YR={kernelName:gn,backendName:"webgl",kernelFunc:XR};class ZR{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const JR=BT({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),QR={kernelName:kt,backendName:"webgl",kernelFunc:JR},eF="return a - b;",tF=BT({opSnippet:eF,packedOpSnippet:eF,supportsComplex:!0,cpuKernelImpl:OC}),nF={kernelName:vs,backendName:"webgl",kernelFunc:tF};function sF(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{dim:a}=s,i=Xs.parseAxisParam([a],r.shape),o=RR({inputs:{x:r},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Tm.expandShapeToKeepDim(o.shape,i),u=GC({inputs:{x:o},backend:n,attrs:{shape:l}}),c=tF({inputs:{a:r,b:u},backend:n}),h=kA({inputs:{x:c},backend:n}),p=JC({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=GC({inputs:{x:p},backend:n,attrs:{shape:l}}),f=JR({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const rF={kernelName:ls,backendName:"webgl",kernelFunc:sF};const aF={kernelName:yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:r}=t,{numSamples:a,seed:i,normalized:o}=s,l=o?r:sF({inputs:{logits:r},backend:n,attrs:{dim:r.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new ZR(u,c,a),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}};const iF={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,r]=fC(e.values,s.shape,s.dtype);return n.makeTensorInfo(r,s.dtype,t)}let r;return r=oe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new LT(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new DT(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(r,[s],s.dtype)}},oF=jg.nonMaxSuppressionV3Impl;const lF={kernelName:vn,backendName:"webgl",kernelFunc:function(e){Tm.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),{selectedIndices:h}=oF(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},uF=jg.nonMaxSuppressionV4Impl;const cF={kernelName:kn,backendName:"webgl",kernelFunc:function(e){Tm.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),{selectedIndices:p,validOutputs:d}=uF(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},hF=jg.nonMaxSuppressionV5Impl;const pF={kernelName:In,backendName:"webgl",kernelFunc:function(e){Tm.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:r,scores:a}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(r.dataId),h=n.readSync(a.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=hF(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class dF{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const fF={kernelName:Nn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:r}=t,{dtype:a,depth:i,onValue:o,offValue:l}=s,u=Xs.sizeFromShape(r.shape),c=new dF(u,i,o,l),h=GC({inputs:{x:r},backend:n,attrs:{shape:[u]}}),p=n.runWebGLProgram(c,[h],a);n.disposeIntermediateTensorInfo(h);const d=GC({inputs:{x:p},backend:n,attrs:{shape:[...r.shape,i]}});return n.disposeIntermediateTensorInfo(p),d}};function mF(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=sE({inputs:{input:s},backend:n}),t=mF({inputs:{x:e},backend:n}),r=bE({inputs:{input:s},backend:n}),a=mF({inputs:{x:r},backend:n}),i=TT({inputs:{real:t,imag:a},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}return _A({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const gF={kernelName:Rs,backendName:"webgl",kernelFunc:mF};const yF={kernelName:Sn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:r}=n;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const t=sE({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s}),a=bE({inputs:{input:r},backend:s}),i=mF({inputs:{x:a},backend:s}),o=TT({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(a),s.disposeIntermediateTensorInfo(i),o}return _A({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:s})}};const bF={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:r}=s;if(1===t.length)return SA({inputs:{input:t[0]},backend:n,attrs:{dim:r}});const a=t[0].shape,i=t[0].dtype;t.forEach((e=>{Xs.assertShapesMatch(a,e.shape,"All tensors passed to stack must have matching shapes"),Xs.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=vE({inputs:t.map((e=>{const t=SA({inputs:{input:e},backend:n,attrs:{dim:r}});return o.push(t),t})),backend:n,attrs:{axis:r}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class xF{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=AN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${r} start = ${r}(${a});\n      ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${r} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class wF{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,r=AN(s),a=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=vT("rc",s),l=vT("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${r} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${r} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${r} start = ${r}(${a});\n      const ${r} end = ${r}(${i});\n\n      void main() {\n        ${r} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const vF=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{paddings:a,constantValue:i}=s;if(0===Xs.sizeFromShape(r.shape)){return _A({backend:n,attrs:{shape:a.map(((e,t)=>e[0]+r.shape[t]+e[1])),value:i,dtype:r.dtype}})}const o=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wF(r.shape,a,i):new xF(r.shape,a,i),l=[[i]];return n.runWebGLProgram(o,[r],r.dtype,l)},kF={kernelName:Cn,backendName:"webgl",kernelFunc:vF},IF=BT({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  \n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n\n  return result;\n"}),SF={kernelName:$n,backendName:"webgl",kernelFunc:IF};const NF={kernelName:An,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{axis:a,keepDims:i}=s,o=r.shape.length,l=[],u=Xs.parseAxisParam(a,r.shape);let c=u;const h=Tm.getAxesPermutation(c,o);let p,d=r;if(null!=h&&(d=e$({inputs:{x:r},backend:n,attrs:{perm:h}}),c=Tm.getInnerMostAxes(c.length,o),l.push(d)),Tm.assertAxesAreInnerMostDims("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:r}=gC(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,r,t)}else{const[e,t]=Tm.computeOutAndReduceShapes(d.shape,c),s=Xs.sizeFromShape(t),a=GC({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=KC(a,ya(r.dtype),"prod",n);p=GC({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(a),l.push(i)}if(i){l.push(p);const e=Tm.expandShapeToKeepDim(p.shape,u);p=GC({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}};const TF={kernelName:Rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{paramsNestedSplits:r,paramsDenseValues:a,indices:i}=t,{outputRaggedRank:o}=s,l=r.map((e=>n.readSync(e.dataId))),u=r.map((e=>e.shape)),c=n.readSync(a.dataId),h=n.readSync(i.dataId),[p,d,f]=yC(l,u,c,a.shape,a.dtype,h,i.shape,o),m=p.map((e=>n.makeTensorInfo([e.length],"int32",e))),g=n.makeTensorInfo(f,a.dtype,d);return m.concat([g])}};const CF={kernelName:Fn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{starts:s,limits:r,deltas:a}=t,i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=bC(i,s.shape,s.dtype,o,r.shape,l,a.shape);return[n.makeTensorInfo([u.length],"int32",u),n.makeTensorInfo([c.length],s.dtype,c)]}};const $F={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{shape:r,values:a,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=s,u=n.readSync(r.dataId),c=n.readSync(a.dataId),h=n.readSync(i.dataId),p=o.map((e=>n.readSync(e.dataId))),d=o.map((e=>e.shape)),[f,m]=xC(u,r.shape,c,a.shape,a.dtype,h,i.shape,p,d,l);return n.makeTensorInfo(f,a.dtype,m)}},EF=e=>{const{backend:t,attrs:n}=e,{start:s,stop:r,step:a,dtype:i}=n,o=wC(s,r,a,i);return t.makeTensorInfo([o.length],i,o)},AF={kernelName:Dn,backendName:"webgl",kernelFunc:EF},RF=zT({opSnippet:"return 1.0 / x;"}),FF={kernelName:Mn,backendName:"webgl",kernelFunc:RF},_F=zT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),DF={kernelName:Ln,backendName:"webgl",kernelFunc:_F},OF=zT({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),MF={kernelName:Vn,backendName:"webgl",kernelFunc:OF};class LF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class zF{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=r?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const BF={kernelName:Wn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=oe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new zF(r.shape,l,u,a,i):new LF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],"float32")}};class PF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${r-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const WF={kernelName:Un,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new PF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class UF{constructor(e,t,n,s,r){this.variableNames=["A"],this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class VF{constructor(e,t,n,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,o,l]=e;this.outputShape=[a,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=r?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const GF={kernelName:Bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r}=t,{alignCorners:a,halfPixelCenters:i,size:o}=s,[l,u]=o,c=oe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new VF(r.shape,l,u,a,i):new UF(r.shape,l,u,a,i);return n.runWebGLProgram(c,[r],r.dtype)}};class HF{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,r]=t,[,a,i]=e,o=[n&&a>1?s-1:s,n&&i>1?r-1:r],l=[n&&a>1?a-1:a,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const jF={kernelName:Pn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:r,dy:a}=t,{alignCorners:i}=s,o=new HF(a.shape,r.shape,i);return n.runWebGLProgram(o,[a],a.dtype)}};class qF{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),r=AN(n);this.userCode=`\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class KF{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=vT("rc",n),r=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,a=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=AN(n);var o;function l(n){const s=e.map(((s,r)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(r,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${r}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${o=s.slice(),l(o)};\n          if(${r}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",l(e)}(s.slice())};\n          }\n          if(${a}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            if(${r}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",l(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const XF={kernelName:Gn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{dims:a}=s,i=r.shape.length,o=Xs.parseAxisParam(a,r.shape);if(0===i)return ST({inputs:{x:r},backend:n});const l=oe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new KF(r.shape,o):new qF(r.shape,o);return n.runWebGLProgram(l,[r],r.dtype)}};class YF{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let r="";r="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${r}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const ZF={kernelName:Ds,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:r,fillValue:a,center:i}=t,o=n,l=new YF(s.shape,a),[u,c]=Tm.getImageCenter(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},JF=zT({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),QF={kernelName:Hn,backendName:"webgl",kernelFunc:JF},e_=zT({opSnippet:"return inversesqrt(x);",cpuKernelImpl:vC}),t_={kernelName:jn,backendName:"webgl",kernelFunc:e_};class n_{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=AN(r.length),u=AN(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let p="";1===s?p="i":2===s&&(p="i, coords[1]");const d=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${h});\n              flattenedIndex += index * ${g};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(${m}, sum, float(found)));\n        }\n      `}}class s_{constructor(e,t,n,s,r,a,i=!0,o=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const l=AN(r.length),u=AN(a.length);let c="";1===n?c="i":2===n&&(c="i, j");const h=`getIndices(${c})`;let p="";1===s?p="i":2===s&&(p="i, coords[1]");const d=`getUpdates(${p})`;let f="";o&&(f="coords[0], coords[1]");const m=`getDefaultValue(${f})`,g=t>1?"strides[j]":"strides",y=t>1?"strides[j + 1]":"strides";this.userCode=`\n        ${l} strides = ${l}(${r});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${e}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${t}; j+=2) {\n              ivec4 index = round(${h});\n              flattenedIndex += index.xz * ${g};\n              if (j + 1 < ${t}) {\n                flattenedIndex += index.yw * ${y};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${d};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${m}, sum, found));\n        }\n      `}}const r_={kernelName:qn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:r,updates:a}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tm.calculateShapes(a,r,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,r.dtype);const d=GC({inputs:{x:r},backend:n,attrs:{shape:[l,o]}}),f=GC({inputs:{x:a},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=oe().getBool("WEBGL_PACK")?new s_(l,o,d.shape.length,f.shape.length,c,p):new n_(l,o,d.shape.length,f.shape.length,c,p);const y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=GC({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class a_{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const r=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,a=2===oe().getNumber("WEBGL_VERSION")?"while (left < right) {":r,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${a}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const i_={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:r,values:a}=t,{side:i}=s,o=new a_(r.shape[0],r.shape[1],a.shape[1],i),l=[[r.shape[1]]];return n.runWebGLProgram(o,[r,a],"int32",l)}};class o_{constructor(e,t,n){let s,r;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)r="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&a.push(`${n[s]}`);s=a.join(),r=i.join()}const a=AN(n);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${r}));\n        } else {\n          setOutput(getB(${r}));\n        }\n      }\n    `}}const l_={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:r,e:a}=t,i=new o_(s.shape.length,r.shape,r.shape.length);return n.runWebGLProgram(i,[s,r,a],ga(r.dtype,a.dtype))}},u_=zT({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Tm.SELU_SCALEALPHA};\n  float scale = ${Tm.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),c_={kernelName:Zn,backendName:"webgl",kernelFunc:u_},h_=zT({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:IC}),p_={kernelName:ns,backendName:"webgl",kernelFunc:h_},d_=zT({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),f_={kernelName:ts,backendName:"webgl",kernelFunc:d_},m_=zT({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${kT}\n  return result;\n`}),g_={kernelName:Qn,backendName:"webgl",kernelFunc:m_},y_=zT({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),b_={kernelName:es,backendName:"webgl",kernelFunc:y_},x_=zT({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),w_={kernelName:ss,backendName:"webgl",kernelFunc:x_},v_={kernelName:is,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{blockShape:a,paddings:i}=s;Xs.assert(r.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=a.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+a.length;e<r.shape.length;++e)l.push([0,0]);const u=[],c=vF({inputs:{x:r},backend:n,attrs:{paddings:l,constantValue:0}}),h=Tm.getReshaped(c.shape,a,o,!1),p=Tm.getPermuted(h.length,a.length,!1),d=Tm.getReshapedPermuted(c.shape,a,o,!1),f=GC({inputs:{x:c},backend:n,attrs:{shape:h}}),m=e$({inputs:{x:f},backend:n,attrs:{perm:p}}),g=GC({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}};const k_={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:r,denseShape:a,defaultValue:i}=t;if(1!==a.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${a.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=TC(o,s.shape,s.dtype,l,r.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],r.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};const I_={kernelName:cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:r,newShape:a}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Target shape should be a vector but received shape ${a.shape}`);const i=Array.from(n.readSync(r.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(a.dataId)),[u,c,h]=CC(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],a.dtype,new Int32Array(h))]}};const S_={kernelName:hs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=$C(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}};const N_={kernelName:ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:r,segmentIds:a}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==a.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${a.shape}`);const i=n.readSync(s.dataId),o=n.readSync(r.dataId),l=n.readSync(a.dataId),[u,c]=$C(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}};const T_={kernelName:ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:r,sparseValues:a,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=Tm.calculateShapes(a,r,o);if("string"===a.dtype){const e=n.bufferSync(r),t=n.bufferSync(a),s=Xs.decodeString(n.readSync(i.dataId)[0]),d=kC(e,t,o,p,c,u,l,h,s,false);return n.makeTensorInfo(o,d.dtype,d.values)}const d=new n_(u,l,r.shape.length,a.shape.length,h,[p,1],false),f=n.runWebGLProgram(d,[a,r,i],a.dtype),m=GC({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}};const C_={kernelName:os,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{numOrSizeSplits:a,axis:i}=s,o=Xs.parseAxisParam(i,r.shape)[0],l=Tm.prepareSplitSize(r,a,o),u=r.shape.length,c=new Array(u).fill(0),h=r.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=Y$({inputs:{x:r},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},$_="return sqrt(x);",E_=zT({opSnippet:$_,packedOpSnippet:$_,cpuKernelImpl:EC}),A_={kernelName:rs,backendName:"webgl",kernelFunc:E_},R_={kernelName:ms,backendName:"webgl",kernelFunc:zT({opSnippet:"return x * x;"})},F_="return (a - b) * (a - b);",__=BT({opSnippet:F_,packedOpSnippet:F_}),D_={kernelName:fs,backendName:"webgl",kernelFunc:__};const O_={kernelName:gs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=n.readSync(r.dataId),i=Tm.fromUint8ToStringArray(a),o=AC(i,"string",s);return n.makeTensorInfo(r.shape,"string",o)}};const M_={kernelName:Fs,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,r=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,a=new DT(s.shape,r);return n.runWebGLProgram(a,[s],s.dtype)}};class L_{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,r=AN(n.length),a=AN(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${r} begin = ${r}(${e});\n      ${r} strides = ${r}(${t});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const z_={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{begin:a,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=lm.sliceInfo(r.shape,a,i,o,l,u,c,h,p);let v;if(m)v=GC({inputs:{x:r},backend:n,attrs:{shape:f}});else if(g||y){Xs.assert(r.shape.length>=1,(()=>`Input must have rank at least 1, got: ${r.shape.length}`));const e=lm.computeOutShape(b,x,w),t=Y$({inputs:{x:r},backend:n,attrs:{begin:b,size:e}});v=GC({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([r])){const e=n.readSync(r.dataId),t=el(r.shape,r.dtype,e),s=RC(d,t,w,b);v=n.makeTensorInfo(f,r.dtype,s.values)}else{const e=new L_(b,w,d);v=n.runWebGLProgram(e,[r],r.dtype)}}const k=GC({inputs:{x:v},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(v),k}};const B_={kernelName:bs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:r,nGramWidths:a,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=FC(p,d,r,a,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};const P_={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:r}=s,{input:a,delimiter:i}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(1!==a.shape.length)throw new Error(`Input must be a vector, got shape: ${a.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(a.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=_C(o,l,r),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};const W_={kernelName:ws,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:r}=s,{input:a}=t;if("string"!==a.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(a.dataId),o=DC(i,r);return n.makeTensorInfo(a.shape,"int32",o)}},U_=zT({opSnippet:"return tan(x);"}),V_={kernelName:ks,backendName:"webgl",kernelFunc:U_},G_=zT({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),H_={kernelName:Is,backendName:"webgl",kernelFunc:G_};const j_={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{tensor:r,indices:a,updates:i}=t,{}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Tm.calculateShapes(i,a,r.shape),p=[h/u,u];if(0===h)return n.makeTensorInfo(r.shape,a.dtype);const d=GC({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=GC({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),m=GC({inputs:{x:r},backend:n,attrs:{shape:p}}),g=new n_(l,o,d.shape.length,f.shape.length,c,p,!1,!0),y=n.runWebGLProgram(g,[f,d,m],m.dtype),b=GC({inputs:{x:y},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(y),b}};class q_{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=AN(this.rank),r=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function K_(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{reps:a}=s;if("string"===r.dtype||r.shape.length>5){const e=n.readSync(r.dataId),t="string"===r.dtype?e.map((e=>Xs.decodeString(e))):e,s=el(r.shape,r.dtype,t),i=MC(s,a);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new q_(r.shape,a);return n.runWebGLProgram(i,[r],r.dtype)}const X_={kernelName:Ss,backendName:"webgl",kernelFunc:K_};class Y_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class Z_{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function J_(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Q_(e){let t=1;for(;t<e;)t*=2;return t}const eD={kernelName:Ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r}=t,{k:a,sorted:i}=s,o=oe().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=oe().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([r])||c<o||a>l){const e=n.readSync(r.dataId),[t,s]=LC(e,u,r.dtype,a,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===a)return u[u.length-1]=0,[n.makeTensorInfo(u,r.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[r,_A({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(r.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(r):r,f=Xs.sizeFromShape(u)/c,m=GC({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&J_(n,d);const g=Q_(a),y=Q_(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const r=x(),a=new Y_(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(a,r,"int32",i),J_(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),s=new Z_([f,e/2]),r=[[c],[null===b?1:0],[g]],a=b;b=n.runWebGLProgram(s,t,"int32",r),J_(n,a);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let v=b;b=Y$({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,a]}}),J_(n,v);let k=JA({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});J_(n,m);const I=u.slice(0,-1);I.push(a),v=b,b=GC({inputs:{x:b},attrs:{shape:I},backend:n}),J_(n,v);const S=k;return k=GC({inputs:{x:k},attrs:{shape:I},backend:n}),J_(n,S),[k,b]}};class tD{constructor(e,t,n,s,r,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${r});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${r});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const nD={kernelName:Ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:r,transforms:a}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=r.shape,[f,m]=null!=u?u:[h,p],g=new tD(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[r,a],"float32")}};const sD={kernelName:$s,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:r}=n,{x:a}=t;fT(a,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(a.dataId),{outputValues:o,outputShape:l,indices:u}=BC(i,r,a.shape,a.dtype);return[s.makeTensorInfo(l,a.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}};const rD={kernelName:Es,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:r}=t;let{axis:a}=s;a<0&&(a+=r.shape.length);const i=r,o=i.shape.length,l=r.shape[a],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==a&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[a]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[a]=e;const t=Y$({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=GC({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class aD{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,r=e.inSize,a=e.numSegments,i=a*Math.ceil(r/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";r%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return initializationValue;\n        }\n      `);let h="";r%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${r}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const iD=[s$,a$,o$,u$,p$,m$,g$,y$,I$,S$,T$,$$,A$,F$,D$,L$,z$,W$,U$,V$,j$,J$,Q$,eE,aE,lE,hE,CT,fE,kE,AE,OE,LE,zE,BE,PE,UE,GE,jE,JE,QE,eA,nA,aA,lA,uA,hA,dA,fA,gA,yA,xA,vA,IA,NA,$A,RA,DA,MA,BA,WA,GA,qA,KA,YA,QA,tR,sR,NT,rR,xE,iR,lR,cR,AT,pR,fR,mR,yR,xR,vR,IR,NR,$R,AR,FR,DR,OR,MR,BR,PR,WR,UR,VR,HR,KR,YR,aF,UC,iF,lF,cF,pF,nE,fF,yF,bF,kF,SF,_T,NF,TF,CF,$F,AF,rE,QR,FF,DF,MF,HC,BF,WF,GF,jF,XF,ZF,QF,t_,r_,i_,l_,c_,p_,f_,g_,b_,Z$,rF,w_,v_,k_,I_,S_,N_,T_,C_,A_,R_,D_,O_,M_,z_,B_,P_,W_,nF,QC,V_,H_,j_,X_,eD,nD,t$,sD,rD,{kernelName:As,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:r,segmentIds:a}=t,{numSegments:i}=s,o=r.shape.length,l=[];let u=0;const c=Tm.getAxesPermutation([u],o);let h=r;null!=c&&(h=e$({inputs:{x:r},backend:n,attrs:{perm:c}}),l.push(h),u=Tm.getInnerMostAxes(1,o)[0]);const p=Tm.segment_util.computeOutShape(h.shape,u,i),d=Xs.sizeFromShape([h.shape[u]]),f=GC({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=ya(r.dtype),g=(e,t,s,r,a)=>{const i=e.shape[0],o=e.shape[1],u=Tm.segment_util.segOpComputeOptimalWindowSize(o,a),c=new aD({windowSize:u,inSize:o,batchSize:i,numSegments:a},t),h=n.compileAndRun(c,[e,s],r);if(l.push(h),h.shape[1]===a)return h;const p=EF({backend:n,attrs:{start:0,stop:a,step:1,dtype:"float32"}}),d=K_({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});l.push(p),l.push(d);return g(h,t,d,r,a)},y=GC({inputs:{x:g(f,"unsortedSegmentSum",a,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Tm.getUndoAxesPermutation(c);b=e$({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},gF];for(const e of iD)js(e);const oD=oe();oD.registerFlag("HAS_WEBGL",(()=>oD.getNumber("WEBGL_VERSION")>0)),oD.registerFlag("WEBGL_VERSION",(()=>hT(2)?2:hT(1)?1:0)),oD.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),oD.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===oD.get("WEBGL_VERSION"))),oD.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),oD.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),oD.registerFlag("WEBGL_PACK",(()=>oD.getBool("HAS_WEBGL"))),oD.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_CLIP",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_PACK_REDUCE",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_LAZILY_UNPACK",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_CONV_IM2COL",(()=>oD.getBool("WEBGL_PACK"))),oD.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==lT){const t=MN(e);lT=t.getParameter(t.MAX_TEXTURE_SIZE)}return lT}(oD.getNumber("WEBGL_VERSION")))),oD.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==uT){const t=MN(e);uT=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,uT)}(oD.getNumber("WEBGL_VERSION")))),oD.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=oD.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=MN(e);return t=cT(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:cT(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),oD.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>oD.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Ra.isMobile())),oD.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=MN(e);if(1===e){if(!cT(t,"OES_texture_float"))return!1}else if(!cT(t,"EXT_color_buffer_float"))return!1;return dT(t)}(oD.getNumber("WEBGL_VERSION")))),oD.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!oD.getBool("WEBGL_FORCE_F16_TEXTURES")&&oD.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),oD.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>pT(oD.getNumber("WEBGL_VERSION")))),oD.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=oD.getNumber("WEBGL_VERSION"))&&null!=MN(e).fenceSync;var e})),oD.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>oD.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),oD.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),oD.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Ra.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),oD.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),oD.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),oD.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),oD.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128)),oD.registerFlag("WEBGL_EXP_CONV",(()=>!1)),oD.registerFlag("SOFTWARE_WEBGL_ENABLED",(()=>oD.getBool("IS_TEST"))),oD.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",(()=>1/0)),oD.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",(()=>!1)),oD.registerFlag("WEBGL2_ISNAN_CUSTOM",(()=>!1)),oD.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));class lD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=LN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=dN();this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?mN(["r","c","d"],e):fN(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class uD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=LN.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=dN();this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?mN(["r","c","d"],e):fN(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class cD{constructor(e){this.variableNames=["A"],this.outTexUsage=zN.DOWNLOAD;const t=dN();this.outputShape=e,this.userCode=`\n      ${bN}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class hD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=zN.DOWNLOAD;const t=dN();this.outputShape=e,this.userCode=`\n      ${bN}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}const pD={R:0,G:1,B:2,A:3};class dD{constructor(e,t=!1,n="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=dN();this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)");let a="";for(let e=0;e<n.length;e++){const t=n[e];a+=`\n          if(offset == ${e}) {\n            result = values[${pD[t]}];\n          }`}this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${n.length});\n\n        flatIndex = idiv(flatIndex, ${n.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${s.texture2D}(A, uv);\n          ${a}\n        }\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class fD{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=dN();this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length);let s="",r="result";t&&(r="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let r=0;r<=1;r++){const a=2*t+r;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${r} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${r};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":yN(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${r};\n        }\n    `}}function mD(e){const t=dN();return function(e,t){const n=tT(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(GN(e,(()=>e.shaderSource(n,t))),GN(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function gD(e){return function(e,t){const n=tT(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return GN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),GN(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function yD(e){return function(e,t){const n=tT(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return GN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),GN(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function bD(e,t,n,s,r,a){!function(e,t){const n=oe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return tT(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return GN(e,(()=>e.bindTexture(o,i))),GN(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),GN(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),GN(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),GN(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===oe().getNumber("WEBGL_VERSION")?GN(e,(()=>e.texImage2D(o,0,s,t,n,0,r,a,null))):GN(e,(()=>e.texStorage2D(o,1,s,t,n))),GN(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function xD(e){return e.internalFormatFloat}function wD(e){return e.internalFormatHalfFloat}function vD(e){return e.downloadTextureFormat}function kD(e){return e.internalFormatPackedFloat}function ID(e){return e.internalFormatPackedHalfFloat}function SD(e,t,n,s,r,a,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=UN(e,t);return n*s*4}(a,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}class ND{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const t=oe().getNumber("WEBGL_VERSION");if(null!=e?(this.gl=e,function(e,t){DN[e]=t}(t,e)):this.gl=MN(t),e=this.gl,2===oe().getNumber("WEBGL_VERSION")){const t=e;this.createVertexArray=()=>GN(t,(()=>t.createVertexArray())),this.bindVertexArray=e=>GN(t,(()=>t.bindVertexArray(e))),this.deleteVertexArray=e=>GN(t,(()=>t.deleteVertexArray(e))),this.getVertexArray=()=>GN(t,(()=>t.getParameter(t.VERTEX_ARRAY_BINDING)))}else if(null!=e){const t=e.getExtension("OES_vertex_array_object");if(null==t)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>GN(e,(()=>t.createVertexArrayOES())),this.bindVertexArray=n=>GN(e,(()=>t.bindVertexArrayOES(n))),this.deleteVertexArray=n=>GN(e,(()=>t.deleteVertexArrayOES(n))),this.getVertexArray=()=>GN(e,(()=>e.getParameter(t.VERTEX_ARRAY_BINDING_OES)))}let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===oe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=jN(this.gl,e),cT(this.gl,t))this.textureHalfFloatExtension=jN(this.gl,t);else if(oe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),cT(this.gl,s))this.colorBufferHalfFloatExtension=jN(this.gl,s);else if(oe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",cT(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!cT(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=gD(this.gl),this.indexBuffer=yD(this.gl),this.framebuffer=function(e){return tT(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=VN(this.gl,this.textureHalfFloatExtension)}get debug(){return oe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;GN(e,(()=>e.finish())),GN(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),GN(e,(()=>e.deleteFramebuffer(this.framebuffer))),GN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),GN(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),GN(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=PN(t,n);return bD(e,r,a,xD(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=PN(t,n);return bD(e,r,a,wD(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=PN(t,n);return bD(e,r,a,vD(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){GN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===oe().getNumber("WEBGL_VERSION")?GN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):GN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===oe().getNumber("WEBGL_VERSION")?GN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):GN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),GN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,r,a){let i,o,l;GN(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),r instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=a.internalFormatPackedFloat),i.set(r),2===oe().getNumber("WEBGL_VERSION")?GN(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):GN(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),GN(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=UN(t,n);return bD(e,r,a,ID(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[r,a]=UN(t,n);return bD(e,r,a,kD(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(QN(this.gl,this.framebuffer),this.outputTexture=null),GN(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[r,a]=PN(t,n),i=new Uint8Array(t*n*4);return GN(e,(()=>e.readPixels(0,0,r,a,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,r,a){return SD(this.gl,e,0,0,0,r,a,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,r=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const r=e.createBuffer();GN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,r)));const a=16*t*n;return GN(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,a,e.STREAM_READ))),GN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),GN(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),r}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(oe().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,r=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(r,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=r}else oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return GN(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=mD(t));const n=function(e){return tT(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);GN(t,(()=>t.attachShader(n,this.vertexShader))),GN(t,(()=>t.attachShader(n,e))),function(e,t){if(GN(e,(()=>e.linkProgram(t))),!oe().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n);const s=Object.assign(n,{vao:this.createVertexArray()});return this.debug&&XN(t,s),s}buildVao(e){this.setProgram(e),this.bindVertexArray(e.vao);const t=this.gl;GN(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.indexBuffer))),function(e,t,n){GN(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),YN(e,t,"clipSpacePos",n,3,20,0)&&YN(e,t,"uv",n,2,20,12)}(t,e,this.vertexBuffer)}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&(GN(this.gl,(()=>this.gl.deleteProgram(e))),this.deleteVertexArray(e.vao))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&XN(this.gl,this.program),GN(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return tT(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),GN(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),ZN(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,r]=UN(t,n);this.setOutputMatrixTextureDriver(e,s,r)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&XN(this.gl,this.program),eT(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}GN(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),GN(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=jN(this.gl,2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await Xs.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){if(this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1)return;let n;"setTimeoutCustom"in oe().platform&&(n=oe().platform.setTimeoutCustom.bind(oe().platform)),Xs.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)),(()=>0),null,n)}bindTextureToFrameBuffer(e){this.throwIfDisposed(),JN(this.gl,e,this.framebuffer),this.debug&&eT(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(JN(this.gl,this.outputTexture,this.framebuffer),this.debug&&eT(this.gl)):QN(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;JN(s,e,this.framebuffer),this.debug&&eT(s),this.outputTexture=e,GN(s,(()=>s.viewport(0,0,t,n))),GN(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),GN(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}class TD{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=bT(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=vT("rc",this.rank),t=AN(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),r=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${r}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let r=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)r=`${e[e.length-1-t]},`+r;t.push(r)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class CD{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(e,t,n){const s=ED(t,n),r=AD(e,s,n);r in this.freeTextures||(this.freeTextures[r]=[]),r in this.usedTextures||(this.usedTextures[r]=[]);const a=$D(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[r].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const e=this.freeTextures[r].pop();return this.usedTextures[r].push(e),e}let i;return s===BN.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===BN.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===BN.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===BN.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===BN.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[r].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const r=ED(n,s),a=AD(t,r,s);a in this.freeTextures||(this.freeTextures[a]=[]);const i=$D(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=oe().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[a],u=l&&l.indexOf(e);if(null==u||u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l[u]=l[l.length-1],l.pop(),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function $D(e,t,n,s,r){const a=function(e,t){switch(e){case BN.PACKED_2X2_FLOAT32:return kD(t);case BN.PACKED_2X2_FLOAT16:return ID(t);case BN.UNPACKED_FLOAT32:return xD(t);case BN.UNPACKED_FLOAT16:return wD(t);case BN.PACKED_4X1_UNSIGNED_BYTE:return vD(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(r){const[t,n]=UN(e[0],e[1]);i=t*n}else{const[t,n]=PN(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,a);return i*o}function ED(e,t){if(e===zN.UPLOAD)return BN.PACKED_2X2_FLOAT32;if(e===zN.RENDER||null==e)return function(e){return oe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?BN.PACKED_2X2_FLOAT32:BN.UNPACKED_FLOAT32:e?BN.PACKED_2X2_FLOAT16:BN.UNPACKED_FLOAT16}(t);if(e===zN.DOWNLOAD||e===zN.PIXELS)return BN.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function AD(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class RD{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=bT(this.outputShape.length);const t=e.length,n=vT("rc",t),s=AN(t),r=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),a=n.slice(-2),i=t<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${r});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const FD=jg.whereImpl,_D={};const DD=oe().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class OD extends o{nextDataId(){return OD.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!oe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof ND)t=e;else{const n=MN(oe().getNumber("WEBGL_VERSION"),e);t=new ND(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=MN(oe().getNumber("WEBGL_VERSION"));t=new ND(e),this.binaryCache=((n=oe().getNumber("WEBGL_VERSION"))in _D||(_D[n]={}),_D[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new CD(this.gpgpu),this.numMBBeforeWarning=null==oe().global.screen?1024:oe().global.screen.height*oe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new i(this,rl())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,t,n,s,r,a){const i=this.makeTensorInfo(t,n),o=this.texData.get(i.dataId);o.isPacked=!1,o.texture={texture:e,texShape:[s,r]},o.texShape=[s,r];const l=aT(t),u=new dD(l,!1,a),c=this.runWebGLProgram(u,[i],n,[[s,r]]);return c.shape=t,o.texture=null,this.disposeIntermediateTensorInfo(i),c.dataId}write(e,t,n){if((oe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||oe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:zN.UPLOAD,refCount:1}),s}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,s,r){if(oe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:zN.UPLOAD,refCount:r})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:r,slice:a,shape:i,isPacked:o}=t;if(null!=a){let t;t=o?new LT(i,MT):new DT(i,MT);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;if(l&&(u=Xs.now()),"complex64"===s){const e=this.readSync(r.real.dataId),t=this.readSync(r.imag.dataId);c=Tm.mergeRealAndImagArrays(e,t)}else c=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=Xs.now()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:r,dtype:a,complexTensorInfos:i,isPacked:o}=t;if(null!=r){let t;t=o?new LT(s,MT):new DT(s,MT);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:a}],a),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=n)return this.convertAndCacheOnCPU(e);if(oe().getBool("DEBUG")&&!oe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===oe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==a&&oe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...WN(s))}if(this.pendingRead.set(e,[]),"complex64"!==a&&await this.gpgpu.createAndWaitForFence(),"complex64"===a){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];u=Tm.mergeRealAndImagArrays(t,n)}else if(null==c)u=this.getValuesFromTexture(e);else{const e=Xs.sizeFromShape(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;GN(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&rl().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:r,slice:a,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=a){let n;n=o?new LT(r,MT):new DT(r,MT);const s=this.runWebGLProgram(n,[{dataId:e,shape:r,dtype:i}],i),a=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),a}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=rl().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Xs.decodeString(e)));return el(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return el(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!HN(n)){if(oe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),r=Xs.sizeFromShape(t);if(oe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...WN(t)).subarray(0,r);return this.disposeIntermediateTensorInfo(n),a}const a=oe().getBool("WEBGL_PACK")&&!0===s,i=a?aT(t):t,o=a?new hD(i):new cD(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,r);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const r=Xs.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),a=Xs.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(r);i.kernelMs=Xs.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:a[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Xs.now(),endMs:null}}endTimer(e){return oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Xs.now(),e)}async getQueryTime(e){if(oe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:r,isPacked:a,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,r,a)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=DD){return oe().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&Xs.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){Tm.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return FD(e.shape,t)}packedUnaryOp(e,t,n){const s=new LT(e.shape,t),r=this.compileAndRun(s,[e],n);return rl().makeTensorFromTensorInfo(r)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=SC(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(oe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,OT,e.dtype);const t=new DT(e.shape,OT),n=this.compileAndRun(t,[e]);return rl().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&Xs.isString(n[0])){const r=n.map((e=>Xs.encodeString(e)));s=this.write(r,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return rl().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new RD(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new TD(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[sT(e.shape),...rT(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},r=[sT(t),...rT(t)],a=new VC(r,n),i=[n],o=this.runWebGLProgram(a,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:r,dtype:a}=n;if(null!=t){const e=Xs.sizeFromShape(r),n=t[0]*t[1]*4;Xs.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=aT(r);let o;o=s?new uD(i):new lD(i);const l=[null!=t?t:WN(i)];return{dtype:a,shape:r,dataId:this.runWebGLProgram(o,[{shape:i,dtype:a,dataId:e}],a,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,r=!1,a){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===LN.DENSE){const t=null!=a?a:WN(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===Xs.sizeFromShape(i.shape))return o.values=Xs.getTypedArrayFromDType(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&Xs.sizeFromShape(t.shape)<=oe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!oT(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const r=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const a=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=RN(e.packedInputs,t.shape,a);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=Xs.computeStrides(o);h=`${e[0]===a[1]}_${e[e.length-1]===a[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&Xs.arraysEqual(t.shape,a),f=1===Xs.sizeFromShape(t.shape),m=Tm.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&Xs.arraysEqual(a,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${a[0]>1}_${a[1]>1}`;s+=`${p}_${g}_${i?l:""}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${r}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${r}`}}));const r=e.userCode;let a=e.constructor.name;return a+="_"+s+"_"+r+`${oe().getNumber("WEBGL_VERSION")}`,a}(e,u,c),p=this.getAndSaveBinary(h,(()=>mT(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),oe().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,r){t.program.enableShapeUniforms||(yT(t.inShapeInfos,n),yT([t.outShapeInfo],[s]));const a=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(a.texture,i[0],i[1]):e.setOutputMatrixTexture(a.texture,i[0],i[1]),e.setProgram(t.webGLProgram),e.bindVertexArray(t.webGLProgram.vao),1===oe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN);for(let s=0;s<n.length;++s){const r=n[s],{uniform:a,offset:i,shape:o,texShape:l}=t.variablesLocations[s];if(o){const{uniformShape:n}=RN(t.program.packedInputs,r.shape,r.texData.texShape);switch(n.length){case 1:e.gl.uniform1iv(o,new Int32Array(n));break;case 2:e.gl.uniform2iv(o,new Int32Array(n));break;case 3:e.gl.uniform3iv(o,new Int32Array(n));break;case 4:e.gl.uniform4iv(o,new Int32Array(n))}}if(l&&e.gl.uniform2i(l,r.texData.texShape[0],r.texData.texShape[1]),null!=a)if(r.isUniform)if(Xs.sizeFromShape(r.shape)<2)e.gl.uniform1f(a,r.uniformValues[0]);else{let t=r.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(a,t)}else null!=r.texData.slice&&null!=i&&e.gl.uniform1i(i,r.texData.slice.flatOffset),e.setInputMatrixTexture(r.texData.texture.texture,a,s)}const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=Xs.computeStrides(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}if(t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let n=0;n<t.program.customUniforms.length;++n){const s=t.program.customUniforms[n],a=t.customUniformLocations[n],i=r[n];if("float"===s.type)e.gl.uniform1fv(a,i);else if("vec2"===s.type)e.gl.uniform2fv(a,i);else if("vec3"===s.type)e.gl.uniform3fv(a,i);else if("vec4"===s.type)e.gl.uniform4fv(a,i);else if("int"===s.type)e.gl.uniform1iv(a,i);else if("ivec2"===s.type)e.gl.uniform2iv(a,i);else if("ivec3"===s.type)e.gl.uniform3iv(a,i);else{if("ivec4"!==s.type)throw Error(`uniform type ${s.type} is not supported yet.`);e.gl.uniform4iv(a,i)}}e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=oe().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Xs.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!oe().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===r){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,r=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,s,r)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!oe().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=il((()=>{if(!oe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=oe().getBool("DEBUG");oe().set("DEBUG",!1);const t=this.abs(Cl(1e-8)).dataSync()[0];if(oe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:r,texture:a,usage:i,isPacked:o}=t;if(null!=a)return;const l=null!=this.activeTimers;let u;l&&(u=Xs.now());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=oe().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=oe().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(s===1/0&&oe().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=n/2),t&&(n*=2,s*=2,1===(e=e.map(((t,n)=>n>=e.length-2?Xs.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=Xs.squeezeShape(e);e=t.newShape}let r=Xs.sizeFromShape(e),a=null;e.length<=1&&r<=n?a=[1,r]:2===e.length&&e[0]<=n&&e[1]<=n?a=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?a=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?a=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?a=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(a=[e[0],e[1]*e[2]*e[3]]);const i=null!=a&&Math.max(...a)>s&&Math.min(...a)<=(t?2:1)&&Math.min(...a)>0;if(null==a||i)if(t){const t=sT(e);let n=2,s=2;e.length&&([n,s]=rT(e)),r=t*(n/2)*(s/2),a=Xs.sizeToSquarishShape(r).map((e=>2*e))}else a=Xs.sizeToSquarishShape(r);return a}(n,o),t.texShape=c),null!=r){const e=aT(n);let a,i=c[1],h=c[0];const p=r instanceof Uint8Array||r instanceof Uint8ClampedArray;!o&&p||([i,h]=UN(c[0],c[1])),a=o?new fD(e,p):new dD(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?zN.PIXELS:zN.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,r);const g=[[h,i]],y=!0,b=this.runWebGLProgram(a,[f],s,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,oe().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=Xs.now()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*Xs.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Xg(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw KN(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:t,customUniformLocations:n,infLoc:s,nanLoc:r,outShapeLocation:a,outShapeStridesLocation:i,outTexShapeLocation:o}=gT(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=r,e.outShapeLocation=a,e.outShapeStridesLocation=i,e.outTexShapeLocation=o}}createTensorFromGPUData(e,t,n){e.channels=e.channels||"RGBA";const{texture:s,height:r,width:a,channels:i}=e,o=rl().backend;if(!o.gpgpu.gl.isTexture(s))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const l=o.writeTexture(s,t,n,r,a,i);return rl().makeTensorFromDataId(l,t,n,o)}}OD.nextDataId=0;Ra.isBrowser()&&ul("webgl",(()=>new OD),2);class MD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,MD.prototype)}}class LD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,LD.prototype)}}class zD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,zD.prototype)}}class BD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,BD.prototype)}}class PD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,PD.prototype)}}Error;class WD{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function UD(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function VD(e,t){if(!e)throw new PD(t)}function GD(e,t){let n=0;for(const s of e)s===t&&n++;return n}function HD(e){return 1===e.length?e[0]:e}function jD(e){return Array.isArray(e)?e:[e]}function qD(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function KD(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let XD={};function YD(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function ZD(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>ZD(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?ZD(t):e[n]=t.value)}}}function JD(e,t={},n={},s="object",r=!1){if("string"==typeof e){const r=e;let a;if(r in n)a=n[r];else if(r in XD)a=XD[r];else if(a=t[r],null==a)throw new zD(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const a=e;if(null==a.className||null==a.config)throw new zD(`${s}: Improper config format: ${JSON.stringify(a)}.\n'className' and 'config' must set.`);const i=a.className;let o,l;if(i in n?[o,l]=n[i]:i in XD?[o,l]=XD.className:i in t&&([o,l]=t[i]),null==o)throw new zD(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(XD))e[t]=XD[t];for(const t of Object.keys(n))e[t]=n[t];a.config.customObjects=e;const t=Object.assign({},XD);for(const e of Object.keys(n))XD[e]=n[e];ZD(a.config);const s=l(o,a.config,n,r);return XD=Object.assign({},t),s}{const e=Object.assign({},XD);for(const e of Object.keys(n))XD[e]=n[e];const t=new o(a.config);return XD=Object.assign({},e),t}}}function QD(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function eO(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function tO(e){if(null==e)throw new zD(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function nO(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new zD(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function sO(e,t,n=0,s=1/0){return VD(n>=0),VD(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function rO(e,t){Array.isArray(e)?(Xs.assert(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>rO(e,`element ${n+1} of ${t}`)))):Xs.assert(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${aO(e)}.`))}function aO(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>aO(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function iO(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */
let oO=0;function lO(){return oO++}const uO={};function cO(e=""){return e in uO||(uO[e]=0),uO[e]+=1,e+uO[e].toString()}const hO=["channelsFirst","channelsLast"],pO=["nearest","bilinear"],dO=["valid","same","causal"],fO=["max","avg"],mO=["sum","mul","concat","ave"],gO=new Map;function yO(e){nO(hO,"DataFormat",e)}function bO(e){nO(dO,"PaddingMode",e)}function xO(e){nO(fO,"PoolMode",e)}const wO=[];function vO(e,t){wO.push(e);try{const e=t();return wO.pop(),e}catch(e){throw wO.pop(),e}}function kO(e){if(!NO(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===wO.length?"":wO.join("/")+"/")+e}function IO(e){if(!NO(e))throw new Error("Not a valid tensor name: '"+e+"'");gO.has(e)||gO.set(e,0);const t=gO.get(e);if(gO.set(e,gO.get(e)+1),t>0){const n=`${e}_${t}`;return gO.set(n,1),n}return e}const SO=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function NO(e){return!!e.match(SO)}function TO(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let r=t;r<n;++r)s*=e[r];return s}function CO(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function $O(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function EO(e,t){if(t<e)throw new zD(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let AO;function RO(){return null==AO&&(AO=Ea.backend.epsilon()),AO}function FO(e,t){return tl(e,t)}function _O(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),bl(e,n)}function DO(e,t,n){return il((()=>{switch(e.rank){case 1:return $d(e,t,n);case 2:return Ed(e,[t,0],[n,e.shape[1]]);case 3:return Ad(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return Rd(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return xl(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return xl(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new zD(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function OO(e,t,n){return il((()=>{switch(e.rank){case 1:return $d(e,t,n);case 2:return Ed(e,[0,t],[e.shape[0],n]);case 3:return Ad(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return Rd(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new zD(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function MO(e,t,n,s){return il((()=>{switch(e.rank){case 1:return $d(e,t,n);case 2:switch(s){case 1:return DO(e,t,n);case 2:return OO(e,t,n);default:throw new zD(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return DO(e,t,n);case 2:return Ad(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return OO(e,t,n);default:throw new zD(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return DO(e,t,n);case 2:return Rd(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return Rd(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return OO(e,t,n);default:throw new zD(`The axis is not within the rank of the tensor ${s}`)}default:throw new zD(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function LO(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),ml(e,t)}function zO(e,t){switch(e.rank){case 1:return Wh([e,t]);case 2:return Uh([e,t],0);case 3:return Vh([e,t],0);case 4:return Gh([e,t],0);default:throw new zD(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function BO(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new zD(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return _u(e,t)}function PO(e,t=0,n=1,s,r){return pd(e,t,n,s,r)}function WO(e,t,n,s){if(e.rank<2||t.rank<2)throw new BD(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){if(e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new BD(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank){const r=!1,a=!1;return El.matMul({a:e,b:t,transposeA:r,transposeB:a,bias:s?GO(e.rank,s,"channelsLast"):null,activation:n})}{const r=e.shape.slice(),a=r.pop();e=bl(e,[-1,a]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=bl(Wc(t,c),[l,-1]);const h=[...r,...u],p=!1,d=!1;return bl(El.matMul({a:e,b:t,transposeA:p,transposeB:d,bias:s?GO(e.rank,s,"channelsLast"):null,activation:n}),h)}}function UO(e,t,n){return il((()=>(t=Array.isArray(t)?ku(t,"int32"):tl(t,"int32"),dp(e,t,n))))}function VO(e){return dl(e,e)}function GO(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new zD(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?bl(t,[1,s[0],1,1,1]):bl(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?bl(t,[1,1,1,1,s[0]]):bl(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?bl(t,[1,s[0],1,1]):bl(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?bl(t,[1,1,1,s[0]]):bl(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?bl(t,[1,s[0],1]):bl(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?bl(t,[1,1,s[0]]):bl(t,[1].concat(s))}else if(e<3)return t;throw new zD(`Unsupported input rank by biasAdd: ${t.rank}`)}function HO(e,t,n){return il((()=>(null==n&&(n="channelsLast"),yO(n),cl(e,GO(e.rank,t,n)))))}function jO(e,t,n,s){return il((()=>cf(e,t,n,s)))}function qO(e,t,n=!1){return n?e():t()}const KO=["fanIn","fanOut","fanAvg"],XO=["normal","uniform","truncatedNormal"];class YO extends wf.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class ZO extends YO{apply(e,t){return vl(e,t)}}ZO.className="Zeros",wf.registerClass(ZO);class JO extends YO{apply(e,t){return qc(e,t)}}JO.className="Ones",wf.registerClass(JO);class QO extends YO{constructor(e){if(super(),"object"!=typeof e)throw new zD(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new zD(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return il((()=>dl(Cl(this.value),qc(e,t))))}getConfig(){return{value:this.value}}}QO.className="Constant",wf.registerClass(QO);class eM extends YO{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return fd(e,this.minval,this.maxval,t,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}eM.className="RandomUniform",wf.registerClass(eM);class tM extends YO{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new BD(`randomNormal does not support dType ${t}.`);return PO(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}tM.className="RandomNormal",wf.registerClass(tM);class nM extends YO{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new BD(`truncatedNormal does not support dType ${t}.`);return Hd(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}nM.className="TruncatedNormal",wf.registerClass(nM);class sM extends YO{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return il((()=>{if(2!==e.length||e[0]!==e[1])throw new zD("Identity matrix initializer can only be used for 2D square matrices.");return dl(this.gain,Bc(e[0]))}))}getConfig(){return{gain:this.gain}}}sM.className="Identity",wf.registerClass(sM);class rM extends YO{constructor(e){if(super(),e.scale<0)throw new zD(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,nO(KO,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){nO(XO,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(yO(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=TO(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=TO(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=TO(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],r=n[1];let a=this.scale;if("fanIn"===this.mode?a/=Math.max(1,s):"fanOut"===this.mode?a/=Math.max(1,r):a/=Math.max(1,(s+r)/2),"normal"===this.distribution){const n=Math.sqrt(a);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new BD(`${this.getClassName()} does not support dType ${t}.`);return Hd(e,0,n,t,this.seed)}{const n=Math.sqrt(3*a);return fd(e,-n,n,t,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}rM.className="VarianceScaling",wf.registerClass(rM);class aM extends rM{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rM.className}}aM.className="GlorotUniform",wf.registerClass(aM);class iM extends rM{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rM.className}}iM.className="GlorotNormal",wf.registerClass(iM);class oM extends rM{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rM.className}}oM.className="HeNormal",wf.registerClass(oM);class lM extends rM{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rM.className}}lM.className="HeUniform",wf.registerClass(lM);class uM extends rM{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rM.className}}uM.className="LeCunNormal",wf.registerClass(uM);class cM extends rM{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rM.className}}cM.className="LeCunUniform",wf.registerClass(cM);class hM extends YO{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,t){return il((()=>{if(e.length<2)throw new BD("Shape must be at least 2D.");if("int32"!==t&&"float32"!==t&&void 0!==t)throw new TypeError(`Unsupported data type ${t}.`);const n=Xs.sizeFromShape(e.slice(0,-1)),s=e[e.length-1],r=n*s;r>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${r}) elements: Slowness may result.`);const a=PO([Math.max(s,n),Math.min(s,n)],0,1,t,this.seed),i=gf.qr(a,!1);let o=i[0];const l=i[1].flatten().stridedSlice([0],[Math.min(s,n)*Math.min(s,n)],[Math.min(s,n)+1]);return o=dl(o,l.sign()),n<s&&(o=o.transpose()),dl(Cl(this.gain),o.reshape(e))}))}getConfig(){return{gain:this.gain,seed:this.seed}}}hM.className="Orthogonal",wf.registerClass(hM);const pM={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function dM(e,t={}){return JD(e,wf.SerializationMap.getMap().classNameMap,t,"initializer")}function fM(e){return YD(e)}function mM(e){if("string"==typeof e){const t=e in pM?pM[e]:e;if("GlorotNormal"===t)return new iM;if("GlorotUniform"===t)return new aM;if("HeNormal"===t)return new oM;if("HeUniform"===t)return new lM;if("LeCunNormal"===t)return new uM;if("LeCunUniform"===t)return new cM;{const e={};return e.className=t,e.config={},dM(e)}}return e instanceof YO?e:dM(e)}function gM(e){return Array.isArray(e)&&Array.isArray(e[0])}function yM(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function bM(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new zD(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function xM(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new zD(`Expected exactly 1 Shape; got ${e.length}`)}return e}function wM(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}const vM="Variable";class kM{constructor(e,t="float32",n="Variable",s=!0,r=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=lO(),n=null==n?vM:n,this.originalName=kO(n),this.name=IO(this.originalName),this.trainable_=s,this.constraint=r,this.val=Xd(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function IM(e){return e.map((e=>e.read()))}function SM(e){e.forEach((e=>{e[0].write(e[1])}))}class NM{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class TM{constructor(e,t,n,s,r,a,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=r,this.outputTensorIndex=i,this.id=lO(),null!=a&&(this.originalName=kO(a),this.name=IO(this.originalName)),this.rank=t.length}}let CM=0;class $M{constructor(e,t){this.callArgs=t,this.id=CM++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let EM=0;class AM extends wf.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=EM++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=qD(e)+"_"+cO(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new LD(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new zD(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return HD(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return HD(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new MD(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new MD(`Layer ${this.name} is not connected, no input to return.`);return HD(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new MD(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new MD(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return HD(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=jD(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=jD(this.inputSpec);if(e.length!==t.length)throw new zD(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],r=t[n];if(null==r)continue;const a=s.rank;if(null!=r.ndim&&a!==r.ndim)throw new zD(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${r.ndim}, found ndim=${a}`);if(null!=r.maxNDim&&a>r.maxNDim)throw new zD(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${r.maxNDim}, found ndim=${a}`);if(null!=r.minNDim&&a<r.minNDim)throw new zD(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${r.minNDim}, found ndim=${a}.`);if(null!=r.dtype&&s.dtype!==r.dtype)throw new zD(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${r.dtype}, found dtype=${s.dtype}.`);if(r.axes){const e=s.shape;for(const t in r.axes){const s=Number(t),a=r.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=a&&-1===[a,null].indexOf(i))throw new zD(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${a} but got shape ${e}.`)}}if(null!=r.shape)for(let e=0;e<r.shape.length;++e){const t=r.shape[e],a=s.shape[e];if(null!=t&&null!=a&&t!==a)throw new zD(`Input ${n} is incompatible with layer ${this.name}: expected shape=${r.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=jD(e);let s=!0;for(const e of n)if(!(e instanceof TM)){s=!1;break}let r=!0;for(const e of n)if(e instanceof TM){r=!1;break}if(s===r)throw new zD("Arguments to apply() must be all SymbolicTensors or all Tensors");return vO(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of jD(e))t.push(n.shape);this.build(HD(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&r&&(this._refCount=1)}if(this.assertInputCompatibility(e),r){let s=this.call(e,t);const r=jD(s),a=[];for(let e of r)-1!==n.indexOf(e)&&(e=e.clone()),a.push(e);if(s=HD(a),null!=this.activityRegularizer)throw new BD("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=jD(e);const t=[];for(const n of e)t.push(n.shape);return HD(t)}(e),s=this.computeOutputShape(n);let r;const a="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),r=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new TM(a,n,this,jD(e),t,this.name,s))):new TM(a,s,this,jD(e),t,this.name),this.addInboundNode(e,r,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new BD("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new MD(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new MD(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new LD(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return wM(this.weights)}build(e){this.built=!0}getWeights(e=!1){return IM(e?this.trainableWeights:this.weights)}setWeights(e){il((()=>{const t=this.weights;if(t.length!==e.length)throw new zD(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=IM(t);for(let r=0;r<s.length;++r){const a=s[r],i=t[r],o=e[r];if(!Xs.arraysEqual(a.shape,o.shape))throw new zD(`Layer weight shape ${a.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}SM(n)}))}addWeight(e,t,n,s,r,a,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new zD(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():mM("zeros"));const l=s.apply(t,n),u=new kM(l,n,e,a,i);return l.dispose(),null!=r&&this.addLoss((()=>r.apply(u.read()))),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=jD(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,r,a,i=null){const o=jD(e);t=jD(t),n=jD(n),s=jD(s),r=yM(r),a=yM(a);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new $M({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:r,outputShapes:a},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function RM(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=RM(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class FM extends AM{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:cO("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new zD("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new zD("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new zD("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new TM(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new $M({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new zD(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function _M(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new zD("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");return new FM({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}FM.className="InputLayer",wf.registerClass(FM);class DM{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof DM)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new zD(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return tl(t,e.dtype)}catch(n){throw new zD(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof TM){if(null==this.id2Value[e.id])throw new zD(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new zD(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof TM){if(null==this.id2Value[e.id])throw new zD(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new zD(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&ol(this.id2Mask)}}const OM=new WD,MM=new WD;function LM(e,t,n,s){const r=null!=n&&n.training,a=Array.isArray(e),i=a?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,p=OM.get(c);if(null==p){const e=function(e,t){Xs.assert(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const r=BM(e[0],t);n=r.sorted,s=r.recipientMap}else{const r=new Set;for(const a of e){const{sorted:e,recipientMap:i}=BM(a,t);for(const t of e)r.has(t.name)||(n.push(t),r.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:zM(s)}}(i,t);p=e.sorted,h=e.recipientCounts,OM.put(c,p),MM.put(c,h)}h={},r||Object.assign(h,MM.get(c));const d=new DM(t);for(let e=0;e<p.length;++e){if(null!=s){const e=al().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const a=p[e],i=a.sourceLayer;if(i instanceof FM)continue;const u=[],c=[],f=[];let m=!1;for(const e of a.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),r||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=jD(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=PM(a),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}r||ol(f)}return d.disposeMasks(),a?l:l[0]}function zM(e){const t={};for(const n in e)t[n]=e[n].size;return t}function BM(e,t){const n=new Set,s=[],r={};for(const e of t.names())n.add(e);const a=[],i=[];for(a.push(e);a.length>0;){const e=a[a.length-1];if(n.has(e.name)){a.pop();continue}const t=i[i.length-1]===a.length-1;if(0===e.inputs.length||t)a.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(a.length-1);for(const t of e.inputs)null==r[t.name]&&(r[t.name]=new Set),r[t.name].add(e.name),n.has(t.name)||a.push(t)}}return{sorted:s,recipientMap:r}}function PM(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function WM(e,t){return il((()=>Fc(uu(dl(e,e),t,!0))))}oe().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=OM&&OM.setMaxEntries(e),null!=MM&&MM.setMaxEntries(e)}));class UM extends wf.Serializable{getConfig(){return{}}}class VM extends UM{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return il((()=>{const t=WM(e,this.axis),n=Ph(t,0,this.maxValue);return dl(e,pl(n,cl(RO(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}VM.className="MaxNorm",wf.registerClass(VM);class GM extends UM{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return il((()=>pl(e,cl(RO(),WM(e,this.axis)))))}getConfig(){return{axis:this.axis}}}GM.className="UnitNorm",wf.registerClass(GM);class HM extends UM{apply(e){return au(e)}}HM.className="NonNeg",wf.registerClass(HM);class jM extends UM{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return il((()=>{const t=WM(e,this.axis),n=cl(dl(this.rate,Ph(t,this.minValue,this.maxValue)),dl(1-this.rate,t));return dl(e,pl(n,cl(RO(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}jM.className="MinMaxNorm",wf.registerClass(jM);const qM={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function KM(e){return YD(e)}function XM(e,t={}){return JD(e,wf.SerializationMap.getMap().classNameMap,t,"constraint")}function YM(e){if(null==e)return null;if("string"==typeof e){return XM({className:e in qM?qM[e]:e,config:{}})}return e instanceof UM?e:XM(e)}async function ZM(e){if(null==e)return;const t=[],n=[],s=[];for(const r in e){const a=e[r];if("number"!=typeof a){const e=a;t.push(e.data()),n.push(r),s.push(e)}}if(t.length>0){const r=await Promise.all(t);for(let t=0;t<r.length;++t)e[n[t]]=r[t][0];ol(s)}}function JM(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var QM;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(QM||(QM={}));class eL{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class tL{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class nL extends eL{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const r=il((()=>cl(this.totals[e],dl(s,n))));this.totals[e]=r,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:il((()=>{const n=dl(pl(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ll(t[e])})))}}class sL extends eL{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const r=this.history[s];for(let a=0;a<r.length;++a)if("number"!=typeof r[a]){const i=r[a];e.push(i.data()),t.push(s),n.push(a)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e){this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}}class rL extends eL{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Xg,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Xs.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,r=null!=n?n():Xs.now();return(...a)=>{const i=null!=n?n():Xs.now();return i-r<t||(r=i,s=e(...a)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await ZM(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await ZM(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await ZM(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await ZM(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await ZM(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Xs.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await ZM(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await ZM(e),await this.trainEnd(e))}}function aL(e,t){if(null==e&&(e={}),e instanceof eL)return[e];if(Array.isArray(e)&&e[0]instanceof eL)return e;return jD(e).map((e=>new rL(e,t)))}class iL{constructor(){}static registerCallbackConstructor(e,t){Xs.assert(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),iL.checkForDuplicate(t),null==iL.constructors[e]&&(iL.constructors[e]=[]),iL.constructors[e].push(t)}static checkForDuplicate(e){for(const t in iL.constructors){iL.constructors[+t].forEach((t=>{if(t===e)throw new zD("Duplicate callback constructor.")}))}}static clear(){iL.constructors={}}static createCallbacks(e){const t=[];for(const n in iL.constructors){const s=+n;e>=s&&t.push(...iL.constructors[s])}return t.map((e=>new e))}}function oL(e,t,n,s,r,a,i,o,l){const u=new sL,c=[new nL,...iL.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new tL(c);return h.setParams({epochs:n,initialEpoch:s,samples:r,steps:a,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function lL(e,t={},n=!1){return JD(e,wf.SerializationMap.getMap().classNameMap,t,"layer",n)}function uL(e,t){return il((()=>{"float32"!==e.dtype&&(e=tl(e,"float32"));const n=uu(VO(e),t,!0),s=Cu(n.shape,RO()),r=Fc(Fp(n,s));return pl(e,r)}))}function cL(e,t){return il((()=>Hc(VO(sc(t,e)),-1)))}function hL(e,t){return il((()=>Hc(xc(sc(t,e)),-1)))}function pL(e,t){return il((()=>{const n=sc(e,t),s=Ph(xc(e),RO(),Number.MAX_VALUE),r=xc(pl(n,s));return dl(100,Hc(r,-1))}))}function dL(e,t){return il((()=>{const n=Ph(t,RO(),Number.MAX_VALUE),s=Qc(cl(1,n)),r=Ph(e,RO(),Number.MAX_VALUE),a=Qc(cl(1,r));return Hc(VO(sc(s,a)),-1)}))}function fL(e,t,n=!1){return il((()=>{if(n)t=Fd(t);else{const e=uu(t,t.shape.length-1,!0);t=pl(t,e)}return t=Ph(t,RO(),1-RO()),fc(uu(dl(tl(e,"float32"),Qc(t)),t.shape.length-1))}))}function mL(e,t,n=!1){return il((()=>{const s=tl(pp(function(e){const t=[TO(e.shape)];return bl(e,t)}(e)),"int32"),r=(t=Ph(t,RO(),1-RO())).shape;return fL(bl(Bp(s,r[r.length-1]),r),t,n)}))}function gL(e,t){return il((()=>{let n;return n=Ph(t,RO(),1-RO()),n=Qc(pl(n,sc(1,n))),Hc(function(e,t){if(!Xs.arraysEqual(e.shape,t.shape))throw new zD(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return il((()=>{const n=au(t),s=fc(xc(t));return cl(sc(n,dl(t,e)),rh(sh(s)))}))}(e,n),-1)}))}function yL(e,t){return il((()=>{const n=Ph(e,RO(),1),s=Ph(t,RO(),1);return uu(dl(e,Qc(pl(n,s))),-1)}))}function bL(e,t){return il((()=>{const n=uL(e,-1),s=uL(t,-1),r=dl(n,s);return fc(uu(r,-1))}))}iL.constructors={};const xL={meanSquaredError:cL,meanAbsoluteError:hL,meanAbsolutePercentageError:pL,meanSquaredLogarithmicError:dL,squaredHinge:function(e,t){return il((()=>{const n=Fp(0,sc(1,dl(e,t)));return Hc(VO(n),-1)}))},hinge:function(e,t){return il((()=>{const n=Fp(0,sc(1,dl(e,t)));return Hc(n,-1)}))},categoricalHinge:function(e,t){return il((()=>{const n=uu(dl(e,t),-1),s=Ec(dl(sc(1,e),t),-1);return Fp(0,cl(1,sc(s,n)))}))},logcosh:function(e,t){return il((()=>{const n=Math.log(2),s=sc(t,e),r=sc(cl(s,xp(dl(-2,s))),n);return Hc(r,-1)}))},categoricalCrossentropy:fL,sparseCategoricalCrossentropy:mL,binaryCrossentropy:gL,kullbackLeiblerDivergence:yL,poisson:function(e,t){return il((()=>{const n=Qc(cl(RO(),t));return Hc(sc(t,dl(e,n)),-1)}))},cosineProximity:bL};function wL(e){if("string"==typeof e){if(e in xL)return xL[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new zD(t)}return e}function vL(e,t){return il((()=>{const n=dl(.5,Pp(t)),s=FO(nc(t,n),e.dtype);return Hc(rp(e,s),-1)}))}function kL(e,t){return il((()=>FO(rp(vh(e,-1),vh(t,-1)),"float32")))}function IL(e,t){return il((()=>tl(uu(pc(rp(e,1),rp(t,1))),"float32")))}function SL(e,t){return il((()=>{const n=IL(e,t),s=function(e,t){return il((()=>tl(uu(pc(rp(e,0),rp(t,1))),"float32")))}(e,t),r=cl(n,s);return tl(ic(nc(r,0),pl(n,r),0),"float32")}))}function NL(e,t){return gL(e,t)}function TL(e,t){return e.rank===t.rank&&(e=Mc(e,[e.rank-1])),(t=vh(t,-1)).dtype!==e.dtype&&(t=tl(t,e.dtype)),tl(rp(e,t),"float32")}const CL=fL,$L=mL,EL={binaryAccuracy:vL,categoricalAccuracy:kL,precision:SL,categoricalCrossentropy:CL,sparseCategoricalCrossentropy:$L,mse:cL,MSE:cL,mae:hL,MAE:hL,mape:pL,MAPE:pL,cosine:bL};function AL(e){if("string"==typeof e&&e in EL)return EL[e];if("string"!=typeof e&&null!=e)return e;throw new zD(`Unknown metric ${e}`)}function RL(e){if(VD(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(xL))if(xL[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(EL))if(EL[n]===e){t=n;break}return void 0!==t?t:e.name}}const FL=1048576;function _L(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!DL(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>FL&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function DL(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!DL(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!DL(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function OL(e,t,n,s=console.log){const r=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const r of n.inboundNodes)if(-1!==s.indexOf(r)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),a=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!r){a.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),ML(a,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)r?LL(o[e],n,s):zL(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;t=null!=e.collectedTrainableWeights?wM(e.collectedTrainableWeights):wM(e.trainableWeights);return t}(e),u=wM(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}function ML(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function LL(e,t,n){let s,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}ML([`${e.name} (${e.getClassName()})`,r,s,e.countParams().toString()],t,n)}function zL(e,t,n,s){let r,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],r=t.tensorIndices[e];i.push(`${n}[${s}][${r}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];ML([`${o} (${l})`,a,r,e.countParams().toString(),u],t,s);for(let e=1;e<i.length;++e)ML(["","","","",i[e]],t,s)}function BL(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function PL(e,t){if(null===e)return null;if("string"==typeof e)return KD(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];BL(t,r,s)?n.push(s):n.push(PL(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=KD(n);t[e]=PL(s,e)}}return t}}function WL(e,t){if(null==e)return null;if("string"==typeof e)return qD(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let r=0;r<s;++r){const s=e[r];BL(t,r,s)?n.push(s):n.push(WL(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n],r=qD(n);t[r]="name"!==n&&"className"!==n||"string"!=typeof s?WL(s,n):s}return t}}
/** @license See the LICENSE file. */class UL extends AM{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=cO(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],eO(this.inputs).length!==this.inputs.length)throw new zD(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);eO(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;VD(0===n,"input layer has >1 nodes"),VD(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof FM))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},r={},a={},i=[],o=(e,t,n,s,r,l)=>{null!=s&&null!=r&&null!=l||(s=e.sourceLayer,r=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[r];if(-1!==n.indexOf(u))throw new LD(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(UL.nodeKey(s,r)),s.id in a||(a[s.id]=Object.keys(a).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],r=u.inboundLayers[e],a=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,r,a,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let a=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];a=Math.max(a,i),s[e.outboundLayer.id]=a,r[e.outboundLayer.id]=e.outboundLayer,t[e.id]=a;for(let s=0;s<e.inboundLayers.length;s++){const r=e.inboundLayers[s],i=e.nodeIndices[s],o=r.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(a+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(r[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(QD);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=a[e.id],s=a[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof UL&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(QD);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new LD(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new LD(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new $M({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new zD("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new zD(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const r=[];for(const s in e){let a=s;if(null==n[s]){const e=s.split("/");a=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[a])r.push([n[a],e[s]]);else if(t)throw new zD(`Provided weight data has no target variable: ${s}`);delete n[a]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new zD(`${e.length} of ${s} weights are not set: ${e}`)}SM(r)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 4.5.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=WL(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return il((()=>{e=jD(e);const n=new DM;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return LM(this.outputs,n,t)}))}computeMask(e,t){return il((()=>{let n;return e=jD(e),n=null==t?UD(null,e.length):jD(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=yM(e);if(t.length!==this.inputLayers.length)throw new zD(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],r=t[e];n[s.name+"_0_0"]=r}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(QD);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const r=e.inboundLayers[t],a=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${r.name}_${a}_${i}`];s.push(o)}const r=yM(t.computeOutputShape(HD(s))),a=t.inboundNodes.indexOf(e);for(let e=0;e<r.length;e++){n[`${t.name}_${a}_${e}`]=r[e]}}}const r=[],a=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],r=`${t.name}_${n}_${s}`;a.push(r)}for(let e=0;e<a.length;e++){const t=a[e];VD(t in n),r.push(n[t])}return HD(r)}runInternalGraph(e,t){null==t&&(t=UD(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const r=this.inputs[s],a=e[s],i=t[s];n[r.id]=[a,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(QD);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,r=e.outputTensors,a=new Array;for(const e of s)e.id in n&&a.push(n[e.id]);if(a.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===a.length){const[e,n]=a[0];null==u.mask&&(u.mask=n),o=jD(t.call(e,u)),l=jD(t.computeMask(e,n)),s=[e],i=[n]}else s=a.map((e=>e[0])),i=a.map((e=>e[1])),null==u.mask&&(u.mask=i),o=jD(t.call(s,u)),l=jD(t.computeMask(s,i));if(t.activityRegularizer)throw new BD("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<r.length;++e){const t=r[e],s=o[e],a=l[e];n[t.id]=[s,a]}}}}const r=[],a=[],i=[];for(const e of this.outputs){VD(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),r.push(t),a.push(s)}return[r,a,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof UL?1:0;for(let s=0;s<e.inboundNodes.length;s++){const r=UL.nodeKey(e,s);this.containerNodes.has(r)&&(t[r]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new zD(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new zD("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new zD(`No such layer: ${e}`)}calculateLosses(){return il((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=UL.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),r=e.getConfig(),a=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],r=UL.nodeKey(e,n);let i={};if(this.containerNodes.has(r)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const r=s.inboundLayers[n],a=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[UL.nodeKey(r,a)];null==l&&(l=0),e.push([r.name,l,o,i])}a.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=r,i.inboundNodes=a,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],r=this.inputLayersNodeIndices[e],a=UL.nodeKey(n,r);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const r=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],a=UL.nodeKey(n,s);if(!this.containerNodes.has(a))continue;let i=t[a];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];r.push([n.name,i,o])}return e.outputLayers=r,e}static fromConfig(e,t,n={},s=!1){const r={},a={};function i(e,t){e.name in a?a[e.name].push(t):a[e.name]=[t]}function o(e,t){const n=[];let s;for(const a of t){const o=a[0],l=a[1],u=a[2];if(s=null==a[3]?{}:a[3],!(o in r))return void i(e,t);const c=r[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(HD(n),s)}function l(e){const n=e.name,a=lL(e,null!=t.customObjects?t.customObjects:{});a.setFastWeightInitDuringBuild(s),r[n]=a;e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new zD(`Corrupted configuration, expected array for nodeData: ${e}`);i(a,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!tO(a);)for(const e of c){const t=r[e.name];if(t.name in a){const e=a[t.name];delete a[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];VD(t in r);const a=r[t].inboundNodes[n].outputTensors;h.push(a[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];VD(t in r);const a=r[t].inboundNodes[n].outputTensors;p.push(a[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new zD("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){il((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function VL(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}function GL(e,t){return VL(e,t,"classWeight")}async function HL(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=il((()=>{if(1===e.shape.length)return nl(e);if(2===e.shape.length){if(e.shape[1]>1){return vh(e,1)}if(1===e.shape[1])return bl(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());ol(t);const r=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);r.push(n[e])})),ku(r,"float32")}return null}function jL(e,t){return dl(e,t)}function qL(e,t){let n,s;const r=t;n=r.xs,s=r.ys,Xs.assert(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const a=KL("input",e.inputNames,n),i=KL("output",e.outputNames,s),o=a[0].shape[0];Xs.assert(a.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),Xs.assert(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<a.length;t++)Xs.assert(a[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)Xs.assert(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:a,ys:i}}function KL(e,t,n){if(n instanceof na)return[n];if(Array.isArray(n))return Xs.assert(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const r of t){if(null==n[r])throw new zD(`The feature data generated by the dataset lacks the required ${e} key '${r}'.`);s.push(n[r])}return s}}async function XL(e,t,n){const s=null!=n.batchesPerEpoch;if(Xs.assert(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),Xs.assert(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),Xs.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),Xs.assert(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),Xs.assert(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const r=null!=n.validationData;let a,i;if(r)if(YL(n.validationData))Xs.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new BD("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=aL(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=oL(c,h,n.epochs,null,null,function(e,t){let n=null;null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size);return n}(t,n),null,r,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:r}=qL(e,t.value),a={};a.batch=h,a.size=s[0].shape[0],await p.onBatchBegin(h,a);const i=[];if(null!=n.classWeight){const t=GL(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await HL(r[e],null,t[e]))}const u=s.concat(r).concat(i),d=o(u);ol(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];a[t]=n,ll(n)}await p.onBatchEnd(h,a),JM(a),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(r){let t;t=YL(n.validationData)?jD(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):jD(e.evaluate(a,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function YL(e){return"function"==typeof e.iterator}function ZL(e){Xs.assert(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function JL(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>DO(e,t,n-t))):DO(e,t,n-t)}function QL(e,t){return il((()=>null==e?null:Array.isArray(e)?e.map((e=>QL(e,t))):UO(e,"int32"===t.dtype?t:tl(t,"int32"))))}function ez(e,t){const n=[];let s=0,r=null;for(;s<e;)r=s+t,r>=e&&(r=e),n.push([s,r]),s=r;return n}function tz(e){const t=[];e instanceof na&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(_O(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function nz(e,t){if(null==e)return;const n=[];if(t instanceof na)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof na)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const r=e[t];-1===n.indexOf(r.id)&&s.push(r)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function sz(e){return Array.isArray(e)}function rz(e){return!function(e){return e instanceof na}(e)&&!sz(e)}function az(e,t,n,s=!0,r=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(sz(e)&&e.length>0)t=!0;else if(rz(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new zD(`Error when checking model ${r} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let a;if(rz(e)){a=[];for(const n of t){if(null==e[n])throw new zD(`No data provided for "${n}". Need data for each key in: ${t}`);a.push(e[n])}}else if(sz(e)){if(e.length!==t.length)throw new zD(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);a=e}else{if(t.length>1)throw new zD(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);a=[e]}if(a=tz(a),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new zD(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const a=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&a!==o)throw new zD(`${r} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return a}function iz(e,t,n,s=!0,r=""){let a;if(Array.isArray(e)){if(e.length!==t.length)throw new zD(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);a=e}else{if(t.length>1)throw new zD(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);a=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=a[e];if(i.shape.length!==n[e].length)throw new zD(`Error when checking ${r}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let a=0;a<n[e].length;++a){if(0===a&&!s)continue;const o=i.shape[a],l=n[e][a];if(null!=l&&l!==o)throw new zD(`Error when checking ${r}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class oz extends UL{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new zD("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");OL(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>qg.adagrad(.01),Adadelta:()=>qg.adadelta(1,.95,RO()),Adam:()=>qg.adam(.001,.9,.999,RO()),Adamax:()=>qg.adamax(.002,.9,.999,RO(),0),RMSProp:()=>qg.rmsprop(.001,.9,0,RO()),SGD:()=>qg.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new zD(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof Sf))throw new zD("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new zD(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>wL(e)))}else{const n=wL(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new zD(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(wL(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],vO("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),r=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};vO("metric",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;(t=>{let n,s,a;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let r;1===t[t.length-1]||this.lossFunctions[e]===gL?-1!==["accuracy","acc"].indexOf(i)?s=vL:-1!==["crossentropy","ce"].indexOf(i)&&(s=NL):this.lossFunctions[e]===mL?-1!==["accuracy","acc"].indexOf(i)?s=TL:-1!==["crossentropy","ce"].indexOf(i)&&(s=$L):-1!==["accuracy","acc"].indexOf(i)?s=kL:-1!==["crossentropy","ce"].indexOf(i)&&(s=CL),-1!==["accuracy","acc"].indexOf(i)?r="acc":-1!==["crossentropy","ce"].indexOf(i)&&(r="ce"),a=s,n=""+r}else{const e=AL(i);a=e,n=""+RL(i)}let t;vO(n,(()=>{t=a})),r(e,n,t)}})(s[e])}})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;ZL(s);const r=this.standardizeUserDataXY(e,t,!0,s);try{const a=r[0].concat(r[1]);this.makeTestFunction();const i=this.testFunction;return HD(this.testLoop(i,a,s,n.verbose,n.steps))}finally{nz(r[0],e),nz(r[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,r=e.testFunction;let a=[];if(n.verbose>0)throw new BD("Verbose mode is not implemented yet.");Xs.assert(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(a=il((()=>{if(t.value){const{xs:n,ys:s}=qL(e,t.value),i=n.concat(s),u=il((()=>r(i)));if(ol(i),0===l)for(let e=0;e<u.length;++e)a.push(Cl(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=a[e];a[e]=il((()=>cl(a[e],dl(c,t)))),l>0&&ol(n)}ol(u),o+=c,++l}return a})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<a.length;++e){const t=a[e];a[e]=pl(a[e],o),ol(t)}return HD(a)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let r;if(null!=n){if(r=null,null!=t)throw new zD(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new zD(`Either the input data should have a defined shape, or ${s} shoud be specified.`);r=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return r}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new zD("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],r=this.retrieveSymbolicTensors(s),a=new DM;if(e instanceof na&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new zD(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)a.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new zD(`No value is provided for the model's input ${t.name}`);a.add(t,n)}const i=LM(r,a);return n?i:i[0]}retrieveSymbolicTensors(e){const t=UD(null,e.length);let n=e.length;for(const s of this.layers){const r=Array.isArray(s.output)?s.output:[s.output],a=r.map((e=>e.name));for(let s=0;s<e.length;++s){const i=a.indexOf(e[s]);if(-1!==i&&(t[s]=r[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new zD(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return il((()=>{const s=this.checkNumSamples(e);if(n)throw new BD("Verbose predictLoop() is not implemented yet.");const r=ez(s,t),a=this.outputs.map((e=>[]));for(let t=0;t<r.length;++t){il((()=>{const n=r[t][0],s=r[t][1],a=JL(e,n,s),i=[];if(Array.isArray(a))for(let e=0;e<a.length;++e)i.push({key:this.inputs[e],value:a[e]});else i.push({key:this.inputs[0],value:a});const o=new DM(i);return LM(this.outputs,o)})).forEach(((e,t)=>a[t].push(e)))}return HD(a.map((e=>ml(e,0))))}))}predict(e,t={}){const n=tz(e);iz(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return ZL(s),this.predictLoop(n,s)}finally{nz(n,e)}}predictOnBatch(e){iz(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new LD("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const r=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===mL?r.push(t.slice(0,t.length-1).concat([1])):r.push(t)}if(function(e,t,n){const s=eO(e.map((e=>e.shape[0])));s.sort();const r=eO(t.map((e=>e.shape[0])));if(r.sort(),s.length>1)throw new zD(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(r.length>1)throw new zD(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&r.length>0&&!Xs.arraysEqual(s,r))throw new zD(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=az(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=az(t,this.feedOutputNames,r,!1,"target")),function(e,t,n){const s=[cL,gL,fL];for(let r=0;r<e.length;++r){const a=e[r],i=t[r],o=n[r];if(null!=i){if(i===fL&&1===a.shape[a.shape.length-1])throw new zD(`You are passing a target array of shape ${a.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=a.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],r=t[n];if(null!=r&&s!==r)throw new zD(`A target Tensor with shape ${a.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new zD(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,r=!0,a){const[i,o]=this.standardizeUserDataXY(e,t,r,a);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=GL(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await HL(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,r){return il((()=>{const a=this.checkNumSamples(t,n,r,"steps"),i=[];if(s>0)throw new BD("Verbose mode is not implemented yet.");if(null!=r)throw new BD("steps mode in testLoop() is not implemented yet");{const s=ez(a,n),r=ku(EO(0,a));for(let n=0;n<s.length;++n){const a=s[n][0],o=s[n][1],l=DO(r,a,o-a),u=QL(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(Cl(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=cl(i[e],dl(o-a,t))}}for(let e=0;e<i.length;++e)i[e]=pl(i[e],a)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let r=s;if(GD(e,s)>1){r+=`_${GD(e.slice(0,n),s)}`}t.push(r)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),a=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new DM(e),o=LM(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=r[e]&&(n=jL(n,r[e]));const a=Hc(n);t.push(a),l=0===e?n:cl(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],r=this.metricsTensors[e][1];n=Hc(t(s[r],o[r]))}ll(n),a.push(n)}return l=Hc(l),this.calculateLosses().forEach((e=>{l=cl(l,e)})),l}),!0,i)].concat(a)}}makeTestFunction(){this.testFunction=e=>il((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=[];for(let e=0;e<this.inputs.length;++e)a.push({key:this.inputs[e],value:s[e]});const i=new DM(a),o=LM(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],a=Hc(s(r[e],o[e]));n=0===e?a:cl(n,a),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],a=Hc(n(r[s],o[s]));t.push(a)}return t}))}async fit(e,t,n={}){if(this.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let s,r,a,i,o,l,u,c,h;this.isTraining=!0;try{const p=null==n.batchSize?32:n.batchSize;ZL(p);const d=!1,f=await this.standardizeUserData(e,t,n.sampleWeight,n.classWeight,d,p);s=f[0],r=f[1],h=f[2];let m,g=!1;if(null!=n.validationData&&n.validationData.length>0){if(g=!0,2!==n.validationData.length)throw 3===n.validationData.length?new BD("validationData including sample weights is not supported yet."):new zD(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${n.validationData} is invalid.`);o=n.validationData[0],l=n.validationData[1];const e=!0,t=await this.standardizeUserData(o,l,null,null,e,p);u=t[0],c=t[1],m=u.concat(c)}else if(null!=n.validationSplit&&n.validationSplit>0&&n.validationSplit<1){g=!0;const e=Math.floor(s[0].shape[0]*(1-n.validationSplit)),t=s[0].shape[0];u=JL(s,e,t),a=s,s=JL(s,0,e),c=JL(r,e,t),i=r,r=JL(r,0,e),m=u.concat(c)}else null!=n.validationSteps&&(g=!0);const y=s.concat(r).concat(h);this.checkTrainableWeightsConsistency();const b=this.makeTrainFunction(),x=this.getDedupedMetricsNames();let w,v;g?(this.makeTestFunction(),w=this.testFunction,v=x.slice().concat(x.map((e=>"val_"+e)))):(w=null,m=[],v=x.slice());const k=aL(n.callbacks,n.yieldEvery);return await this.fitLoop(b,y,x,p,n.epochs,n.verbose,k,w,m,n.shuffle,v,n.initialEpoch,null,null)}finally{this.isTraining=!1,nz(s,e),nz(r,t),nz(a,e),nz(i,t),nz(u,o),nz(c,l),null!=h&&ol(h)}}async fitLoop(e,t,n,s,r,a,i,o,l,u,c,h,p,d){null==s&&(s=32),null==r&&(r=1),null==u&&(u=!0),null==h&&(h=0);let f=!1;if(null!=o&&null!=l&&(f=!0),null!=d&&(f=!0,null==p))throw new zD("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const m=this.checkNumSamples(t,s,p,"steps_per_epoch");let g;null!=m&&(g=EO(0,m)),null==a&&(a=1);const{callbackList:y,history:b}=oL(i,a,r,h,m,p,s,f,c);y.setModel(this),this.history=b,await y.onTrainBegin(),this.stopTraining_=!1;for(let a=h;a<r;++a){await y.onEpochBegin(a);const r={};if(null!=p)throw new BD("stepsPerEpoch mode is not implemented yet.");{if("batch"===u)throw new BD("batch shuffling is not implemneted yet");u&&Xs.shuffle(g);const a=ku(g),i=ez(m,s);for(let u=0;u<i.length;++u){const c={};if(await y.onBatchBegin(u,c),il((()=>{const h=i[u][0],p=i[u][1],d=DO(a,h,p-h);c.batch=u,c.size=p-h;const m=QL(t,d),g=e(m);for(let e=0;e<n.length;++e){const t=n[e],s=g[e];c[t]=s,ll(s)}if(u===i.length-1&&f){const e=this.testLoop(o,l,s);for(let t=0;t<n.length;++t){const s=n[t],a=e[t];ll(a),r["val_"+s]=a}}})),await y.onBatchEnd(u,c),JM(c),this.stopTraining_)break}a.dispose()}if(await y.onEpochEnd(a,r),this.stopTraining_)break}return await y.onTrainEnd(),await this.history.syncData(),this.history}async fitDataset(e,t){return XL(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],r=n[1],a=this.makeTrainFunction()(s.concat(r)),i=[];for(const e of a){const t=await e.data();i.push(t[0])}return ol(a),nz(n[0],e),nz(n[1],t),HD(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,r=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:r[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=al().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-al().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=qD(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>qD(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=qD(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[qD(RL(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>qD(RL(e))));{const e={};for(const t in this.metrics)e[t]=qD(RL(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=lL(PL(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=KD(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>KD(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=KD(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>KD(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=KD(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=_f.getSaveHandlers(e);if(0===t.length)throw new zD(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new zD(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new zD("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await _f.encodeWeights(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.5.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:r}=await _f.encodeWeights(await this.optimizer.getWeights(),e);n.specs.push(...r),n.data=_f.concatenateArrayBuffers([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;_L(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){_L(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}oz.className="Model",wf.registerClass(oz);class lz extends oz{}lz.className="Functional",wf.registerClass(lz);class uz extends oz{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:cO("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new zD(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof uz||e instanceof oz;let n;if(t){if(n=e,1!==n.outputs.length)throw new zD("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new zD("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new zD("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=_M({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new zD(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new zD("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=RM(this.outputs[0])}this.inboundNodes=[],new $M({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:UD(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(xM(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new oz({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new LD("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new LD("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new LD("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new LD("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let r,a={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new zD("Legacy serialization format not supported yet.");r=t}else Xs.assert(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),r=t.layers,delete t.layers,a=t;const i=new e(a);if(!(i instanceof uz))throw new BD(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of r){const t=lL(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new zD("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new zD("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}uz.className="Sequential",wf.registerClass(uz);class cz extends wf.Serializable{getConfig(){return{}}}class hz extends cz{apply(e,t=1){return function(e,t=1){if(1!==t)throw new BD(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return nu(e)}(e,t)}}hz.className="elu",wf.registerClass(hz);class pz extends cz{apply(e){return kd(e)}}pz.className="selu",wf.registerClass(pz);class dz extends cz{apply(e){return au(e)}}dz.className="relu",wf.registerClass(dz);class fz extends cz{apply(e){return il((()=>dc(6,au(e))))}}fz.className="relu6",wf.registerClass(fz);class mz extends cz{apply(e){return e}}mz.className="linear",wf.registerClass(mz);class gz extends cz{apply(e){return ou(e)}}gz.className="sigmoid",wf.registerClass(gz);class yz extends cz{apply(e){return function(e){return il((()=>{const t=cl(.5,dl(.2,e));return Ph(t,0,1)}))}(e)}}yz.className="hardSigmoid",wf.registerClass(yz);class bz extends cz{apply(e){return xp(e)}}bz.className="softplus",wf.registerClass(bz);class xz extends cz{apply(e){return function(e){return il((()=>pl(e,cl(xc(e),1))))}(e)}}xz.className="softsign",wf.registerClass(xz);class wz extends cz{apply(e){return Ah(e)}}wz.className="tanh",wf.registerClass(wz);class vz extends cz{apply(e,t=-1){return Fd(e,t)}}vz.className="softmax",wf.registerClass(vz);class kz extends cz{apply(e,t=-1){return vp(e,t)}}kz.className="logSoftmax",wf.registerClass(kz);class Iz extends cz{apply(e,t=1){return il((()=>dl(ou(dl(e,t)),e)))}}Iz.className="swish",wf.registerClass(Iz);class Sz extends cz{apply(e){return il((()=>dl(e,Ah(xp(e)))))}}function Nz(e){return e.getClassName()}function Tz(e,t={}){return JD(e,wf.SerializationMap.getMap().classNameMap,t,"activation")}function Cz(e){if(null==e){const e={className:"linear",config:{}};return Tz(e)}if("string"==typeof e){const t={};return t.className=e,t.config={},Tz(t)}return e instanceof cz?e:Tz(e)}function $z(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}Sz.className="mish",wf.registerClass(Sz);class Ez extends wf.Serializable{}class Az extends Ez{constructor(e){super(),$z(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return il((()=>{let t=vl([1]);return this.hasL1&&(t=cl(t,uu(dl(this.l1,xc(e))))),this.hasL2&&(t=cl(t,uu(dl(this.l2,VO(e))))),bl(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}Az.className="L1L2",wf.registerClass(Az);const Rz={l1l2:"L1L2"};function Fz(e){return YD(e)}function _z(e,t={}){return JD(e,wf.SerializationMap.getMap().classNameMap,t,"regularizer")}function Dz(e){if(null==e)return null;if("string"==typeof e){return _z({className:e in Rz?Rz[e]:e,config:{}})}return e instanceof Ez?e:_z(e)}class Oz extends AM{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=bM(e);let n=au(e);return null!=this.maxValue&&(n=Ph(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Oz.className="ReLU",wf.registerClass(Oz);class Mz extends AM{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=bM(e);return su(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Mz.className="LeakyReLU",wf.registerClass(Mz);class Lz extends AM{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=mM(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Dz(e.alphaRegularizer),this.alphaConstraint=YM(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new zD(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=xM(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new NM({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=bM(e),ru(e,this.alpha.read())}getConfig(){const e={alphaInitializer:fM(this.alphaInitializer),alphaRegularizer:Fz(this.alphaRegularizer),alphaConstraint:KM(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Lz.className="PReLU",wf.registerClass(Lz);class zz extends AM{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new BD(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=bM(e);return nu(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}zz.className="ELU",wf.registerClass(zz);class Bz extends AM{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=bM(e);return dl(n,tl(nc(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}Bz.className="ThresholdedReLU",wf.registerClass(Bz);class Pz extends AM{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new vz).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=bM(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Wz(e,t,n){if("number"==typeof e)return UD(e,t);if(e.length!==t)throw new zD(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){const a=e[r];if((s=a)!==parseInt(s.toString(),10))throw new zD(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e;var s}function Uz(e,t,n,s,r=1){if(null==e)return e;let a;return a="same"===n?e:e-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Vz(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+$O([n-t,0]);else{if("same"!==s)throw new zD(`Unsupport padding mode: ${s}.`);e*=t}return e}function Gz(e,t){return il((()=>(yO(t),"channelsFirst"===t?Wc(e,[0,2,3,1]):e)))}function Hz(e,t){return il((()=>(yO(t),"channelsFirst"===t?Wc(e,[0,2,3,4,1]):e)))}function jz(e,t,n,s=1,r="valid",a,i=1){return il((()=>{if(null==a&&(a="channelsLast"),yO(a),3!==e.shape.length)throw new zD(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new zD(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new zD(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===a&&(e=Wc(e,[0,2,1])),"causal"===r)throw new BD("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Hh(e,t,s,"same"===r?"same":"valid","NWC",i);return null!=n&&(o=HO(o,n)),o}))}function qz(e,t,n,s=[1,1],r="valid",a,i,o=null){return il((()=>{if(null==a&&(a="channelsLast"),yO(a),3!==e.rank&&4!==e.rank)throw new zD(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new zD(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Gz(e,a);if("causal"===r)throw new BD("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=El.conv2d({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===a&&(l=Wc(l,[0,3,1,2])),l}))}function Kz(e,t,n,s=[1,1,1],r="valid",a,i){return il((()=>{if(null==a&&(a="channelsLast"),yO(a),4!==e.rank&&5!==e.rank)throw new zD(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new zD(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Hz(e,a);if("causal"===r)throw new BD("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=qh(o,t,s,"same"===r?"same":"valid","NDHWC",i),null!=n&&(o=HO(o,n)),"channelsFirst"===a&&(o=Wc(o,[0,4,1,2,3])),o}))}Pz.className="Softmax",wf.registerClass(Pz);class Xz extends AM{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Xz.verifyArgs(t),this.rank=e,rO(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new BD(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Wz(t.kernelSize,e,"kernelSize"),this.strides=Wz(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,bO(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,yO(this.dataFormat),this.activation=Cz(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=mM(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=YM(t.biasConstraint),this.biasRegularizer=Dz(t.biasRegularizer),this.activityRegularizer=Dz(t.activityRegularizer),this.dilationRate=Wz(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new zD(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new zD(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new zD(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(VD("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!sO(e.kernelSize,"number",1,3))throw new zD(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Nz(this.activation),useBias:this.useBias,biasInitializer:fM(this.biasInitializer),biasRegularizer:Fz(this.biasRegularizer),activityRegularizer:Fz(this.activityRegularizer),biasConstraint:KM(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class Yz extends Xz{constructor(e,t){super(e,t),this.kernel=null,Yz.verifyArgs(t),this.filters=t.filters,rO(this.filters,"filters"),this.kernelInitializer=mM(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=YM(t.kernelConstraint),this.kernelRegularizer=Dz(t.kernelRegularizer)}build(e){e=xM(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new zD(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return il((()=>{let t;e=bM(e);const n=null==this.bias?null:this.bias.read(),s=iO(this.activation.getClassName());if(null!=s&&2===this.rank)t=qz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=jz(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=qz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new BD("convolutions greater than 3D are not implemented yet.");t=Kz(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=xM(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Uz(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:fM(this.kernelInitializer),kernelRegularizer:Fz(this.kernelRegularizer),kernelConstraint:KM(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new zD(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Zz extends Yz{constructor(e){super(2,e),Zz.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!sO(e.kernelSize,"number",1,2))throw new zD(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Zz.className="Conv2D",wf.registerClass(Zz);class Jz extends Yz{constructor(e){super(3,e),Jz.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new zD(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}Jz.className="Conv3D",wf.registerClass(Jz);class Qz extends Zz{constructor(e){if(super(e),this.inputSpec=[new NM({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new zD(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=xM(e)).length)throw new zD("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new zD("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new NM({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return il((()=>{let t=bM(e);if(4!==t.shape.length)throw new zD(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a;"channelsFirst"===this.dataFormat?(r=2,a=3):(r=1,a=2);const i=n[r],o=n[a],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Vz(i,c,l,this.padding),Vz(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Wc(t,[0,2,3,1]));let d=jh(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Wc(d,[0,3,1,2])),null!=this.bias&&(d=HO(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=xM(e)).slice();let n,s,r;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3):(n=3,s=1,r=2);const a=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Vz(t[s],o,a,this.padding),t[r]=Vz(t[r],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Qz.className="Conv2DTranspose",wf.registerClass(Qz);class eB extends Jz{constructor(e){if(super(e),this.inputSpec=[new NM({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new zD(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=xM(e)).length)throw new zD("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new zD("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new NM({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return il((()=>{let t=bM(e);if(5!==t.shape.length)throw new zD(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let r,a,i;"channelsFirst"===this.dataFormat?(i=2,r=3,a=4):(i=1,r=2,a=3);const o=n[i],l=n[r],u=n[a],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,Vz(o,d,c,this.padding),Vz(l,f,h,this.padding),Vz(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Wc(t,[0,2,3,4,1]));let y=Xh(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Wc(y,[0,4,1,2,3])),null!==this.bias&&(y=HO(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=xM(e)).slice();let n,s,r,a;"channelsFirst"===this.dataFormat?(n=1,s=2,r=3,a=4):(n=4,s=1,r=2,a=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Vz(t[s],u,i,this.padding),t[r]=Vz(t[r],c,o,this.padding),t[a]=Vz(t[a],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}eB.className="Conv3DTranspose",wf.registerClass(eB);class tB extends Yz{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new zD("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new zD("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new zD(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=mM(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Dz(t.depthwiseRegularizer),this.depthwiseConstraint=YM(t.depthwiseConstraint),this.pointwiseInitializer=mM(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Dz(t.pointwiseRegularizer),this.pointwiseConstraint=YM(t.pointwiseConstraint)}build(e){if((e=xM(e)).length<this.rank+2)throw new zD(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new zD(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),r=[];for(let e=0;e<this.rank;++e)r.push(1);r.push(n*this.depthMultiplier,this.filters);const a=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,a,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",r,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,a,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,a,this.biasConstraint):this.bias=null,this.inputSpec=[new NM({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return il((()=>{let t;if(e=bM(e),1===this.rank)throw new BD("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Wc(e,[0,2,3,1])),t=Id(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=HO(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Wc(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=fM(this.depthwiseInitializer),e.pointwiseInitializer=fM(this.pointwiseInitializer),e.depthwiseRegularizer=Fz(this.depthwiseRegularizer),e.pointwiseRegularizer=Fz(this.pointwiseRegularizer),e.depthwiseConstraint=KM(this.depthwiseConstraint),e.pointwiseConstraint=KM(this.pointwiseConstraint),e}}tB.className="SeparableConv";class nB extends tB{constructor(e){super(2,e)}}nB.className="SeparableConv2D",wf.registerClass(nB);class sB extends Yz{constructor(e){super(1,e),sB.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!sO(e.kernelSize,"number",1,1))throw new zD(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}sB.className="Conv1D",wf.registerClass(sB);class rB extends AM{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return il((()=>{if(e=bM(e),"channelsLast"===this.dataFormat){const t=MO(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return MO(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=MO(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return MO(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}rB.className="Cropping2D",wf.registerClass(rB);class aB extends AM{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,yO(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,nO(pO,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return il((()=>{let t=bM(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Wc(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],r="nearest"===this.interpolation?mf.resizeNearestNeighbor(t,[e,s]):mf.resizeBilinear(t,[e,s]);return Wc(r,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?mf.resizeNearestNeighbor(t,[e,s]):mf.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}aB.className="UpSampling2D",wf.registerClass(aB);class iB extends Xz{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=mM(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=YM(e.depthwiseConstraint),this.depthwiseRegularizer=Dz(e.depthwiseRegularizer)}build(e){if((e=xM(e)).length<4)throw new zD(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new zD(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return il((()=>{let t=function(e,t,n=[1,1],s="valid",r,a){return il((()=>{null==r&&(r="channelsLast"),yO(r);let i=Gz(e,r);if(4!==e.rank)throw new zD(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new zD(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=mu(i,t,n,"same"===s?"same":"valid","NHWC",a),"channelsFirst"===r&&(i=Wc(i,[0,3,1,2])),i}))}(e=bM(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=HO(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=xM(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,r=Uz(t,this.kernelSize[0],this.padding,this.strides[0]),a=Uz(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,r,a]:[e[0],r,a,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=fM(this.depthwiseInitializer),e.depthwiseRegularizer=Fz(this.depthwiseRegularizer),e.depthwiseConstraint=KM(this.depthwiseRegularizer),e}}iB.className="DepthwiseConv2D",wf.registerClass(iB);var oB={};function lB(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new zD("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function r(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=r(t),constants:n=r(n)}}function uB(e,t,n,s=!1,r,a,i=!1,o=!1){return il((()=>{const l=t.shape.length;if(l<3)throw new zD(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(EO(2,l));if(t=Wc(t,u),null!=a)throw new BD("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=tl(tl(r,"bool"),"float32")).rank===l-1&&(r=zc(r,-1)),r=Wc(r,u)),s&&(t=Tl(t,0),null!=r&&(r=Tl(r,0)));const c=[];let h,p=n;const d=t.shape[0],f=gc(t);let m,g;null!=r&&(m=gc(r));for(let t=0;t<d;++t){const n=f[t],s=il((()=>e(n,p)));if(null==r)h=s[0],p=s[1];else{const e=il((()=>{const e=m[t],n=sc(Pp(e),e);return{output:cl(dl(s[0],e),dl(p[0],n)),newStates:p.map(((t,r)=>cl(dl(s[1][r],e),dl(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}if(o){g=mc(c,1)}return[h,g,p]}))}t(oB,"ConvLSTM2DCell",(()=>kB),(e=>kB=e)),t(oB,"ConvLSTM2D",(()=>IB),(e=>IB=e));class cB extends AM{constructor(e){let t;if(super(e),null==e.cell)throw new zD("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new bB({cells:e.cell}):e.cell,null==t.stateSize)throw new zD("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new NM({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null==this.states_){return EO(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null))}return this.states_}setStates(e){this.states_=e}computeOutputShape(e){gM(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return il((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new BD("Constants support is not implemented in RNN yet.");gM(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new NM({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let r;if(this.cell.build(s),r=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Xs.arraysEqual(this.stateSpec.map((e=>e.shape[e.shape.length-1])),r))throw new zD(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=r.map((e=>new NM({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){il((()=>{if(!this.stateful)throw new MD("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new zD("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>vl([n,e]))):this.states_=[vl([n,this.cell.stateSize])];else if(null==e)ol(this.states_),null!=this.keptStates&&(ol(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>vl([n,e]))):this.states_[0]=vl([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new zD(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):ol(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],r=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,a=[n,r];if(!Xs.arraysEqual(s.shape,a))throw new zD(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>ll(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=lB(e,n,s,this.numConstants);e=r.inputs,n=r.initialState,s=r.constants;let a=[],i=[];if(null!=n){t.initialState=n,a=a.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new NM({shape:e.shape}));i=i.concat(this.stateSpec)}null!=s&&(t.constants=s,a=a.concat(s),this.numConstants=s.length);if(a[0]instanceof TM){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return il((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let r=null==t?null:t.initialState;e=bM(e),null==r&&(r=this.stateful?this.states_:this.getInitialState(e));const a=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(r.length!==a)throw new zD(`RNN Layer has ${a} state(s) but was passed ${r.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=uB(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,r,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return il((()=>{let t=vl(e.shape);return t=uu(t,[1,2]),t=_O(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?BO(t,[1,e]):t)):this.cell.stateSize>1?[BO(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===cB.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign(Object.assign(Object.assign({},n),e),t)}static fromConfig(e,t,n={}){const s=lL(t.cell,n);return new e(Object.assign(t,{cell:s}))}}cB.className="RNN",wf.registerClass(cB);class hB extends AM{}class pB extends hB{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,rO(this.units,"units"),this.activation=Cz(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mM(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mM(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mM(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Dz(e.kernelRegularizer),this.recurrentRegularizer=Dz(e.recurrentRegularizer),this.biasRegularizer=Dz(e.biasRegularizer),this.kernelConstraint=YM(e.kernelConstraint),this.recurrentConstraint=YM(e.recurrentConstraint),this.biasConstraint=YM(e.biasConstraint),this.dropout=CO([1,$O([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=CO([1,$O([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=xM(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return il((()=>{if(2!==e.length)throw new zD(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let r;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=xB({ones:()=>Pp(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=xB({ones:()=>Pp(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;r=WO(null!=a?dl(e,a):e,this.kernel.read()),null!=this.bias&&(r=HO(r,this.bias.read())),null!=i&&(n=dl(n,i));let o=cl(r,WO(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Nz(this.activation),useBias:this.useBias,kernelInitializer:fM(this.kernelInitializer),recurrentInitializer:fM(this.recurrentInitializer),biasInitializer:fM(this.biasInitializer),kernelRegularizer:Fz(this.kernelRegularizer),recurrentRegularizer:Fz(this.recurrentRegularizer),biasRegularizer:Fz(this.biasRegularizer),activityRegularizer:Fz(this.activityRegularizer),kernelConstraint:KM(this.kernelConstraint),recurrentConstraint:KM(this.recurrentConstraint),biasConstraint:KM(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),t)}}pB.className="SimpleRNNCell",wf.registerClass(pB);class dB extends cB{constructor(e){e.cell=new pB(e),super(e)}call(e,t){return il((()=>{null!=this.cell.dropoutMask&&(ol(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ol(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return new e(t)}}dB.className="SimpleRNN",wf.registerClass(dB);class fB extends hB{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new zD("GRUCell does not support reset_after parameter set to true.");this.units=e.units,rO(this.units,"units"),this.activation=Cz(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Cz(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mM(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mM(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mM(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Dz(e.kernelRegularizer),this.recurrentRegularizer=Dz(e.recurrentRegularizer),this.biasRegularizer=Dz(e.biasRegularizer),this.kernelConstraint=YM(e.kernelConstraint),this.recurrentConstraint=YM(e.recurrentConstraint),this.biasConstraint=YM(e.biasConstraint),this.dropout=CO([1,$O([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=CO([1,$O([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=xM(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return il((()=>{if(2!==e.length)throw new zD(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=xB({ones:()=>Pp(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=xB({ones:()=>Pp(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,a=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=dl(e,r[0]));let u=WO(e,this.kernel.read());this.useBias&&(u=HO(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=dl(s,a[0]));const c=this.recurrentKernel.read(),[h,p]=wl(c,[2*this.units,this.units],c.rank-1),d=WO(s,h),[f,m,g]=wl(u,3,u.rank-1),[y,b]=wl(d,2,d.rank-1);i=this.recurrentActivation.apply(cl(f,y)),o=this.recurrentActivation.apply(cl(m,b));const x=WO(dl(o,s),p);l=this.activation.apply(cl(g,x));const w=cl(dl(i,s),dl(cl(1,fc(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Nz(this.activation),recurrentActivation:Nz(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fM(this.kernelInitializer),recurrentInitializer:fM(this.recurrentInitializer),biasInitializer:fM(this.biasInitializer),kernelRegularizer:Fz(this.kernelRegularizer),recurrentRegularizer:Fz(this.recurrentRegularizer),biasRegularizer:Fz(this.biasRegularizer),activityRegularizer:Fz(this.activityRegularizer),kernelConstraint:KM(this.kernelConstraint),recurrentConstraint:KM(this.recurrentConstraint),biasConstraint:KM(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),t)}}fB.className="GRUCell",wf.registerClass(fB);class mB extends cB{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new fB(e),super(e)}call(e,t){return il((()=>{null!=this.cell.dropoutMask&&(ol(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ol(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}mB.className="GRU",wf.registerClass(mB);class gB extends hB{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,rO(this.units,"units"),this.activation=Cz(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=Cz(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mM(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mM(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mM(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Dz(e.kernelRegularizer),this.recurrentRegularizer=Dz(e.recurrentRegularizer),this.biasRegularizer=Dz(e.biasRegularizer),this.kernelConstraint=YM(e.kernelConstraint),this.recurrentConstraint=YM(e.recurrentConstraint),this.biasConstraint=YM(e.biasConstraint),this.dropout=CO([1,$O([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=CO([1,$O([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=xM(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends YO{apply(t,s){const r=e.apply([n]),a=(new JO).apply([n]),i=e.apply([2*n]);return zO(zO(r,a),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return il((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new zD(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const r=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=xB({ones:()=>Pp(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=xB({ones:()=>Pp(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=dl(e,a[0]));let h=WO(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=dl(s,i[0])),h=cl(h,WO(s,this.recurrentKernel.read())),this.useBias&&(h=HO(h,this.bias.read()));const[p,d,f,m]=wl(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=cl(dl(l,r),dl(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=dl(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:Nz(this.activation),recurrentActivation:Nz(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fM(this.kernelInitializer),recurrentInitializer:fM(this.recurrentInitializer),biasInitializer:fM(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Fz(this.kernelRegularizer),recurrentRegularizer:Fz(this.recurrentRegularizer),biasRegularizer:Fz(this.biasRegularizer),activityRegularizer:Fz(this.activityRegularizer),kernelConstraint:KM(this.kernelConstraint),recurrentConstraint:KM(this.recurrentConstraint),biasConstraint:KM(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),t)}}gB.className="LSTMCell",wf.registerClass(gB);class yB extends cB{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new gB(e),super(e)}call(e,t){return il((()=>{null!=this.cell.dropoutMask&&(ol(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ol(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}yB.className="LSTM",wf.registerClass(yB);class bB extends hB{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return il((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const r=[];let a;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],a=0===i?[e[0]].concat(n):[a[0]].concat(n),a=o.call(a,t),r.push(a.slice(1))}n=[];for(const e of r.slice().reverse())n.push(...e);return[a[0]].concat(n)}))}build(e){let t;gM(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{vO(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign(Object.assign({},e),t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(lL(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return IM(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,r=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],r[e]])}SM(t)}}function xB(e){const{ones:t,rate:n,training:s=!1,count:r=1,dropoutFunc:a}=e,i=()=>null!=a?a(t(),n):jO(t(),n),o=()=>qO(i,t,s);if(!r||r<=1)return ll(o().clone());return Array(r).fill(void 0).map(o).map((e=>ll(e.clone())))}
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Use of this source code is governed by an MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 * =============================================================================
 */bB.className="StackedRNNCells",wf.registerClass(bB);var wB=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(e);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(e,s[r])&&(n[s[r]]=e[s[r]])}return n};class vB extends cB{constructor(e){if(e.unroll)throw new BD("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new BD("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new NM({ndim:5})]}call(e,t){return il((()=>{if(null!=this.cell.dropoutMask&&(ol(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ol(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new zD("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,r=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:r})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return il((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),r=vl([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(r):[r]}))}resetStates(e,t=!1){il((()=>{if(!this.stateful)throw new MD("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),r=[s[0],...s.slice(2)];if(null==n[0])throw new zD("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>vl(r))):this.states_=[vl(r)];else if(null==e)ol(this.states_),null!=this.keptStates&&(ol(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>vl(r))):this.states_[0]=vl(r);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new zD(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ol(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=r;if(!Xs.arraysEqual(n.shape,s))throw new zD(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>ll(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:r,strides:a,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Uz(l,s[0],r,a[0],i[0]),h=Uz(u,s[1],r,a[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}vB.className="ConvRNN2D";class kB extends gB{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:r,dataFormat:a,dilationRate:i}=e;super(Object.assign(Object.assign({},e),{units:t})),this.filters=t,rO(this.filters,"filters"),this.kernelSize=Wz(n,2,"kernelSize"),this.kernelSize.forEach((e=>rO(e,"kernelSize"))),this.strides=Wz(s||1,2,"strides"),this.strides.forEach((e=>rO(e,"strides"))),this.padding=r||"valid",bO(this.padding),this.dataFormat=a||"channelsLast",yO(this.dataFormat),this.dilationRate=Wz(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>rO(e,"dilationRate")))}build(e){var t;e=xM(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new zD(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],r=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const a=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",a,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends YO{apply(e,t){return LO([n.apply([s]),qc([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return il((()=>{if(3!==e.length)throw new zD(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],r=e[1],a=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=xB({ones:()=>Pp(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?dl(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=xB({ones:()=>Pp(r),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(r,p,0),f=o(r,p,1),m=o(r,p,2),g=o(r,p,3);const[y,b,x,w]=wl(this.kernel.read(),4,3),[v,k,I,S]=this.useBias?wl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,k,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,S,this.padding);const[N,T,C,$]=wl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);const E=this.recurrentActivation.apply(cl(l,d)),A=this.recurrentActivation.apply(cl(u,f)),R=cl(dl(A,a),dl(E,this.activation.apply(cl(c,m)))),F=dl(this.recurrentActivation.apply(cl(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=wB(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},n),s)}inputConv(e,t,n,s){const r=Jl(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?HO(r,n,this.dataFormat):r}recurrentConv(e,t){return Jl(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}kB.className="ConvLSTM2DCell",wf.registerClass(kB);class IB extends vB{constructor(e){const t=new kB(e);super(Object.assign(Object.assign({},e),{cell:t}))}static fromConfig(e,t){return new e(t)}}IB.className="ConvLSTM2D",wf.registerClass(IB);class SB extends AM{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return qO((()=>jO(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}SB.className="Dropout",wf.registerClass(SB);class NB extends SB{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}NB.className="SpatialDropout1D",wf.registerClass(NB);class TB extends AM{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,rO(this.units,"units"),this.activation=Cz(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=mM(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=mM(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=YM(e.kernelConstraint),this.biasConstraint=YM(e.biasConstraint),this.kernelRegularizer=Dz(e.kernelRegularizer),this.biasRegularizer=Dz(e.biasRegularizer),this.activityRegularizer=Dz(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=xM(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=xM(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e),s=iO(this.activation.getClassName());let r;return null!=s?r=WO(n,this.kernel.read(),s,this.bias?this.bias.read():null):(r=WO(n,this.kernel.read()),null!=this.bias&&(r=HO(r,this.bias.read())),null!=this.activation&&(r=this.activation.apply(r))),r}))}getConfig(){const e={units:this.units,activation:Nz(this.activation),useBias:this.useBias,kernelInitializer:fM(this.kernelInitializer),biasInitializer:fM(this.biasInitializer),kernelRegularizer:Fz(this.kernelRegularizer),biasRegularizer:Fz(this.biasRegularizer),activityRegularizer:Fz(this.activityRegularizer),kernelConstraint:KM(this.kernelConstraint),biasConstraint:KM(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}TB.className="Dense",wf.registerClass(TB);class CB extends AM{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=xM(e);for(const t of e.slice(1))if(null==t)throw new zD(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],TO(e,1)]}call(e,t){return il((()=>{this.invokeCallHook(e,t);let n=bM(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Wc(n,e)}return function(e){if(e.rank<=1)throw new zD(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],TO(e.shape,1)];return bl(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}CB.className="Flatten",wf.registerClass(CB);class $B extends AM{constructor(e){super(e),this.supportsMasking=!0,this.activation=Cz(e.activation)}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e);return this.activation.apply(n)}))}getConfig(){const e={activation:Nz(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}$B.className="Activation",wf.registerClass($B);class EB extends AM{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return il((()=>{return e=bM(e),t=e,n=this.n,il((()=>{if(2!==t.shape.length)throw new zD(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return BO(_O(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}EB.className="RepeatVector",wf.registerClass(EB);class AB extends AM{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let r=1,a=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==a)throw new zD("Can only specifiy one unknown dimension.");a=e}else r*=t}const i=TO(e);if(null!==a){if(0===r||i%r!=0)throw new zD(n);s[a]=i/r}else if(i!==r)throw new zD(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e),s=n.shape,r=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return bl(n,r)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}AB.className="Reshape",wf.registerClass(AB);class RB extends AM{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=EO(1,e.dims.length+1);if(!Xs.arraysEqual(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new NM({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=xM(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Wc(bM(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}RB.className="Permute",wf.registerClass(RB);class FB extends AM{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=bM(e);return wh(jc(n,this.maskValue),-1)}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e),s=wh(jc(n,this.maskValue),-1,!0);return dl(n,tl(s,n.dtype))}))}}FB.className="Masking",wf.registerClass(FB);class _B extends AM{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(jD(e.inputLength))}this.inputDim=e.inputDim,rO(this.inputDim,"inputDim"),this.outputDim=e.outputDim,rO(this.outputDim,"outputDim"),this.embeddingsInitializer=mM(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Dz(e.embeddingsRegularizer),this.activityRegularizer=Dz(e.activityRegularizer),this.embeddingsConstraint=YM(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return il((()=>this.maskZero?(e=bM(e),jc(e,kl(e))):null))}computeOutputShape(e){if(e=xM(e),null==this.inputLength)return[...e,this.outputDim];const t=jD(this.inputLength);if(t.length!==e.length-1)throw new zD(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const r=t[s],a=e[s+1];if(null!=r&&null!=a&&r!==a)throw new zD(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==r&&(t[n]=a),n++}}return[e[0],...t,this.outputDim]}call(e,t){return il((()=>{this.invokeCallHook(e,t);let n=bM(e);"int32"!==n.dtype&&(n=FO(n,"int32"));const s=UO(this.embeddings.read(),bl(n,[n.size]));return bl(s,xM(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:fM(this.embeddingsInitializer),embeddingsRegularizer:Fz(this.embeddingsRegularizer),activityRegularizer:Fz(this.activityRegularizer),embeddingsConstraint:KM(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}_B.className="Embedding",wf.registerClass(_B);class DB extends AM{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new BD}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const r=e[e.length-t.length+s],a=t[s];if(null==r||null==a||r<0||a<0)n.push(null);else if(1===r)n.push(a);else if(1===a)n.push(r);else{if(r!==a)throw new zD("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(r)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[xM(e)]),e.length<2)throw new zD(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=eO(t),t.length>1)throw new zD(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===eO(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return il((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=$O(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=_O(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,r=e[0],a=e.slice(1).concat([r]);let i=bl(s,[r].concat(TO(e.slice(1))));i=Wc(i,[1,0]),i=bl(i,a),t.push(i),n=!0}else if(e>1){const r=EO(1,e).concat([0]);t.push(Wc(s,r)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const r=s.rank;if(n)if(null==r){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=bl(Wc(bl(s,[-1,t]),[1,0]),n)}else if(r>1){const e=[r-1].concat(EO(0,r-1));s=Wc(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=eO(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return il((()=>{if(null==t)return null;if(!Array.isArray(t))throw new zD("`mask` should be an Array");if(!Array.isArray(e))throw new zD("`inputs` should be an Array");if(t.length!==e.length)throw new zD(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:zc(e,0))))[0];for(let e=1;e<t.length-1;++e)n=pc(n,t[e]);return n}))}}class OB extends DB{constructor(e){super(e)}mergeFunction(e){return il((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=cl(t,e[n]);return t}))}}OB.className="Add",wf.registerClass(OB);class MB extends DB{constructor(e){super(e)}mergeFunction(e){return il((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=dl(t,e[n]);return t}))}}MB.className="Multiply",wf.registerClass(MB);class LB extends DB{constructor(e){super(e)}mergeFunction(e){return il((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=cl(t,e[n]);return dl(1/e.length,t)}))}}LB.className="Average",wf.registerClass(LB);class zB extends DB{constructor(e){super(e)}mergeFunction(e){return il((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Fp(t,e[n]);return t}))}}zB.className="Maximum",wf.registerClass(zB);class BB extends DB{constructor(e){super(e)}mergeFunction(e){return il((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=dc(t,e[n]);return t}))}}BB.className="Minimum",wf.registerClass(BB);class PB extends DB{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new zD("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let r=!1;for(const e of n)if(Xs.arraysEqual(e,s)){r=!0;break}r||n.push(s)}if(n.length>1)throw new zD("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return il((()=>LO(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new zD("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new zD("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new zD("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new zD(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return il((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(tl(Pp(e[n]),"bool")):t[n].rank<e[n].rank?s.push(zc(t[n],-1)):s.push(t[n]);const r=ml(s,this.axis);return xh(r,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function WB(e,t){for(;e<0;)e+=t;return e}PB.className="Concatenate",wf.registerClass(PB);class UB extends DB{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){Xs.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new BD("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new zD(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new zD(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>WB(t,e[n].shape.length))):[WB(this.axes,n.shape.length),WB(this.axes,s.shape.length)],this.normalize&&(n=uL(n,t[0]),s=uL(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new BD("batchDot is not implemented for tensors of 4D or higher rank yet");if(Xs.assert(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),Xs.assert(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new BD("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,r=t.shape.length;null==n&&(n=[s-1,r-2]);const a=n;return il((()=>{let n,i;if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=bl(t,t.shape.concat(e))}else if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=bl(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=a[0]===a[1]?uu(dl(e,t),a[0]):uu(dl(Wc(e,[1,0]),t),a[1]);else{const n=a[0]!==e.shape.length-1,s=a[1]===t.shape.length-1;i=xu(e,t,n,s)}if(n>0){let e;e=s>r?s+r-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=Mc(i,t)}return 1===i.shape.length&&(i=zc(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[WB(this.axes,e.length),WB(this.axes,t.length)],n}computeOutputShape(e){Xs.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new BD("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const r=t.concat(n);return 1===r.length&&r.push(1),r}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}UB.className="Dot",wf.registerClass(UB);class VB extends AM{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e);return qO((()=>cl(PO(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}VB.className="GaussianNoise",wf.registerClass(VB);class GB extends AM{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return il((()=>{this.invokeCallHook(e,t);const n=bM(e);if(this.rate>0&&this.rate<1){return qO((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return dl(n,PO(n.shape,1,e))}),(()=>n),t.training||!1)}return n}))}}GB.className="GaussianDropout",wf.registerClass(GB);class HB extends AM{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||bM(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return il((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return qO((()=>{const t=bM(e),s=-1.7580993408473766;let r=cc(fd(n),this.rate);r=FO(r,"float32");const a=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-a*s*this.rate,o=cl(dl(t,r),dl(cl(r,-1),s));return cl(dl(o,a),i)}),(()=>bM(e)),t.training||!1)}return e}))}}function jB(e,t,n,s,r,a=.001){let i;if(2===e.rank)i=Dh(e,t,n,s,r,a);else if(3===e.rank)i=Oh(e,t,n,s,r,a);else{if(4!==e.rank)throw new BD(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Mh(e,t,n,s,r,a)}return i}function qB(e,t,n,s,r=.001){return Xs.arraysEqual(s.slice().sort(),EO(0,e.rank-1))?function(e,t,n,s,r=.001){return il((()=>{const a=Mp(e,s),i=a.mean,o=a.variance;return[jB(e,i,o,n,t,r),i,o]}))}(e,t,n,s,r):function(e,t,n,s,r=.001){return il((()=>{const a=Mp(e,s),i=a.mean,o=a.variance,l=[];for(const t of EO(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=bl(i,l),c=bl(o,l),h=null==t?null:bl(t,l),p=null==n?null:bl(n,l);return[jB(e,u,c,p,h,r),i,o]}))}(e,t,n,s,r)}HB.className="AlphaDropout",wf.registerClass(HB);class KB extends AM{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=mM(e.betaInitializer||"zeros"),this.gammaInitializer=mM(e.gammaInitializer||"ones"),this.movingMeanInitializer=mM(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=mM(e.movingVarianceInitializer||"ones"),this.betaConstraint=YM(e.betaConstraint),this.gammaConstraint=YM(e.gammaConstraint),this.betaRegularizer=Dz(e.betaRegularizer),this.gammaRegularizer=Dz(e.gammaRegularizer)}build(e){e=xM(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new zD(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new NM({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return il((()=>{const n=null!=t.training&&t.training,s=bM(e),r=s.shape,a=r.length,i=EO(0,a),o=this.axis>=0?this.axis:this.axis+a;i.splice(o,1);const l=UD(1,a);l[o]=r[o];const u=i.slice();u.sort();const c=!Xs.arraysEqual(u,EO(0,a).slice(0,a-1));if(!n)return(()=>{if(c){const e=bl(this.movingMean.read(),l),t=bl(this.movingVariance.read(),l),n=this.center?bl(this.beta.read(),l):null,r=this.scale?bl(this.gamma.read(),l):null;return jB(s,e,t,n,r,this.epsilon)}return jB(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=qB(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{il((()=>{const s=1-n,r=e.read(),a=dl(sc(r,t),s);e.write(sc(r,a))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fM(this.betaInitializer),gammaInitializer:fM(this.gammaInitializer),movingMeanInitializer:fM(this.movingMeanInitializer),movingVarianceInitializer:fM(this.movingVarianceInitializer),betaRegularizer:Fz(this.betaRegularizer),gammaRegularizer:Fz(this.gammaRegularizer),betaConstraint:KM(this.betaConstraint),gammaConstraint:KM(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}KB.className="BatchNormalization",wf.registerClass(KB);class XB extends AM{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=mM(e.betaInitializer||"zeros"),this.gammaInitializer=mM(e.gammaInitializer||"ones"),this.betaRegularizer=Dz(e.betaRegularizer),this.gammaRegularizer=Dz(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=xM(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==eO(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,true):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,true):this.beta=null,this.built=!0}call(e,t){const n=bM(e),s=n.shape,r=s.length;return il((()=>{let{mean:e,variance:t}=Mp(n,this.axis,!0);const a=UD(1,r);for(const e of this.axis)a[e]=s[e];const i=e=>null!=e&&e.shape.length!==r?bl(e,a):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let e=0;e<r;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=_u(e,u),t=_u(t,u),null!=o&&(o=_u(o,c)),null!=l&&(l=_u(l,c)),jB(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fM(this.betaInitializer),gammaInitializer:fM(this.gammaInitializer),betaRegularizer:Fz(this.betaRegularizer),gammaRegularizer:Fz(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}XB.className="LayerNormalization",wf.registerClass(XB);class YB extends AM{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new zD(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new zD(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new zD(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new NM({ndim:4})]}computeOutputShape(e){let t,n;return e=xM(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return il((()=>{return t=bM(e),n=this.padding,s=this.dataFormat,il((()=>{if(4!==t.rank)throw new zD(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new zD("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new zD(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Up(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function ZB(e,t,n,s,r,a){return il((()=>{let i;yO(r),xO(a),bO(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Gz(e,r);const o="same"===s?"same":"valid";return i="max"===a?Ep(e,t,n,o):$h(e,t,n,o),"channelsFirst"===r&&(i=Wc(i,[0,3,1,2])),i}))}function JB(e,t,n,s,r,a){return il((()=>{let i;yO(r),xO(a),bO(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==a&&(a="max"),e=Hz(e,r);const o="same"===s?"same":"valid";return i="max"===a?Ap(e,t,n,o):Eh(e,t,n,o),"channelsFirst"===r&&(i=Wc(i,[0,4,1,2,3])),i}))}YB.className="ZeroPadding2D",wf.registerClass(YB);class QB extends AM{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new zD(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(rO(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new zD(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}rO(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,bO(this.padding),this.inputSpec=[new NM({ndim:3})]}computeOutputShape(e){const t=Uz((e=xM(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return il((()=>{this.invokeCallHook(e,t),e=_O(bM(e),2);const n=this.poolingFunction(bM(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Mc(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class eP extends QB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),ZB(e,t,n,s,r,"max")}}eP.className="MaxPooling1D",wf.registerClass(eP);class tP extends QB{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),ZB(e,t,n,s,r,"avg")}}tP.className="AveragePooling1D",wf.registerClass(tP);class nP extends AM{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new zD(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];rO(this.poolSize,"poolSize"),rO(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,yO(this.dataFormat),bO(this.padding),this.inputSpec=[new NM({ndim:4})]}computeOutputShape(e){e=xM(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Uz(t,this.poolSize[0],this.padding,this.strides[0]),n=Uz(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return il((()=>(this.invokeCallHook(e,t),this.poolingFunction(bM(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class sP extends nP{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),ZB(e,t,n,s,r,"max")}}sP.className="MaxPooling2D",wf.registerClass(sP);class rP extends nP{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),ZB(e,t,n,s,r,"avg")}}rP.className="AveragePooling2D",wf.registerClass(rP);class aP extends AM{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new zD(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];rO(this.poolSize,"poolSize"),rO(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,yO(this.dataFormat),bO(this.padding),this.inputSpec=[new NM({ndim:5})]}computeOutputShape(e){e=xM(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Uz(t,this.poolSize[0],this.padding,this.strides[0]),n=Uz(n,this.poolSize[1],this.padding,this.strides[1]),s=Uz(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return il((()=>(this.invokeCallHook(e,t),this.poolingFunction(bM(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class iP extends aP{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),JB(e,t,n,s,r,"max")}}iP.className="MaxPooling3D",wf.registerClass(iP);class oP extends aP{constructor(e){super(e)}poolingFunction(e,t,n,s,r){return yO(r),bO(s),JB(e,t,n,s,r,"avg")}}oP.className="AveragePooling3D",wf.registerClass(oP);class lP extends AM{constructor(e){super(e),this.inputSpec=[new NM({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new BD}}class uP extends lP{constructor(e){super(e||{})}call(e,t){return il((()=>{const t=bM(e);return Hc(t,1)}))}}uP.className="GlobalAveragePooling1D",wf.registerClass(uP);class cP extends lP{constructor(e){super(e||{})}call(e,t){return il((()=>{const t=bM(e);return Ec(t,1)}))}}cP.className="GlobalMaxPooling1D",wf.registerClass(cP);class hP extends AM{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,yO(this.dataFormat),this.inputSpec=[new NM({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new BD}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class pP extends hP{call(e,t){return il((()=>{const t=bM(e);return"channelsLast"===this.dataFormat?Hc(t,[1,2]):Hc(t,[2,3])}))}}pP.className="GlobalAveragePooling2D",wf.registerClass(pP);class dP extends hP{call(e,t){return il((()=>{const t=bM(e);return"channelsLast"===this.dataFormat?Ec(t,[1,2]):Ec(t,[2,3])}))}}dP.className="GlobalMaxPooling2D",wf.registerClass(dP);class fP extends AM{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=lL(t.layer,n);delete t.layer;const r={layer:s};return Object.assign(r,t),new e(r)}}class mP extends fP{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=xM(e)).length<3)throw new zD(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=xM(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return il((()=>uB(((e,n)=>[bM(this.layer.call(e,t)),[]]),e=bM(e),[],!1,null,null,!1,!0)[1]))}}mP.className="TimeDistributed",wf.registerClass(mP);class gP extends fP{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=lL(n),t.goBackwards=!0!==t.goBackwards;const s={};var r;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=lL(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,r=this.mergeMode,nO(mO,"BidirectionalMergeMode",r),e.weights)throw new BD("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,r=this.forwardLayer.computeOutputShape(e);return Array.isArray(r)&&Array.isArray(r[0])||(r=[r]),this.returnState?(s=r.slice(1),t=r[0]):t=r[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):HD(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const r=lB(e,n,s,this.numConstants);if(e=r.inputs,n=r.initialState,s=r.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const a=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new zD("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,a.push(...n);const s=n.map((e=>new NM({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new BD("Support for constants in Bidirectional layers is not implemented yet.");const o=a[0]instanceof TM;for(const e of a)if(e instanceof TM!==o)throw new zD("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(a),s=this.inputSpec.concat(i),r=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=r,o}return super.apply(e,t)}call(e,t){return il((()=>{const n=t.initialState;let s,r,a,i;if(null==n)s=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{const a=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(a=s.slice(1).concat(r.slice(1))),s=s[0],r=r[0]),this.returnSequences&&(r=Tl(r,1)),"concat"===this.mergeMode?i=LO([s,r]):"sum"===this.mergeMode?i=cl(s,r):"ave"===this.mergeMode?i=dl(.5,cl(s,r)):"mul"===this.mergeMode?i=dl(s,r):null==this.mergeMode&&(i=[s,r]),this.returnState?null==this.mergeMode?i.concat(a):[i].concat(a):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){vO(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),vO(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=lL(t.layer);if(delete t.layer,null!=t.numConstants)throw new BD("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}gP.className="Bidirectional",wf.registerClass(gP);class yP extends AM{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){const e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return il((()=>("float32"!==(e=bM(e)).dtype&&(e=FO(e,"float32")),cl(dl(e,this.scale),this.offset))))}}yP.className="Rescaling",wf.registerClass(yP);const{resizeBilinear:bP,cropAndResize:xP}=mf;class wP extends AM{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,t,n,s,r,a,i,o){return il((()=>{let l,u=!1;const c=[t/a,n/i,(s+t)/a,(r+n)/i],h=[];3===e.rank?(u=!0,l=mc([e])):l=e;for(let e=0;e<l.shape[0];e++)h.push(c);const p=ja(h,[h.length,4]),d=oc(0,h.length,1,"int32"),f=xP(l,p,d,[s,r],"nearest");return FO(u?bM(gc(f)):f,o)}))}upsize(e,t,n,s){return il((()=>FO(bP(e,[t,n]),s)))}call(e,t){return il((()=>{const t=bM(e),n=t.dtype,s=t.shape,r=s[s.length-3],a=s[s.length-2];let i=0;r!==this.height&&(i=Math.floor((r-this.height)/2));let o=0;return a!==this.width&&(o=Math.floor((a-this.width)/2),0===o&&(o=1)),i>=0&&o>=0?this.centerCrop(t,i,o,this.height,this.width,r,a,n):this.upsize(e,this.height,this.width,n)}))}getConfig(){const e={height:this.height,width:this.width},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=xM(e)).length-3,n=e.length-2;return e[t]=this.height,e[n]=this.width,e}}wP.className="CenterCrop",wf.registerClass(wP);class vP extends AM{constructor(e){super(e),this.numTokens=e.numTokens,e.outputMode?this.outputMode=e.outputMode:this.outputMode="multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){return null==(e=xM(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,t){return il((()=>{let n;if("int32"!==(e=bM(e)).dtype&&(e=FO(e,"int32")),void 0!==t.countWeights){if("count"!==this.outputMode)throw new zD(`countWeights is not used when outputMode !== count.\n              Received countWeights=${t.countWeights}`);n=bM(t.countWeights)}const s=Ec(e),r=Ac(e),a=nc(this.numTokens,s).bufferSync().get(0),i=cc(r,0).bufferSync().get(0);if(!a||!i)throw new zD(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function(e,t,n,s){let r=bM(e);if("int32"!==r.dtype&&(r=FO(r,"int32")),"int"===t)return r;const a=r.shape;if(0===r.rank&&(r=zc(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=zc(r,-1)),r.rank>2)throw new zD(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${a} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(t);let o;if(o=ep(r,void 0!==s&&"count"===t?s:[],n,i),"tfIdf"!==t)return o;if(s)return dl(o,s);throw new zD("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,n)}))}}vP.className="CategoryEncoding",wf.registerClass(vP);const kP=new Set(["bilinear","nearest"]);class IP extends AM{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!kP.has(e.interpolation))throw new zD(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=Boolean(e.cropToAspectRatio)}computeOutputShape(e){const t=(e=xM(e))[2];return[this.height,this.width,t]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return il((()=>{const t=[this.height,this.width];if("bilinear"===this.interpolation)return mf.resizeBilinear(e,t,!this.cropToAspectRatio);if("nearest"===this.interpolation)return mf.resizeNearestNeighbor(e,t,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...kP]} are supported`)}))}}IP.className="Resizing",wf.registerClass(IP);class SP{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}SP.className="RandomSeed";class NP extends AM{constructor(e){super(e),this.randomGenerator=new SP(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},t=super.getConfig();return Object.assign(e,t),e}}NP.className="BaseRandomLayer";const TP=new Set(["bilinear","nearest"]);class CP extends NP{constructor(e){super(e);const{factor:t,interpolation:n="bilinear"}=e;if(this.factor=t,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new zD(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new zD(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new zD(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(n){if(!TP.has(n))throw new zD(`Invalid interpolation parameter: ${n} is not implemented`);this.interpolation=n}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}computeOutputShape(e){const t=(e=xM(e))[2];return[this.imgHeight,-1,t]}call(e,t){return il((()=>{const t=bM(e);this.imgHeight=t.shape[t.shape.length-3];const n=t.shape[t.shape.length-2];this.widthFactor=fd([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let s=this.widthFactor.dataSync()[0]*n;s=Math.round(s);const r=[this.imgHeight,s];switch(this.interpolation){case"bilinear":return mf.resizeBilinear(e,r);case"nearest":return mf.resizeNearestNeighbor(e,r);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...TP]} are supported`)}}))}}CP.className="RandomWidth",wf.registerClass(CP);var $P,EP;oe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}($P||($P={})),function(e){let t;var n;(n=t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[n.LEGACY=0]="LEGACY",n[n.V1=1]="V1",n[n.V2=2]="V2"}(EP||(EP={}));var AP={};t(AP,"json",(()=>RP));const RP=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var FP={};t(FP,"json",(()=>_P));const _P=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var DP={};t(DP,"json",(()=>OP));const OP=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var MP={};t(MP,"json",(()=>LP));const LP=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var zP={};t(zP,"json",(()=>BP));const BP=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var PP={};t(PP,"json",(()=>WP));const WP=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var UP={};t(UP,"json",(()=>VP));const VP=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var GP={};t(GP,"json",(()=>HP));const HP=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var jP={};t(jP,"json",(()=>qP));const qP=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var KP={};t(KP,"json",(()=>XP));const XP=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var YP={};t(YP,"json",(()=>ZP));const ZP=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}];var JP={};t(JP,"json",(()=>QP));const QP=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}];var eW={};t(eW,"json",(()=>tW));const tW=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}];var nW={};t(nW,"json",(()=>sW));const sW=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var rW={};t(rW,"json",(()=>aW));const aW=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}];var iW={};t(iW,"json",(()=>oW));const oW=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var lW={};t(lW,"json",(()=>uW));const uW=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var cW={};t(cW,"json",(()=>hW));const hW=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var pW={};t(pW,"json",(()=>dW));const dW=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];var fW={};n(fW,fl);Error;new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);chrome.runtime.onInstalled.addListener((()=>{chrome.contextMenus.create({id:"contextMenu0",title:"Анализировать изображение",contexts:["image"]})})),chrome.contextMenus.onClicked.addListener((function(e,t){const n={action:"IMAGE_CLICKED",url:e.srcUrl};chrome.tabs.sendMessage(t.id,n,(n=>{n.rawImageData?async function(e,t,n){console.log("Преобразуем изображение к нужному входному формату...");const s=performance.now(),r=await fetch("http://localhost:3000/parse_img",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}),a=(await r.json()).data;console.log(a);const i=Math.floor(performance.now()-s);console.log(`Картинка преобразована за ${i} ms...`),console.log("Подключение к модели...");const o=performance.now(),l=await fetch("http://localhost:3000/initModel"),u=await l.json();if(!n)return void console.error("No tab.  No prediction.");if(!u.code)return console.log("Waiting for model to load..."),void setTimeout((()=>{this.analyzeImage(t,n)}),5e3);const c=Math.floor(performance.now()-o);console.log(`Подключились за ${c} ms...`),console.log("Классифицируем...");const h=performance.now(),p=await fetch("http://localhost:3000/predict"),d=await p.json();console.log(d);const f=performance.now()-h;console.log(`Анализ завершен за ${f.toFixed(1)} ms `);const m={action:"IMAGE_CLICK_PROCESSED",url:t,predictions:d};chrome.tabs.sendMessage(n,m)}(n.rawImageData,e.srcUrl,t.id):console.error("Failed to get image data. The image might be too small or failed to load. See console logs for errors.")}))}))})();
//# sourceMappingURL=service_worker.js.map
